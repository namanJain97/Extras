package com.rbs.tntr.business.blotter.utility;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;

import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class EntityComparatorTest {

    @Mock
    private EntityComparator.ID idFetcher;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    // Existing Tests

    @Test
    public void testCompare_PrimitivesEqual() {
        String source = "test";
        String target = "test";

        List<EntityComparator.Delta> deltas = EntityComparator.compare(source, target, idFetcher);

        assertNotNull(deltas);
        assertTrue(deltas.isEmpty());
    }

    @Test
    public void testCompare_PrimitivesDifferent() {
        Integer source = 42;
        Integer target = 43;

        List<EntityComparator.Delta> deltas = EntityComparator.compare(source, target, idFetcher);

        assertNotNull(deltas);
        assertEquals(1, deltas.size());
        EntityComparator.Delta delta = deltas.get(0);
        assertEquals(EntityComparator.ROOT, delta.getFieldName());
        assertEquals(source, delta.getSourceValue());
        assertEquals(target, delta.getTargetValue());
        assertEquals(EntityComparator.Delta.Command.OBJECT_ASSIGN_FIELD, delta.getCmd());
    }

    @Test
    public void testCompare_NullVsNonNull() {
        String source = null;
        String target = "test";

        List<EntityComparator.Delta> deltas = EntityComparator.compare(source, target, idFetcher);

        assertNotNull(deltas);
        assertEquals(1, deltas.size());
        EntityComparator.Delta delta = deltas.get(0);
        assertEquals(EntityComparator.ROOT, delta.getFieldName());
        assertNull(delta.getSourceValue());
        assertEquals(target, delta.getTargetValue());
        assertEquals(EntityComparator.Delta.Command.OBJECT_ASSIGN_FIELD, delta.getCmd());
    }

    @Test
    public void testCompare_SimpleObjects() {
        class TestObject {
            private String name;
            private int value;

            public TestObject(String name, int value) {
                this.name = name;
                this.value = value;
            }
        }

        TestObject source = new TestObject("foo", 100);
        TestObject target = new TestObject("bar", 200);

        when(idFetcher.getId(source)).thenReturn("obj1");
        when(idFetcher.getId(target)).thenReturn("obj1");

        List<EntityComparator.Delta> deltas = EntityComparator.compare(source, target, idFetcher);

        assertNotNull(deltas);
        assertEquals(2, deltas.size());
        boolean foundName = false;
        boolean foundValue = false;
        for (EntityComparator.Delta delta : deltas) {
            if ("name".equals(delta.getFieldName())) {
                assertEquals("foo", delta.getSourceValue());
                assertEquals("bar", delta.getTargetValue());
                assertEquals(EntityComparator.Delta.Command.OBJECT_ASSIGN_FIELD, delta.getCmd());
                foundName = true;
            } else if ("value".equals(delta.getFieldName())) {
                assertEquals(100, delta.getSourceValue());
                assertEquals(200, delta.getTargetValue());
                assertEquals(EntityComparator.Delta.Command.OBJECT_ASSIGN_FIELD, delta.getCmd());
                foundValue = true;
            }
        }
        assertTrue(foundName && foundValue);
    }

    @Test
    public void testCompare_ArraysDifferentLength() {
        int[] source = {1, 2};
        int[] target = {1, 2, 3};

        List<EntityComparator.Delta> deltas = EntityComparator.compare(source, target, idFetcher);

        assertNotNull(deltas);
        assertEquals(2, deltas.size());
        boolean foundResize = false;
        boolean foundSet = false;
        for (EntityComparator.Delta delta : deltas) {
            if (delta.getCmd() == EntityComparator.Delta.Command.ARRAY_RESIZE) {
                assertEquals(3, delta.getOptionalKey());
                foundResize = true;
            } else if (delta.getCmd() == EntityComparator.Delta.Command.ARRAY_SET_ELEMENT) {
                assertEquals(2, delta.getOptionalKey());
                assertNull(delta.getSourceValue());
                assertEquals(3, delta.getTargetValue());
                foundSet = true;
            }
        }
        assertTrue(foundResize && foundSet);
    }

    @Test
    public void testCompare_ListsDifferentElements() {
        List<String> source = Arrays.asList("a", "b");
        List<String> target = Arrays.asList("a", "c");

        List<EntityComparator.Delta> deltas = EntityComparator.compare(source, target, idFetcher);

        assertNotNull(deltas);
        assertEquals(1, deltas.size());
        EntityComparator.Delta delta = deltas.get(0);
        assertEquals(1, delta.getOptionalKey());
        assertEquals("b", delta.getSourceValue());
        assertEquals("c", delta.getTargetValue());
        assertEquals(EntityComparator.Delta.Command.LIST_SET_ELEMENT, delta.getCmd());
    }

    @Test
    public void testCompare_SetsDifferentElements() {
        Set<String> source = new LinkedHashSet<>(Arrays.asList("a", "b"));
        Set<String> target = new LinkedHashSet<>(Arrays.asList("a", "c"));

        List<EntityComparator.Delta> deltas = EntityComparator.compare(source, target, idFetcher);

        assertNotNull(deltas);
        assertEquals(2, deltas.size());
        boolean foundRemove = false;
        boolean foundAdd = false;
        for (EntityComparator.Delta delta : deltas) {
            if (delta.getCmd() == EntityComparator.Delta.Command.SET_REMOVE) {
                assertEquals("b", delta.getSourceValue());
                assertNull(delta.getTargetValue());
                foundRemove = true;
            } else if (delta.getCmd() == EntityComparator.Delta.Command.SET_ADD) {
                assertNull(delta.getSourceValue());
                assertEquals("c", delta.getTargetValue());
                foundAdd = true;
            }
        }
        assertTrue(foundRemove && foundAdd);
    }

    @Test
    public void testCompare_MapsDifferentValues() {
        Map<String, Integer> source = new HashMap<>();
        source.put("key1", 1);
        source.put("key2", 2);
        Map<String, Integer> target = new HashMap<>();
        target.put("key1", 1);
        target.put("key2", 3);

        List<EntityComparator.Delta> deltas = EntityComparator.compare(source, target, idFetcher);

        assertNotNull(deltas);
        assertEquals(1, deltas.size());
        EntityComparator.Delta delta = deltas.get(0);
        assertEquals("key2", delta.getOptionalKey());
        assertEquals(2, delta.getSourceValue());
        assertEquals(3, delta.getTargetValue());
        assertEquals(EntityComparator.Delta.Command.MAP_PUT, delta.getCmd());
    }

    @Test
    public void testCompare_DifferentObjectTypes() {
        Integer source = 42;
        String target = "42";

        List<EntityComparator.Delta> deltas = EntityComparator.compare(source, target, idFetcher);

        assertNotNull(deltas);
        assertEquals(1, deltas.size());
        EntityComparator.Delta delta = deltas.get(0);
        assertEquals(EntityComparator.ROOT, delta.getFieldName());
        assertEquals(source, delta.getSourceValue());
        assertEquals(target, delta.getTargetValue());
        assertEquals(EntityComparator.Delta.Command.OBJECT_FIELD_TYPE_CHANGED, delta.getCmd());
    }

    @Test
    public void testCompare_BothNull() {
        Object source = null;
        Object target = null;

        List<EntityComparator.Delta> deltas = EntityComparator.compare(source, target, idFetcher);

        assertNotNull(deltas);
        assertTrue(deltas.isEmpty());
    }

    @Test
    public void testCompare_SetsWithNullValues() {
        Set<String> source = new LinkedHashSet<>(Arrays.asList("a", null));
        Set<String> target = new LinkedHashSet<>(Arrays.asList("a", "b"));

        List<EntityComparator.Delta> deltas = EntityComparator.compare(source, target, idFetcher);

        assertNotNull(deltas);
        assertEquals(2, deltas.size());
        boolean foundRemove = false;
        boolean foundAdd = false;
        for (EntityComparator.Delta delta : deltas) {
            if (delta.getCmd() == EntityComparator.Delta.Command.SET_REMOVE) {
                assertNull(delta.getSourceValue());
                foundRemove = true;
            } else if (delta.getCmd() == EntityComparator.Delta.Command.SET_ADD) {
                assertEquals("b", delta.getTargetValue());
                foundAdd = true;
            }
        }
        assertTrue(foundRemove && foundAdd);
    }

    @Test
    public void testCompare_MapsWithNullValues() {
        Map<String, Integer> source = new HashMap<>();
        source.put("key1", null);
        source.put("key2", 2);
        Map<String, Integer> target = new HashMap<>();
        target.put("key1", 1);
        target.put("key2", null);

        List<EntityComparator.Delta> deltas = EntityComparator.compare(source, target, idFetcher);

        assertNotNull(deltas);
        assertEquals(2, deltas.size());
        boolean foundKey1 = false;
        boolean foundKey2 = false;
        for (EntityComparator.Delta delta : deltas) {
            if ("key1".equals(delta.getOptionalKey())) {
                assertNull(delta.getSourceValue());
                assertEquals(1, delta.getTargetValue());
                assertEquals(EntityComparator.Delta.Command.MAP_PUT, delta.getCmd());
                foundKey1 = true;
            } else if ("key2".equals(delta.getOptionalKey())) {
                assertEquals(2, delta.getSourceValue());
                assertNull(delta.getTargetValue());
                assertEquals(EntityComparator.Delta.Command.MAP_PUT, delta.getCmd());
                foundKey2 = true;
            }
        }
        assertTrue(foundKey1 && foundKey2);
    }

    @Test
    public void testCompare_ArraysWithNullElements() {
        String[] source = {null, "b"};
        String[] target = {"a", "b"};

        List<EntityComparator.Delta> deltas = EntityComparator.compare(source, target, idFetcher);

        assertNotNull(deltas);
        assertEquals(1, deltas.size());
        EntityComparator.Delta delta = deltas.get(0);
        assertEquals(0, delta.getOptionalKey());
        assertNull(delta.getSourceValue());
        assertEquals("a", delta.getTargetValue());
        assertEquals(EntityComparator.Delta.Command.ARRAY_SET_ELEMENT, delta.getCmd());
    }

    @Test
    public void testCompare_DifferentObjectTypesWithNull() {
        Integer source = null;
        String target = "42";

        List<EntityComparator.Delta> deltas = EntityComparator.compare(source, target, idFetcher);

        assertNotNull(deltas);
        assertEquals(1, deltas.size());
        EntityComparator.Delta delta = deltas.get(0);
        assertEquals(EntityComparator.ROOT, delta.getFieldName());
        assertNull(delta.getSourceValue());
        assertEquals(target, delta.getTargetValue());
        assertEquals(EntityComparator.Delta.Command.OBJECT_ASSIGN_FIELD, delta.getCmd());
    }

    @Test
    public void testCompare_OrphanObjects() {
        class TestObject {
            private String id;

            public TestObject(String id) {
                this.id = id;
            }

            public String getId() {
                return id;
            }
        }

        TestObject source = new TestObject("obj1");

        when(idFetcher.getId(source)).thenReturn("obj1");

        List<EntityComparator.Delta> deltas = EntityComparator.compare(source, null, idFetcher);

        assertNotNull(deltas);
        assertEquals(2, deltas.size());
        boolean foundAssign = false;
        boolean foundOrphan = false;
        for (EntityComparator.Delta delta : deltas) {
            if (delta.getCmd() == EntityComparator.Delta.Command.OBJECT_ASSIGN_FIELD) {
                assertEquals(source, delta.getSourceValue());
                assertNull(delta.getTargetValue());
                foundAssign = true;
            } else if (delta.getCmd() == EntityComparator.Delta.Command.OBJECT_ORPHAN) {
                assertEquals("obj1", delta.getId());
                foundOrphan = true;
            }
        }
        assertTrue(foundAssign && foundOrphan);
    }

    // Additional Tests

    @Test(expected = RuntimeException.class)
    public void testCompare_CustomCollection() {
        Collection<String> source = new ArrayDeque<>(Arrays.asList("a", "b"));
        Collection<String> target = new ArrayDeque<>(Arrays.asList("a", "c"));

        EntityComparator.compare(source, target, idFetcher);
    }

    @Test
    public void testCompare_IdObjectsDifferentIds() {
        class Person {
            private String id;
            private String name;

            public Person(String id, String name) {
                this.id = id;
                this.name = name;
            }

            public String getId() {
                return id;
            }
        }

        Person source = new Person("1", "Alice");
        Person target = new Person("2", "Bob");

        when(idFetcher.getId(source)).thenReturn("1");
        when(idFetcher.getId(target)).thenReturn("2");

        List<EntityComparator.Delta> deltas = EntityComparator.compare(source, target, idFetcher);

        assertNotNull(deltas);
        assertEquals(1, deltas.size());
        EntityComparator.Delta delta = deltas.get(0);
        assertEquals(EntityComparator.ROOT, delta.getFieldName());
        assertEquals(source, delta.getSourceValue());
        assertEquals(target, delta.getTargetValue());
        assertEquals(EntityComparator.Delta.Command.OBJECT_ASSIGN_FIELD, delta.getCmd());
    }

    @Test
    public void testCompare_IdObjectsSameIds() {
        class Person {
            private String id;
            private String name;

            public Person(String id, String name) {
                this.id = id;
                this.name = name;
            }

            public String getId() {
                return id;
            }
        }

        Person source = new Person("1", "Alice");
        Person target = new Person("1", "Alicia");

        when(idFetcher.getId(source)).thenReturn("1");
        when(idFetcher.getId(target)).thenReturn("1");

        List<EntityComparator.Delta> deltas = EntityComparator.compare(source, target, idFetcher);

        assertNotNull(deltas);
        assertEquals(1, deltas.size());
        EntityComparator.Delta delta = deltas.get(0);
        assertEquals("name", delta.getFieldName());
        assertEquals("Alice", delta.getSourceValue());
        assertEquals("Alicia", delta.getTargetValue());
        assertEquals(EntityComparator.Delta.Command.OBJECT_ASSIGN_FIELD, delta.getCmd());
    }

    @Test
    public void testCompare_ArraysOfObjects() {
        class Person {
            private String id;
            private String name;

            public Person(String id, String name) {
                this.id = id;
                this.name = name;
            }

            public String getId() {
                return id;
            }
        }

        Person[] source = {new Person("1", "Alice"), new Person("2", "Bob")};
        Person[] target = {new Person("1", "Alicia"), new Person("3", "Charlie")};

        when(idFetcher.getId(source[0])).thenReturn("1");
        when(idFetcher.getId(target[0])).thenReturn("1");
        when(idFetcher.getId(source[1])).thenReturn("2");
        when(idFetcher.getId(target[1])).thenReturn("3");

        List<EntityComparator.Delta> deltas = EntityComparator.compare(source, target, idFetcher);

        assertNotNull(deltas);
        assertEquals(2, deltas.size());
        boolean foundNameDelta = false;
        boolean foundElementDelta = false;
        for (EntityComparator.Delta delta : deltas) {
            if (delta.getCmd() == EntityComparator.Delta.Command.OBJECT_ASSIGN_FIELD && "name".equals(delta.getFieldName())) {
                assertEquals("Alice", delta.getSourceValue());
                assertEquals("Alicia", delta.getTargetValue());
                foundNameDelta = true;
            } else if (delta.getCmd() == EntityComparator.Delta.Command.ARRAY_SET_ELEMENT) {
                assertEquals(1, delta.getOptionalKey());
                assertEquals(source[1], delta.getSourceValue());
                assertEquals(target[1], delta.getTargetValue());
                foundElementDelta = true;
            }
        }
        assertTrue(foundNameDelta && foundElementDelta);
    }

    @Test
    public void testCompare_SetsOfObjects() {
        class Person {
            private String id;
            private String name;

            public Person(String id, String name) {
                this.id = id;
                this.name = name;
            }

            public String getId() {
                return id;
            }
        }

        Person p1Source = new Person("1", "Alice");
        Person p2Source = new Person("2", "Bob");
        Set<Person> source = new LinkedHashSet<>(Arrays.asList(p1Source, p2Source));

        Person p1Target = new Person("1", "Alicia");
        Person p3Target = new Person("3", "Charlie");
        Set<Person> target = new LinkedHashSet<>(Arrays.asList(p1Target, p3Target));

        when(idFetcher.getId(p1Source)).thenReturn("1");
        when(idFetcher.getId(p1Target)).thenReturn("1");
        when(idFetcher.getId(p2Source)).thenReturn("2");
        when(idFetcher.getId(p3Target)).thenReturn("3");

        List<EntityComparator.Delta> deltas = EntityComparator.compare(source, target, idFetcher);

        assertNotNull(deltas);
        assertEquals(3, deltas.size());
        boolean foundRemove = false;
        boolean foundAdd = false;
        boolean foundUpdate = false;
        for (EntityComparator.Delta delta : deltas) {
            if (delta.getCmd() == EntityComparator.Delta.Command.SET_REMOVE) {
                assertEquals(p2Source, delta.getSourceValue());
                foundRemove = true;
            } else if (delta.getCmd() == EntityComparator.Delta.Command.SET_ADD) {
                assertEquals(p3Target, delta.getTargetValue());
                foundAdd = true;
            } else if (delta.getCmd() == EntityComparator.Delta.Command.OBJECT_ASSIGN_FIELD && "name".equals(delta.getFieldName())) {
                assertEquals("Alice", delta.getSourceValue());
                assertEquals("Alicia", delta.getTargetValue());
                foundUpdate = true;
            }
        }
        assertTrue(foundRemove && foundAdd && foundUpdate);
    }

    @Test
    public void testCompare_MapsWithObjectValues() {
        class Person {
            private String id;
            private String name;

            public Person(String id, String name) {
                this.id = id;
                this.name = name;
            }

            public String getId() {
                return id;
            }
        }

        Person p1Source = new Person("1", "Alice");
        Person p2Source = new Person("2", "Bob");
        Map<String, Person> source = new HashMap<>();
        source.put("key1", p1Source);
        source.put("key2", p2Source);

        Person p1Target = new Person("1", "Alicia");
        Person p3Target = new Person("3", "Charlie");
        Map<String, Person> target = new HashMap<>();
        target.put("key1", p1Target);
        target.put("key3", p3Target);

        when(idFetcher.getId(p1Source)).thenReturn("1");
        when(idFetcher.getId(p1Target)).thenReturn("1");
        when(idFetcher.getId(p2Source)).thenReturn("2");
        when(idFetcher.getId(p3Target)).thenReturn("3");

        List<EntityComparator.Delta> deltas = EntityComparator.compare(source, target, idFetcher);

        assertNotNull(deltas);
        assertEquals(3, deltas.size());
        boolean foundUpdate = false;
        boolean foundRemove = false;
        boolean foundAdd = false;
        for (EntityComparator.Delta delta : deltas) {
            if (delta.getCmd() == EntityComparator.Delta.Command.OBJECT_ASSIGN_FIELD && "name".equals(delta.getFieldName())) {
                assertEquals("Alice", delta.getSourceValue());
                assertEquals("Alicia", delta.getTargetValue());
                foundUpdate = true;
            } else if (delta.getCmd() == EntityComparator.Delta.Command.MAP_REMOVE) {
                assertEquals("key2", delta.getOptionalKey());
                assertEquals(p2Source, delta.getSourceValue());
                foundRemove = true;
            } else if (delta.getCmd() == EntityComparator.Delta.Command.MAP_PUT) {
                assertEquals("key3", delta.getOptionalKey());
                assertEquals(p3Target, delta.getTargetValue());
                foundAdd = true;
            }
        }
        assertTrue(foundUpdate && foundRemove && foundAdd);
    }

    @Test
    public void testCompare_OrphanDetection() {
        class Person {
            private String id;
            private String name;

            public Person(String id, String name) {
                this.id = id;
                this.name = name;
            }

            public String getId() {
                return id;
            }
        }

        List<Person> source = Arrays.asList(new Person("1", "Alice"), new Person("2", "Bob"));
        List<Person> target = Arrays.asList(new Person("1", "Alice"));

        when(idFetcher.getId(source.get(0))).thenReturn("1");
        when(idFetcher.getId(source.get(1))).thenReturn("2");
        when(idFetcher.getId(target.get(0))).thenReturn("1");

        List<EntityComparator.Delta> deltas = EntityComparator.compare(source, target, idFetcher);

        assertNotNull(deltas);
        assertEquals(2, deltas.size());
        boolean foundResize = false;
        boolean foundOrphan = false;
        for (EntityComparator.Delta delta : deltas) {
            if (delta.getCmd() == EntityComparator.Delta.Command.LIST_RESIZE) {
                assertEquals(1, delta.getOptionalKey());
                foundResize = true;
            } else if (delta.getCmd() == EntityComparator.Delta.Command.OBJECT_ORPHAN) {
                assertEquals("2", delta.getId());
                foundOrphan = true;
            }
        }
        assertTrue(foundResize && foundOrphan);
    }

    @Test
    public void testCompare_NonIdObjects() {
        class NonIdObject {
            private String name;

            public NonIdObject(String name) {
                this.name = name;
            }
        }

        NonIdObject source = new NonIdObject("foo");
        NonIdObject target = new NonIdObject("bar");

        when(idFetcher.getId(source)).thenThrow(new RuntimeException("No ID"));
        when(idFetcher.getId(target)).thenThrow(new RuntimeException("No ID"));

        List<EntityComparator.Delta> deltas = EntityComparator.compare(source, target, idFetcher);

        assertNotNull(deltas);
        assertEquals(1, deltas.size());
        EntityComparator.Delta delta = deltas.get(0);
        assertEquals(EntityComparator.ROOT, delta.getFieldName());
        assertEquals(source, delta.getSourceValue());
        assertEquals(target, delta.getTargetValue());
        assertEquals(EntityComparator.Delta.Command.OBJECT_ASSIGN_FIELD, delta.getCmd());
    }

    @Test
    public void testCompare_NonIdObjectsEqual() {
        class NonIdObject {
            private String name;

            public NonIdObject(String name) {
                this.name = name;
            }
        }

        NonIdObject source = new NonIdObject("foo");
        NonIdObject target = new NonIdObject("foo");

        when(idFetcher.getId(source)).thenThrow(new RuntimeException("No ID"));
        when(idFetcher.getId(target)).thenThrow(new RuntimeException("No ID"));

        List<EntityComparator.Delta> deltas = EntityComparator.compare(source, target, idFetcher);

        assertNotNull(deltas);
        assertTrue(deltas.isEmpty());
    }
}
