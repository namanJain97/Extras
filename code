package com.rbs.tntr.business.blotter.services.actions;

import com.google.common.collect.Lists;
import com.nwm.tntr.commons.domain.persistence.entity.DocumentId;
import com.nwm.tntr.commons.domain.persistence.entity.ExceptionManagement;
import com.nwm.tntr.commons.domain.persistence.entity.NonReportableData;
import com.nwm.tntr.commons.domain.persistence.entity.collaterallink.CollateralLinkReport;
import com.nwm.tntr.commons.domain.persistence.entity.collaterallink.CollateralLinkReportDocument;
import com.nwm.tntr.commons.repository.regreporting.WriteResult;
import com.rbs.tntr.business.blotter.df.manager.DfCollateralLinkPersistManager;
import com.rbs.tntr.business.blotter.df.updater.CollateralLinkDataUpdater;
import com.rbs.tntr.business.blotter.services.validators.ActionRequestValidator;
import com.rbs.tntr.business.blotter.web.request.regreportingTrade.*;
import com.rbs.tntr.domain.blotter.enums.ExceptionStatus;
import com.rbs.tntr.domain.blotter.exceptions.BlotterRunTimeException;
import com.rbs.tntr.domain.blotter.tntrBlotterView.ActionDocumentId;
import org.apache.commons.lang3.tuple.Pair;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.lang.reflect.Method;
import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class CollateralLinkActionServiceTest {

    @InjectMocks
    private CollateralLinkActionService collateralLinkActionService;

    @Mock
    private DfCollateralLinkPersistManager dfCollateralPersistManager;

    @Mock
    private CollateralLinkDataUpdater dataUpdater;

    @Mock
    private ActionRequestValidator requestValidator;

    private static final String USERNAME = "testUser";

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    // --- addComment Method Tests ---
    @Test
    public void testAddComment_EmptyRequests() {
        List<AddTradeCommentRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.addComment(requests, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAddComment_ValidRequest() {
        List<AddTradeCommentRequest> requests = setupValidCommentRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.addCommentsToException(any(), any(), eq(USERNAME))).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(DocumentId.class), null)));

        List<ActionUpdateResult> results = collateralLinkActionService.addComment(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testAddComment_UserValidationFails() {
        List<AddTradeCommentRequest> requests = setupValidCommentRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(false);

        List<ActionUpdateResult> results = collateralLinkActionService.addComment(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.USER_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testAddComment_ApprovalStatusValidationFails() {
        List<AddTradeCommentRequest> requests = setupValidCommentRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(true);

        List<ActionUpdateResult> results = collateralLinkActionService.addComment(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testAddComment_ExceptionHandling() {
        List<AddTradeCommentRequest> requests = setupValidCommentRequests();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenThrow(new RuntimeException("Database Error"));

        List<ActionUpdateResult> results = collateralLinkActionService.addComment(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getErrorMessage().contains("Database Error"));
    }

    // --- removeComment Method Tests ---
    @Test
    public void testRemoveComment_EmptyRequests() {
        List<AddTradeCommentRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.removeComment(requests, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testRemoveComment_ValidRequest() {
        List<AddTradeCommentRequest> requests = setupValidCommentRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.removeCommentsToException(any(), any(), eq(USERNAME))).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(DocumentId.class), null)));

        List<ActionUpdateResult> results = collateralLinkActionService.removeComment(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testRemoveComment_UserValidationFails() {
        List<AddTradeCommentRequest> requests = setupValidCommentRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(false);

        List<ActionUpdateResult> results = collateralLinkActionService.removeComment(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.USER_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testRemoveComment_ApprovalStatusValidationFails() {
        List<AddTradeCommentRequest> requests = setupValidCommentRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(true);

        List<ActionUpdateResult> results = collateralLinkActionService.removeComment(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testRemoveComment_ExceptionHandling() {
        List<AddTradeCommentRequest> requests = setupValidCommentRequests();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenThrow(new RuntimeException("Database Error"));

        List<ActionUpdateResult> results = collateralLinkActionService.removeComment(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getErrorMessage().contains("Database Error"));
    }

    // --- updateEditedFields Method Tests ---
    @Test
    public void testUpdateEditedFields_EmptyRequests() {
        List<EditRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.updateEditedFields(requests, USERNAME, ExceptionStatus.Open);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testUpdateEditedFields_ValidRequest() {
        List<EditRequest> requests = setupValidEditRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.updateTradeReportData(any(), any(), eq(USERNAME), eq(ExceptionStatus.Open))).thenReturn(mock(CollateralLinkReport.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(DocumentId.class), null)));

        List<ActionUpdateResult> results = collateralLinkActionService.updateEditedFields(requests, USERNAME, ExceptionStatus.Open);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testUpdateEditedFields_ApprovalStatusValidationFails() {
        List<EditRequest> requests = setupValidEditRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(true);

        List<ActionUpdateResult> results = collateralLinkActionService.updateEditedFields(requests, USERNAME, ExceptionStatus.Open);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testUpdateEditedFields_BlotterRunTimeException() {
        List<EditRequest> requests = setupValidEditRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.updateTradeReportData(any(), any(), eq(USERNAME), eq(ExceptionStatus.Open))).thenThrow(new BlotterRunTimeException("Edit Failed"));

        List<ActionUpdateResult> results = collateralLinkActionService.updateEditedFields(requests, USERNAME, ExceptionStatus.Open);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals("Edit Failed", results.get(0).getErrorMessage());
    }

    @Test
    public void testUpdateEditedFields_ExceptionHandling() {
        List<EditRequest> requests = setupValidEditRequests();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenThrow(new RuntimeException("Database Error"));

        List<ActionUpdateResult> results = collateralLinkActionService.updateEditedFields(requests, USERNAME, ExceptionStatus.Open);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getErrorMessage().contains("Database Error"));
    }

    // --- updateExceptionStatus Method Tests ---
    @Test
    public void testUpdateExceptionStatus_EmptyRequests() {
        List<UpdateExceptionStatusRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.updateExceptionStatus(requests, ExceptionStatus.Open, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testUpdateExceptionStatus_InvalidExceptionStatus() {
        List<UpdateExceptionStatusRequest> requests = setupValidUpdateExceptionStatusRequests();
        when(requestValidator.validateExceptionStatus(eq(ExceptionStatus.Open))).thenReturn(true);

        List<ActionUpdateResult> results = collateralLinkActionService.updateExceptionStatus(requests, ExceptionStatus.Open, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testUpdateExceptionStatus_ValidRequest() {
        List<UpdateExceptionStatusRequest> requests = setupValidUpdateExceptionStatusRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(requestValidator.validateExceptionStatus(eq(ExceptionStatus.Open))).thenReturn(false);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.validateExceptionStatus(eq(ExceptionStatus.Open), any())).thenReturn(true);
        when(requestValidator.validateApprover(eq(ExceptionStatus.Open), any(), any(), eq(USERNAME))).thenReturn(false);
        when(dataUpdater.addExceptionStatus(eq(ExceptionStatus.Open), any(), any(), eq(USERNAME))).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(DocumentId.class), null)));

        List<ActionUpdateResult> results = collateralLinkActionService.updateExceptionStatus(requests, ExceptionStatus.Open, USERNAME);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testUpdateExceptionStatus_UserValidationFails() {
        List<UpdateExceptionStatusRequest> requests = setupValidUpdateExceptionStatusRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(requestValidator.validateExceptionStatus(eq(ExceptionStatus.Open))).thenReturn(false);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(false);

        List<ActionUpdateResult> results = collateralLinkActionService.updateExceptionStatus(requests, ExceptionStatus.Open, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.USER_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testUpdateExceptionStatus_RollbackRejectedRecords() throws Exception {
        List<UpdateExceptionStatusRequest> requests = setupValidUpdateExceptionStatusRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(requestValidator.validateExceptionStatus(eq(ExceptionStatus.Edit_Rejected))).thenReturn(false);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.validateExceptionStatus(eq(ExceptionStatus.Edit_Rejected), any())).thenReturn(true);
        when(requestValidator.validateApprover(eq(ExceptionStatus.Edit_Rejected), any(), any(), eq(USERNAME))).thenReturn(false);
        when(dataUpdater.addExceptionStatus(eq(ExceptionStatus.Edit_Rejected), any(), any(), eq(USERNAME))).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(DocumentId.class), null)));
        when(dfCollateralPersistManager.upsertAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(DocumentId.class), null)));

        List<ActionUpdateResult> results = collateralLinkActionService.updateExceptionStatus(requests, ExceptionStatus.Edit_Rejected, USERNAME);
        assertFalse(results.isEmpty());
        verify(dfCollateralPersistManager, times(2)).getAllRecordsById(anyList());
    }

    @Test
    public void testUpdateExceptionStatus_ExceptionHandling() {
        List<UpdateExceptionStatusRequest> requests = setupValidUpdateExceptionStatusRequests();
        when(requestValidator.validateExceptionStatus(eq(ExceptionStatus.Open))).thenReturn(false);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenThrow(new RuntimeException("Database Error"));

        List<ActionUpdateResult> results = collateralLinkActionService.updateExceptionStatus(requests, ExceptionStatus.Open, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getErrorMessage().contains("Database Error"));
    }

    // --- performResetAction Method Tests ---
    @Test
    public void testPerformResetAction_EmptyRequests() {
        List<UpdateExceptionStatusRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.performResetAction(requests, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testPerformResetAction_ValidRequest() {
        List<UpdateExceptionStatusRequest> requests = setupValidUpdateExceptionStatusRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateResetActionApprovalStatus(any(), any())).thenReturn(true);
        when(dataUpdater.resetAction(any(), any(), eq(USERNAME))).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(DocumentId.class), null)));

        List<ActionUpdateResult> results = collateralLinkActionService.performResetAction(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testPerformResetAction_ApprovalStatusValidationFails() {
        List<UpdateExceptionStatusRequest> requests = setupValidUpdateExceptionStatusRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateResetActionApprovalStatus(any(), any())).thenReturn(false);

        List<ActionUpdateResult> results = collateralLinkActionService.performResetAction(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testPerformResetAction_ExceptionHandling() {
        List<UpdateExceptionStatusRequest> requests = setupValidUpdateExceptionStatusRequests();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenThrow(new RuntimeException("Database Error"));

        List<ActionUpdateResult> results = collateralLinkActionService.performResetAction(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getErrorMessage().contains("Database Error"));
    }

    // --- assignExceptionToUser Method Tests ---
    @Test
    public void testAssignExceptionToUser_EmptyRequests() {
        List<AssignTradeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.assignExceptionToUser(requests, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAssignExceptionToUser_ValidRequest() {
        List<AssignTradeRequest> requests = setupValidAssignTradeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.assignException(any(), any(), eq(USERNAME))).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(DocumentId.class), null)));

        List<ActionUpdateResult> results = collateralLinkActionService.assignExceptionToUser(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testAssignExceptionToUser_ApprovalStatusValidationFails() {
        List<AssignTradeRequest> requests = setupValidAssignTradeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(true);

        List<ActionUpdateResult> results = collateralLinkActionService.assignExceptionToUser(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testAssignExceptionToUser_ExceptionHandling() {
        List<AssignTradeRequest> requests = setupValidAssignTradeRequests();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenThrow(new RuntimeException("Database Error"));

        List<ActionUpdateResult> results = collateralLinkActionService.assignExceptionToUser(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getErrorMessage().contains("Database Error"));
    }

    // --- addJiraId Method Tests ---
    @Test
    public void testAddJiraId_EmptyRequests() {
        List<AddTradeJiraReferenceRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.addJiraId(requests, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAddJiraId_ValidRequest() {
        List<AddTradeJiraReferenceRequest> requests = setupValidJiraReferenceRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.isJiraIdPresent(any(), any())).thenReturn(false);
        when(dataUpdater.addJiraIdToException(any(), any(), eq(USERNAME))).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(DocumentId.class), null)));

        List<ActionUpdateResult> results = collateralLinkActionService.addJiraId(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testAddJiraId_JiraIdAlreadyPresent() {
        List<AddTradeJiraReferenceRequest> requests = setupValidJiraReferenceRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.isJiraIdPresent(any(), any())).thenReturn(true);

        List<ActionUpdateResult> results = collateralLinkActionService.addJiraId(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.JIRA_ID_PRESENT, results.get(0).getErrorMessage());
    }

    @Test
    public void testAddJiraId_ExceptionHandling() {
        List<AddTradeJiraReferenceRequest> requests = setupValidJiraReferenceRequests();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenThrow(new RuntimeException("Database Error"));

        List<ActionUpdateResult> results = collateralLinkActionService.addJiraId(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getErrorMessage().contains("Database Error"));
    }

    // --- removeJiraId Method Tests ---
    @Test
    public void testRemoveJiraId_EmptyRequests() {
        List<AddTradeJiraReferenceRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.removeJiraId(requests, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testRemoveJiraId_ValidRequest() {
        List<AddTradeJiraReferenceRequest> requests = setupValidJiraReferenceRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.isJiraIdPresent(any(), any())).thenReturn(true);
        when(dataUpdater.removeJiraIdFromException(any(), any(), eq(USERNAME))).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(DocumentId.class), null)));

        List<ActionUpdateResult> results = collateralLinkActionService.removeJiraId(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testRemoveJiraId_JiraIdNotPresent() {
        List<AddTradeJiraReferenceRequest> requests = setupValidJiraReferenceRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.isJiraIdPresent(any(), any())).thenReturn(false);

        List<ActionUpdateResult> results = collateralLinkActionService.removeJiraId(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.JIRA_ID_NOT_PRESENT, results.get(0).getErrorMessage());
    }

    @Test
    public void testRemoveJiraId_ExceptionHandling() {
        List<AddTradeJiraReferenceRequest> requests = setupValidJiraReferenceRequests();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenThrow(new RuntimeException("Database Error"));

        List<ActionUpdateResult> results = collateralLinkActionService.removeJiraId(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getErrorMessage().contains("Database Error"));
    }

    // --- addJiraType Method Tests ---
    @Test
    public void testAddJiraType_EmptyRequests() {
        List<AddTradeJiraTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.addJiraType(requests, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAddJiraType_ValidRequest() {
        List<AddTradeJiraTypeRequest> requests = setupValidJiraTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.addJiraTypeToException(any(), any(), eq(USERNAME))).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(DocumentId.class), null)));

        List<ActionUpdateResult> results = collateralLinkActionService.addJiraType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testAddJiraType_ExceptionHandling() {
        List<AddTradeJiraTypeRequest> requests = setupValidJiraTypeRequests();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenThrow(new RuntimeException("Database Error"));

        List<ActionUpdateResult> results = collateralLinkActionService.addJiraType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getErrorMessage().contains("Database Error"));
    }

    // --- removeJiraType Method Tests ---
    @Test
    public void testRemoveJiraType_EmptyRequests() {
        List<AddTradeJiraTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.removeJiraType(requests, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testRemoveJiraType_ValidRequest() {
        List<AddTradeJiraTypeRequest> requests = setupValidJiraTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        ExceptionManagement em = mock(ExceptionManagement.class);
        when(em.getIssueType()).thenReturn(mock(com.nwm.tntr.commons.domain.persistence.entity.JiraType.class));
        when(documents.get(0).getCollateralLinkReport().getExceptionManagement()).thenReturn(em);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(em.getIssueType().value()).thenReturn("type");
        when(requests.get(0).getJiraType().getIssueType()).thenReturn("type");
        when(dataUpdater.removeJiraTypeFromException(any(), any(), eq(USERNAME))).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(DocumentId.class), null)));

        List<ActionUpdateResult> results = collateralLinkActionService.removeJiraType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testRemoveJiraType_JiraTypeNotPresent() {
        List<AddTradeJiraTypeRequest> requests = setupValidJiraTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        ExceptionManagement em = mock(ExceptionManagement.class);
        when(em.getIssueType()).thenReturn(mock(com.nwm.tntr.commons.domain.persistence.entity.JiraType.class));
        when(documents.get(0).getCollateralLinkReport().getExceptionManagement()).thenReturn(em);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(em.getIssueType().value()).thenReturn("differentType");
        when(requests.get(0).getJiraType().getIssueType()).thenReturn("type");

        List<ActionUpdateResult> results = collateralLinkActionService.removeJiraType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.JIRA_TYPE_NOT_PRESENT, results.get(0).getErrorMessage());
    }

    @Test
    public void testRemoveJiraType_ExceptionHandling() {
        List<AddTradeJiraTypeRequest> requests = setupValidJiraTypeRequests();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenThrow(new RuntimeException("Database Error"));

        List<ActionUpdateResult> results = collateralLinkActionService.removeJiraType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getErrorMessage().contains("Database Error"));
    }

    // --- updateUserActionType Method Tests ---
    @Test
    public void testUpdateUserActionType_EmptyRequests() {
        List<UpdateUserActionTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.updateUserActionType(requests, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testUpdateUserActionType_ValidRequest() {
        List<UpdateUserActionTypeRequest> requests = setupValidUpdateUserActionTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(dataUpdater.addComments(any(), eq(USERNAME), any(), any())).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(DocumentId.class), null)));

        List<ActionUpdateResult> results = collateralLinkActionService.updateUserActionType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testUpdateUserActionType_ExceptionHandling() {
        List<UpdateUserActionTypeRequest> requests = setupValidUpdateUserActionTypeRequests();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenThrow(new RuntimeException("Database Error"));

        List<ActionUpdateResult> results = collateralLinkActionService.updateUserActionType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getErrorMessage().contains("Database Error"));
    }

    // --- addCommentType Method Tests ---
    @Test
    public void testAddCommentType_EmptyRequests() {
        List<AddTradeCommentTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.addCommentType(requests, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAddCommentType_ValidRequest() {
        List<AddTradeCommentTypeRequest> requests = setupValidCommentTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.addCommentTypeToException(any(), any(), eq(USERNAME))).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(DocumentId.class), null)));

        List<ActionUpdateResult> results = collateralLinkActionService.addCommentType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testAddCommentType_ExceptionHandling() {
        List<AddTradeCommentTypeRequest> requests = setupValidCommentTypeRequests();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenThrow(new RuntimeException("Database Error"));

        List<ActionUpdateResult> results = collateralLinkActionService.addCommentType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getErrorMessage().contains("Database Error"));
    }

    // --- removeCommentType Method Tests ---
    @Test
    public void testRemoveCommentType_EmptyRequests() {
        List<AddTradeCommentTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.removeCommentType(requests, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testRemoveCommentType_ValidRequest() {
        List<AddTradeCommentTypeRequest> requests = setupValidCommentTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.removeCommentTypeToException(any(), any(), eq(USERNAME))).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(DocumentId.class), null)));

        List<ActionUpdateResult> results = collateralLinkActionService.removeCommentType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testRemoveCommentType_ExceptionHandling() {
        List<AddTradeCommentTypeRequest> requests = setupValidCommentTypeRequests();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenThrow(new RuntimeException("Database Error"));

        List<ActionUpdateResult> results = collateralLinkActionService.removeCommentType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getErrorMessage().contains("Database Error"));
    }

    // --- Private Method Tests via Reflection ---
    @Test
    public void testPopulateTradeRequestMap() throws Exception {
        Method method = CollateralLinkActionService.class.getDeclaredMethod("populateTradeRequestMap", UpdateRequest.class, Map.class);
        method.setAccessible(true);

        AddTradeCommentRequest request = mock(AddTradeCommentRequest.class);
        ActionDocumentId docId = new ActionDocumentId("key1", 1L);
        when(request.getDocumentId()).thenReturn(docId);
        Map<DocumentId, UpdateRequest> map = new HashMap<>();

        method.invoke(collateralLinkActionService, request, map);

        assertEquals(1, map.size());
        assertEquals(request, map.get(DocumentId.from("key1", 1L)));
    }

    @Test
    public void testGetTradePrimaryKey() throws Exception {
        Method method = CollateralLinkActionService.class.getDeclaredMethod("getTradePrimaryKey", DocumentId.class);
        method.setAccessible(true);

        DocumentId docId = DocumentId.from("key1", 1L);
        ActionDocumentId result = (ActionDocumentId) method.invoke(collateralLinkActionService, docId);

        assertEquals("key1", result.getKey());
        assertEquals(1L, (long) result.getVersion());
    }

    @Test
    public void testGetCollateralLinkReport() throws Exception {
        Method method = CollateralLinkActionService.class.getDeclaredMethod("getCollateralLinkReport", CollateralLinkReport.class, ExceptionManagement.class);
        method.setAccessible(true);

        CollateralLinkReport tradeReport = mock(CollateralLinkReport.class);
        ExceptionManagement em = mock(ExceptionManagement.class);
        NonReportableData nrd = mock(NonReportableData.class);
        when(tradeReport.getNonReportableData()).thenReturn(nrd);

        CollateralLinkReport result = (CollateralLinkReport) method.invoke(collateralLinkActionService, tradeReport, em);

        assertNotNull(result);
    }

    @Test
    public void testGetReportsWithExpectedBaseVersion() throws Exception {
        Method method = CollateralLinkActionService.class.getDeclaredMethod("getReportsWithExpectedBaseVersion", CollateralLinkReportDocument.class, CollateralLinkReport.class);
        method.setAccessible(true);

        CollateralLinkReportDocument doc = mock(CollateralLinkReportDocument.class);
        CollateralLinkReport report = mock(CollateralLinkReport.class);
        DocumentId docId = DocumentId.from("key1", 1L);
        when(doc.getDocumentId()).thenReturn(docId);

        Pair<CollateralLinkReport, Long> result = (Pair<CollateralLinkReport, Long>) method.invoke(collateralLinkActionService, doc, report);

        assertEquals(report, result.getLeft());
        assertEquals(1L, (long) result.getRight());
    }

    // --- Helper Methods ---
    private List<AddTradeCommentRequest> setupValidCommentRequests() {
        AddTradeCommentRequest request = mock(AddTradeCommentRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        return Collections.singletonList(request);
    }

    private List<EditRequest> setupValidEditRequests() {
        EditRequest request = mock(EditRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        return Collections.singletonList(request);
    }

    private List<UpdateExceptionStatusRequest> setupValidUpdateExceptionStatusRequests() {
        UpdateExceptionStatusRequest request = mock(UpdateExceptionStatusRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getFlow()).thenReturn("flow");
        return Collections.singletonList(request);
    }

    private List<AssignTradeRequest> setupValidAssignTradeRequests() {
        AssignTradeRequest request = mock(AssignTradeRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        return Collections.singletonList(request);
    }

    private List<AddTradeJiraReferenceRequest> setupValidJiraReferenceRequests() {
        AddTradeJiraReferenceRequest request = mock(AddTradeJiraReferenceRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getJiraReference()).thenReturn(mock(JiraReference.class));
        when(request.getJiraReference().getJiraId()).thenReturn("JIRA-123");
        return Collections.singletonList(request);
    }

    private List<AddTradeJiraTypeRequest> setupValidJiraTypeRequests() {
        AddTradeJiraTypeRequest request = mock(AddTradeJiraTypeRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getJiraType()).thenReturn(mock(JiraType.class));
        when(request.getJiraType().getIssueType()).thenReturn("type");
        return Collections.singletonList(request);
    }

    private List<UpdateUserActionTypeRequest> setupValidUpdateUserActionTypeRequests() {
        UpdateUserActionTypeRequest request = mock(UpdateUserActionTypeRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getComment()).thenReturn(mock(Comment.class));
        when(request.getComment().getComment()).thenReturn("comment");
        when(request.getAction()).thenReturn(mock(com.nwm.tntr.commons.domain.persistence.entity.Action.class));
        when(request.getUserActionType()).thenReturn("type");
        return Collections.singletonList(request);
    }

    private List<AddTradeCommentTypeRequest> setupValidCommentTypeRequests() {
        AddTradeCommentTypeRequest request = mock(AddTradeCommentTypeRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        return Collections.singletonList(request);
    }

    private List<CollateralLinkReportDocument> setupValidCollateralLinkDocuments() {
        CollateralLinkReportDocument document = mock(CollateralLinkReportDocument.class);
        CollateralLinkReport report = mock(CollateralLinkReport.class);
        ExceptionManagement em = mock(ExceptionManagement.class);
        when(document.getCollateralLinkReport()).thenReturn(report);
        when(report.getExceptionManagement()).thenReturn(em);
        when(document.getDocumentId()).thenReturn(DocumentId.from("key1", 1L));
        when(report.getCollateralLinkReportId()).thenReturn(mock(com.nwm.tntr.commons.domain.persistence.entity.collaterallink.CollateralLinkReportId.class));
        when(report.getCollateralLinkReportId().getTradeSourceSystemTransactionId()).thenReturn("txnId");
        when(em.getIssueIds()).thenReturn(Collections.emptyList());
        return Collections.singletonList(document);
    }
}
