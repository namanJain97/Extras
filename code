public  class SampleESMAGDSRatesFlowNewTransaction implements Transaction {

    @Override
    public TransactionId getId() {

        return TestTransactionIDRepository.returnTestGDSGBLOTransactionIDEMIR();
    }

    @Override
    public String getInstance() {
        return null;
    }

    @Override
    public SourceBook getSourceBook() {


        SourceBook mySB = new SourceBook() {
            @Override
            public SourceBookId getId() {
                return null;
            }

            @Override
            public LedgerBook getLedgerBook() {
                return null;
            }

            @Override
            public RiskOrganisationUnit getRiskOrganisationUnit() {
                return null;
            }

            @Override
            public SystemInstance getSystemInstance() {
                return null;
            }

            @Override
            public String getMarketRiskPrimeBrokerageCategory() {
                return null;
            }

            @Override
            public SourceBookClassification getSourceBookClassification() {
                return null;
            }

            @Override
            public StaleReferenceDataState getStaleReferenceDataState() {
                return null;
            }

            @Override
            public boolean isHierarchicallyBad() {
                return false;
            }

            @Override
            public BusinessDate getEffectiveDate() {
                return null;
            }

            @Override
            public String getName() {
                return null;
            }

            @Override
            public String getDescription() {
                return null;
            }

            @Override
            public String getAlternateBookId() {
                return null;
            }

            @Override
            public RiskOrganisationUnitId getRiskOrganisationUnitId() {
                return null;
            }

            @Override
            public boolean getRiskOnlyBook() {
                return false;
            }

            @Override
            public String getRiskBookGroupId() {
                return null;
            }

            @Override
            public LedgerBookId getLedgerBookId() {
                return null;
            }

            @Override
            public SystemInstanceId getSystemInstanceId() {
                return null;
            }

            @Override
            public String getBookClassification() {
                return null;
            }

            @Override
            public String getCadToModelInd() {
                return null;
            }

            @Override
            public String getBackTestType() {
                return null;
            }

            @Override
            public boolean isActive() {
                return false;
            }

            @Override
            public Location getLocation() {
                return null;
            }

            @Override
            public SourceBookClassificationId getSourceBookClassificationId() {
                return null;
            }
        };

        return mySB;
    }

    @Override
    public Product getProduct() {
        return new ProductImpl()
        {


            @Override
            public String getProductName() {
                return "Index Swap";
            }
        };
    }

    @Override
    public BusinessDate getAgreementDate() {
        return null;
    }

    @Override
    public BusinessDate getSettlementDate() {
        return null;
    }

    @Override
    public String getVersion() {
        return "0";
    }

    @Override
    public String getTraderComment() {
        return null;
    }

    @Override
    public ProductClass getUnderlyingProductClass() {
        return null;
    }

    @Override
    public IndependentAmount getIndependentAmount() {
        return null;
    }

    @Override
    public String getProductSubType() {
        return null;
    }

    @Override
    public String getValidatorName() {
        return null;
    }

    @Override
    public String getDesk() {
        return null;
    }

    @Override
    public String getInterCompanyStatusIndicator() {
        return null;
    }

    @Override
    public Location getLocation() {
        return null;
    }

    @Override
    public BusinessDate getCurrentLastEventDate() {
        return null;
    }

    @Override
    public BusinessDate getExposureEndDate() {
        return null;
    }

    @Override
    public BusinessDate getOriginalLegalEndDate() {
        return null;
    }

    @Override
    public BigDecimal getInitialMargin() {
        return null;
    }

    @Override
    public BusinessDate getLegalStartDate() {
        return null;
    }

    @Override
    public BuySellIndicator getBuySellIndicator() {
        return null;
    }

    @Override
    public String getOpsBusinessArea() {
        return null;
    }

    @Override
    public BusinessDate getConfirmationDate() {
        return null;
    }

    @Override
    public Date getConfirmationDateTime() {
        return null;
    }

    @Override
    public String getOriginationMethod() {
        return null;
    }

    @Override
    public ClearingConfirmation getClearingConfirmation() {

        ClearingConfirmation conf = new ClearingConfirmation() {
            @Override
            public boolean isClearingRequired() {
                return false;
            }

            @Override
            public boolean isFoReviewRequired() {
                return true;
            }

            @Override
            public boolean isConfirmationRequired() {
                return true;
            }

            @Override
            public String getClearingMethod() {
                return "Manual";
            }

            @Override
            public String getMatchingConfirmationService() {
                return null;
            }

            @Override
            public String getMatchingServiceType() {
                return null;
            }

            @Override
            public String getDocumentEvent() {
                return "New Trade";
            }

            @Override
            public String getContractualMatrixType() {
                return null;
            }

            @Override
            public String getContractualDefinitions() {
                return null;
            }

            @Override
            public Boolean getHasNonStandardTerms() {
                return null;
            }

            @Override
            public String getMasterConfirmationType() {
                return null;
            }

            @Override
            public String getContractualMatrixTerm() {
                return null;
            }

            @Override
            public BusinessDate getMatrixPublicationDate() {
                return null;
            }

            @Override
            public String getAdditionalComments() {
                return null;
            }

            @Override
            public Boolean isManualConfirmationRequired() {
                return true;
            }

            @Override
            public String getManualConfirmationRequiredComment() {
                return "Manual coupon calculation only. no need to reconfirm. ";
            }
        };

        return conf;
    }

    @Override
    public Boolean isBlockTrade() {
        return null;
    }

    @Override
    public Boolean getBlockTrade() {
        return null;
    }

    @Override
    public TransactionState getTransactionState() {
        return null;
    }

    @Override
    public Collection<TransactionSalesCreditComponent> getSalesCreditComponents() {
        return null;
    }

    @Override
    public Collection<TransactionLink> getLinkedTransactions() {
        return null;
    }

    @Override
    public TransactionState getTransactionValidationState() {

       TransactionState state = TransactionState.New;

        return state;

    }

    @Override
    public TradePositionType getTradePositionType() {
        return null;
    }

    @Override
    public LedgerProductId getLedgerProductId() {
        return null;
    }

    @Override
    public AlternateTransactionId getAlternateTransactionIdentifier(AlternateTransactionClassificationScheme alternateTransactionClassificationScheme) {

        if(alternateTransactionClassificationScheme == AlternateTransactionClassificationScheme.Unique_Swap_Identifier_Prefix)
        {
            return new AlternateTransactionId() {
                @Override
                public String getAlternateTransactionId() {
                    return "1030272448";
                }

                @Override
                public SystemInstanceId getAlternateIdSourceSystemId() {
                    return SystemInstanceId.GDS_GBLO;
                }

                @Override
                public AlternateTransactionClassificationScheme getAlternateIdDescription() {
                    return AlternateTransactionClassificationScheme.Unique_Swap_Identifier_Prefix;
                }

                @Override
                public boolean hasUniqueScheme() {
                    return false;
                }
            };

        }

        if(alternateTransactionClassificationScheme == AlternateTransactionClassificationScheme.Unique_Swap_Identifier)
        {

            return new AlternateTransactionId() {
                @Override
                public String getAlternateTransactionId() {
                    return "IR123122837250";
                }

                @Override
                public SystemInstanceId getAlternateIdSourceSystemId() {
                    return SystemInstanceId.GDS_GBLO;
                }

                @Override
                public AlternateTransactionClassificationScheme getAlternateIdDescription() {
                    return AlternateTransactionClassificationScheme.Unique_Swap_Identifier;
                }

                @Override
                public boolean hasUniqueScheme() {
                    return false;
                }
            };
        }



        else

        {
            return null;
        }
    }

    @Override
    public TradingPartyAlias tradingCounterpartyAliasFor(TransactionRoleScheme transactionRoleScheme) {
        return null;
    }

    @Override
    public TradingPartyAliasId tradingCounterpartyAliasIdFor(TransactionRoleScheme transactionRoleScheme) {
        return null;
    }

    @Override
    public TradingCounterparty tradingCounterpartyFor(TransactionRoleScheme transactionRoleScheme) {
        return null;
    }

    @Override
    public TradingCounterpartyId tradingCounterpartyIdFor(TransactionRoleScheme... transactionRoleSchemes) {
        return null;
    }

    @Override
    public TradingParty theirSideTradingParty() {
        return null;
    }

    @Override
    public TradingParty ourSideTradingParty() {
        return null;
    }

    @Override
    public TradingCounterparty theirSideTradingCounterparty() {
        return null;
    }

    @Override
    public TradingPartyAliasId getTheirSideTradingCounterpartyAliasId() {
        return null;
    }

    @Override
    public TradingCounterpartyId getTheirSideTradingCounterpartyId() {
        return null;
    }

    @Override
    public TradingCounterpartyId getTheirSideTradingCounterpartyId2() {
        return null;
    }

    @Override
    public Set<TradingParty> theirSideTradingCounterparties() {
        return null;
    }

    @Override
    public TradingCounterpartyId getSettlementCounterpartyId() {
        return null;
    }

    @Override
    public TradingCounterparty getSettlementCounterparty() {
        return null;
    }

    @Override
    public Map<TransactionRoleScheme, TradingCounterpartyId> getTradingCounterPartyIdMap() {
        return null;
    }

    @Override
    public Map<TransactionRoleScheme, TradingCounterparty> getTradingCounterpartyMap() {
        return null;
    }

    @Override
    public Map<TransactionRoleScheme, TradingPartyAliasId> getTradingCounterpartyAliasIdMap() {
        return null;
    }

    @Override
    public Map<TransactionRoleScheme, TradingPartyAlias> getTradingCounterpartyAliasMap() {
        return null;
    }

    @Override
    public CounterPartyTypeId getLedgerCounterPartyTypeID() {
        return null;
    }

    @Override
    public CounterPartyTypeId getLedgerCounterPartyTypeID(TransactionLeg transactionLeg) {
        return null;
    }

    @Override
    public CounterPartyTypeId getLedgerCounterPartyTypeID(Cashflow cashflow) {
        return null;
    }

    @Override
    public boolean isNew() {
        return false;
    }

    @Override
    public Party getBookingEntity() {
        return null;
    }

    @Override
    public TransactionLink getLinkedTransaction(LinkageReasonScheme linkageReasonScheme) {
        return null;
    }

    @Override
    public Collection<TransactionLink> getLinkedTransactions(LinkageReasonScheme linkageReasonScheme) {
        return null;
    }

    @Override
    public boolean isInterBookTrade() {
        return false;
    }

    @Override
    public boolean isIntraBookTrade() {
        return false;
    }

    @Override
    public boolean isIncompleteTrade() {
        return false;
    }

    @Override
    public <T> T visitProductSpecificDetails(ProductSpecificTradeDetailVisitor<T> productSpecificTradeDetailVisitor) {
        return null;
    }

    @Override
    public IntraGroupClassificationMapId getIntraGroupClassificationMapId() {
        return null;
    }

    @Override
    public IntraGroupClassificationMap getIntraGroupClassificationMap() {
        return null;
    }

    @Override
    public boolean hasLegs() {
        return false;
    }

    @Override
    public Collection<TransactionLeg> legsMatching(Matcher<TransactionLeg> matcher) {
        return null;
    }

    @Override
    public void eachLeg(Function<TransactionLeg> function) {

    }

    @Override
    public Collection<TransactionLeg> transactionLegs() {
        return null;
    }

    @Override
    public TransactionLeg findLeg(String s) {
        return null;
    }

    @Override
    public BookCounterparty getBookCounterparty(TransactionRoleScheme... transactionRoleSchemes) {
        return null;
    }

    @Override
    public Employee getEmployee(EmployeeRoleScheme employeeRoleScheme) {
        return null;
    }

    @Override
    public Employee getTradingPerson() {
        return null;
    }

    @Override
    public String getUnderlying() {
        return null;
    }

    @Override
    public Amount getIndicativeInitialNotional() {
        return null;
    }

    @Override
    public TradingPartyAlias getTheirSideTradingCounterpartyAlias() {
        return null;
    }

    @Override
    public TradingParty getBookingEntityTradingParty() {
        return null;
    }

    @Override
    public TradingPartyId buyer() {
        return null;
    }

    @Override
    public TradingParty seller() {
        return null;
    }

    @Override
    public SystemInstance getSystemInstance() {
        return null;
    }

    @Override
    public SystemInstanceId getSystemInstanceId() {
        return null;
    }

    @Override
    public SourceVersion getSourceVersion() {
        return null;
    }

    @Override
    public boolean isVerified() {
        return false;
    }

    @Override
    public TransactionStatus getTransactionStatus(TransactionStateScheme transactionStateScheme) {
        return null;
    }

    @Override
    public Map<TransactionRoleScheme, BookCounterparty> getBookCounterparties() {
        return null;
    }

    @Override
    public Collection<TransactionLifecycleEvent> getTransactionLifecycleEvents() {
        return null;
    }

    @Override
    public Swaption getSwaption() {
        return null;
    }

    @Override
    public String getTransactionType() {
        return null;
    }

    @Override
    public SourceBookId getInterBookTradingPartyId() {
        return null;
    }

    @Override
    public Map<String, Amount> getCurrentNotionalFromNotionalSchedule(BusinessDate businessDate) {
        return null;
    }


    @Override
    public Collection<TransactionLifecycleEvent> getTransactionLifecycleEvents(TransactionLifecycleEventType... transactionLifecycleEventTypes) {
        return null;
    }

    @Override
    public TransactionProcessDirective getTransactionProcessDirective(String s) {
        return null;
    }

    @Override
    public Collection<TransactionLeg> getTransactionLegs() {
        return null;
    }

    @Override
    public DoddFrankReporting getDoddFrankReporting() {

        DoddFrankReporting reporting = new DoddFrankReportingImpl() {

            @Override
            public String getFoUniqueProductId() {
                return "Index";
            }
        };

        return reporting;


    }

    @Override
    public LendingTrade getRepurchaseAgreement() {
        return null;
    }

    @Override
    public Map<TransactionRoleScheme, TransactionPartyAliasRole> getTradingParties() {

        Map<TransactionRoleScheme, TransactionPartyAliasRole> myRoles = new HashMap();;



        myRoles.put(TransactionRoleScheme.Trading, this.sampleRole());

        return myRoles;
    }

    @Override
    public Collection<TransactionPartyAliasRole> getTransactionPartyAliasRoles() {
        return null;
    }

    @Override
    public Collection<TransactionPartyAliasRole> getTransactionPartyAliasRolesForTradingParties() {
        return null;
    }

    @Override
    public Collection<TransactionPartyAliasRole> getTransactionPartyAliasRolesForSettlementParties() {
        return null;
    }

    @Override
    public BusinessDate getLastEventDate() {
        return null;
    }

    @Override
    public Collection<TransactionStatus> getTransactionStatus() {
        return null;
    }

    @Override
    public Date getExecutionDateTime() {
        return null;
    }

    @Override
    public Date getAgreementDateTime() {

        String dt = "2019-02-11T16:39:21.645Z";
        DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        sdf.setTimeZone(TimeZone.getTimeZone("UTC"));


        try {
            return  sdf.parse(dt.trim());

        } catch (ParseException e) {
            e.printStackTrace();
        }


        //2012-07-31T13:36:12.836
        return null;

    }

    @Override
    public String getPlaceOfTrade() {
        return "Off_Facility";
    }

    @Override
    public CollateralizationType getCollateralizationType() {
        return null;
    }

    @Override
    public Date getVersionEffectiveDateTime() {
        return null;
    }

    @Override
    public Boolean isSystemGenerated() {
        return null;
    }

    @Override
    public Boolean getIsSystemGenerated() {
        return null;
    }

    @Override
    public Collection<TransactionSourceSystem> getTransactionSourceSystems() {
        return null;
    }

    @Override
    public String getPricingModel() {
        return null;
    }

    @Override
    public BusinessDate getExecutionDate() {
        return null;
    }

    @Override
    public AccountingStatus getAccountingStatus() {
        return null;
    }

    @Override
    public TransactionLegalAgreement getTransactionLegalAgreement() {
        return null;
    }

    @Override
    public MasterAgreementType getMasterAgreementType() {
        return null;
    }

    @Override
    public Collection<TransactionProcessDirective> getTransactionProcessDirectives() {
        return null;
    }

    @Override
    public Collection<RegulatoryRegimeImpact> getRegulatoryRegimeImpact() {

         ArrayList<RegulatoryRegimeImpact> list = new ArrayList<>();

        RegulatoryRegimeImpact imp = new RegulatoryRegimeImpactImpl()
        {
            @Override
            public String getRegimeImpactId() {
                return "Dodd-Frank Act (US)";
            }
        };


        RegulatoryRegimeImpact imp2 = new RegulatoryRegimeImpactImpl()
        {
            @Override
            public String getRegimeImpactId() {
                return "European Markets Infrastructure Regulation";
            }
        };

        list.add(imp);
        list.add(imp2);

        return list;


        }



    @Override
    public ODCId<TransactionId> getODCId() {
        return null;
    }

    @Override
    public Collection<SettlementSystemMigrationData> getSettlementSystemMigrationData() {
        return null;
    }

    @Override
    public String getTheirSideTradingCounterpartyNucleusId1() {
        return null;
    }

    @Override
    public String getTheirSideTradingCounterpartyNucleusId2() {
        return null;
    }

    @Override
    public Collection<TradingParty> getAllTradingParties() {
        return null;
    }

    @Override
    public BusinessDate getLastExpectedValuationDateConsideringInstrumentEndDate() {
        return null;
    }

    @Override
    public BusinessDate getLegalEndDateConsideringInstrumentEndDate() {
        return null;
    }

    @Override
    public Party getBookParty() {
        return null;
    }

    @Override
    public PartyId getBookPartyId() {
        return null;
    }

    @Override
    public AffirmationInformation getAffirmationInformation() {
        return null;
    }

    @Override
    public BookTradingPartyId getBookTrading() {
        return null;
    }

    @Override
    public String getNettingGroupId() {
        return null;
    }

    @Override
    public Date getClearingDateTime() {
        return null;
    }

    @Override
    public Date getOriginalExecutionDateTime() {
        return null;
    }

    @Override
    public StandardProduct getStandardProduct() {
        return null;
    }

    @Override
    public Boolean isBaselImmEligible() {
        return null;
    }

    @Override
    public Boolean isCloseoutNettingEnforceable() {
        return null;
    }

    @Override
    public Boolean isCloseoutNettingProductCovered() {
        return null;
    }

    @Override
    public String getXvaBook() {
        return null;
    }

    @Override
    public BusinessDate getOriginalLegalEndDateConsideringInstrumentEndDate() {
        return null;
    }

    @Override
    public BusinessDate getCurrentLastEventDateConsideringInstrumentEndDate() {
        return null;
    }

    @Override
    public BusinessDate getExposureEndDateConsideringInstrumentEndDate() {
        return null;
    }

    @Override
    public Collection<RoutingAttribute> getRoutingAttributes() {
        return null;
    }

    @Override
    public String getPartyAccountId() {
        return null;
    }

    @Override
    public Collection<AgreementTransactionContext> getAgreementTransactionContext() {
        return null;
    }

    @Override
    public String getCounterpartyLEI() {

        return "ZGEN8HJFCYNRVN1XCJ08";
    }

    @Override
    public String getCounterpartyLECIS() {
        return null;
    }

    @Override
    public String getCounterpartyBranchCIS() {
        return null;
    }

    @Override
    public String getPrincipalLEI() {

        return "RR3QWICWWIPCS8A4S074";
    }

    @Override
    public String getPrincipalLECIS() {
        return null;
    }

    @Override
    public CreditSupportId getCreditSupportId() {
        return null;
    }

    @Override
    public SourceMessageType getSourceMessageType() {
        return null;
    }

    @Override
    public MasterConfirmationType getMasterConfirmationType() {
        return null;
    }

    @Override
    public Collection<TransactionLegalEntity> getTransactionLegalEntities() {
        return null;
    }

    @Override
    public BusinessCategory getBusinessCategory() {
        return null;
    }

    @Override
    public BusinessDate getLastExpectedValuationDate() {
        return null;
    }

    @Override
    public LastExpectedValuationMode getLastExpectedValuationMode() {
        return null;
    }

    @Override
    public Collection<ExternalAlternateTransactionId> getExternalTransactionIdentifiers() {

        return null;
    }

    @Override
    public LegalEndDateMode getLegalEndDateMode() {
        return null;
    }

    @Override
    public Boolean isCvaExemption() {
        return null;
    }

    @Override
    public CreditSupport getCreditSupport() {
        return null;
    }

    @Override
    public Collection<TransactionInstanceLink> getTransactionInstanceLink() {
        return null;
    }

    @Override
    public String getNearLegCounterpartyCIS() {
        return null;
    }

    @Override
    public String getFarLegCounterpartyCIS() {
        return null;
    }

    @Override
    public Collection<TransactionRegulatoryMarginImpact> getTransactionRegulatoryMarginImpact() {
        return null;
    }

    @Override
    public Boolean isSecuritiesFinancingTransactionInd() {
        return null;
    }

    @Override
    public String getExecutionAlgorithmId() {
        return null;
    }

    @Override
    public SystemId getExecutionAlgorithmSystemId() {
        return null;
    }

    @Override
    public Boolean isMiFIRReportingExemption() {
        return null;
    }

    @Override
    public Boolean isPositionWinddownIndicator() {
        return null;
    }

    @Override
    public String getTransactionExecutionStyle() {
        return null;
    }

    @Override
    public Boolean isIsGoodsAndServicesTransaction() {
        return null;
    }

    @Override
    public String getInvestmentDecisionAlgorithmId() {
        return null;
    }

    @Override
    public SystemId getInvestmentDecisionAlgorithmSystemId() {
        return null;
    }

    @Override
    public String getRiskClassification() {
        return null;
    }

    @Override
    public BigDecimal getPriceMultiplier() {
        return null;
    }

    @Override
    public Boolean isHouseTradeIndicator() {
        return null;
    }

    @Override
    public Boolean isDirectExchangeAccessIndicator() {
        return null;
    }

    @Override
    public CountryId getPrincipalResidenceCountry() {
        return null;
    }

    @Override
    public CountryId getCounterpartyResidenceCountry() {
        return null;
    }

    @Override
    public CompressionTypeScheme getCompressionType() {
        return null;
    }

    @Override
    public Collection<ReportableTransactionState> getReportableTransactionStates() {
        return null;
    }

    @Override
    public String getReserve() {
        return null;
    }

    @Override
    public String getBookLocation() {
        return null;
    }

    @Override
    public String getTradeOriginationLocation() {
        return null;
    }

    @Override
    public Attestation getAttestation() {
        return null;
    }

    @Override
    public String getSdmSourceSystemIdentifier() {
        return null;
    }

    @Override
    public Collection<AlternativeProductClassification> getAlternativeProductClassification() {
        return null;
    }

    @Override
    public InterestRateDerivative getInterestRateDerivative() {
        return null;
    }

    @Override
    public Boolean isNonRegularWayTrade() {
        return null;
    }

    @Override
    public Boolean isRfrFallbackRequired() {
        return null;
    }

    @Override
    public String getSalesStrategy() {
        return null;
    }


    @Override
    public Boolean isTDXOrigin() {
        return null;
    }

    @Override
    public AccountingProductClassification getAccountingProductClassification() {
        return null;
    }

    @Override
    public TransactionBusinessAreaPortfolio getBusinessAreaPortfolio() {
        return null;
    }

    // @Override
   // public AccountingProductClassification getAccountingProductClassification() {
   //     return null;
   // }

    //  @Override
  //  public AccountingProductClassification getAccountingProductClassification() {
    //    return null;
   // }


    @Override
    public BusinessDate getLegalEndDate() {
        return null;
    }

    @Override
    public ProductId getProductId() {
        return null;
    }

    @Override
    public SourceBookId getSourceBookId() {
        return null;
    }

    @Override
    public String getStrategyName() {
        return null;
    }

    @Override
    public BusinessDate getSourceVersionEffectiveDate() {
        return null;
    }

    @Override
    public TransactionSourceVersion getTransactionSourceVersion() {
        return null;
    }

    @Override
    public Date getBookingDateTime() {

        String bookingDT = "2012-07-31T13:36:12.836Z";
        DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        sdf.setTimeZone(TimeZone.getTimeZone("UTC"));

        try {
            return  sdf.parse(bookingDT.trim());

        } catch (ParseException e) {
            e.printStackTrace();
            return null;
        }


        //2012-07-31T13:36:12.836

    }

    @Override
    public BusinessDate getBookingDate() {
        return null;
    }

    @Override
    public String getBackOfficeType() {
        return null;
    }

    @Override
    public Collection<AlternateTransactionId> getAlternateTransactionIdentifiers() {

      return null;
    }

    @Override
    public Map<EmployeeRoleScheme, Employee> getEmployees() {
        return null;
    }

    public SampleESMAGDSRatesFlowNewTransaction()
    {

    }

    public TransactionPartyAliasRole sampleRole() {

        TransactionPartyAliasRole alias = new TransactionPartyAliasRole() {
            @Override
            public TradingPartyAliasId getTradingCounterpartyAliasId() {
                return new TradingPartyAliasId() {
                    @Override
                    public SystemInstanceId getTradingPartySystemId() {
                        return SystemInstanceId.Nucleus;
                    }

                    @Override
                    public String getTradingPartyId() {
                        return "6179033";
                    }

                    @Override
                    public boolean isNucleusId() {
                        return true;
                    }

                    @Override
                    public String getNucleusId() {
                        return "6179033";
                    }
                };


            }

            @Override
            public TradingPartyAlias getTradingCounterpartyAlias() {
                return new TradingPartyAlias() {
                    @Override
                    public SystemInstance getSystemInstance() {
                        return null;
                    }

                    @Override
                    public TradingCounterparty getTradingCounterparty() {
                        return null;
                    }

                    @Override
                    public String getNucleusId() {
                        return "6179033";
                    }

                    @Override
                    public StaleReferenceDataState getStaleReferenceDataState() {
                        return null;
                    }

                    @Override
                    public boolean isActive() {
                        return true;
                    }

                    @Override
                    public boolean isHierarchicallyBad() {
                        return false;
                    }

                    @Override
                    public BusinessDate getEffectiveDate() {
                        return null;
                    }

                    @Override
                    public String getOrganisationName() {
                        return null;
                    }

                    @Override
                    public String getOrganisationStatus() {
                        return null;
                    }

                    @Override
                    public boolean isOrganisationInternal() {
                        return false;
                    }

                    @Override
                    public TradingCounterpartyId getTradingCounterpartyId() {
                        return new TradingCounterpartyId() {
                            @Override
                            public String getPartyReference() {
                               return "6179033";
                            }

                            @Override
                            public PartyClassification getPartyClassification() {
                                return PartyClassification.Nucleus;
                            }

                            @Override
                            public String getNucleusId() {
                                return "6179033";
                            }

                            @Override
                            public int compareTo(TradingCounterpartyId o) {
                                return 0;
                            }
                        };
                    }

                    @Override
                    public SystemInstanceId getSystemInstanceId() {
                        return SystemInstanceId.Nucleus;
                    }

                    @Override
                    public Boolean isConfirmation() {
                        return null;
                    }

                    @Override
                    public Boolean isInternalRec() {
                        return null;
                    }

                    @Override
                    public Boolean isDummyOrganisation() {
                        return null;
                    }

                    @Override
                    public String isDummyOrganisationCategory() {
                        return null;
                    }

                    @Override
                    public TradingPartyAliasId getId() {
                        return new TradingPartyAliasId() {
                            @Override
                            public SystemInstanceId getTradingPartySystemId() {
                                return SystemInstanceId.Nucleus;
                            }

                            @Override
                            public String getTradingPartyId() {
                                return "6179033";
                            }

                            @Override
                            public boolean isNucleusId() {
                                return true;
                            }

                            @Override
                            public String getNucleusId() {
                                return "6179033";
                            }
                        };
                    }
                };
            }


        };

        return alias;
    }
    }
