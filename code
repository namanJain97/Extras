Could you write all the additional test cases for below java class to cover all the remaining scenarios or methods and make the test coverage or code coverage as 100% using junit 4 and old mockito version and java 8. Also don't use power mockito as i m using older mockito version and for private methods try to use reflection. Plus we can't change any file other than the above test class. 

/**
 * 
 */
package com.rbs.tntr.business.blotter.utility;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.rbs.tntr.domain.blotter.exceptions.BlotterRunTimeException;

/**
 * Description : Class to export data into Excel File
 *
 * @author agrakit
 * 
 * Created By: Niket Agrawal
 * 
 * Created On 25-10-2021
 * 
 */
@Component
public class ExcelWriterImpl {
	private SXSSFWorkbook workBook;
	private Sheet excelSheet;
	private final Logger LOGGER = LoggerFactory.getLogger(ExcelWriterImpl.class);

	/**
	 * Description : Method to get styling for cells
	 * @author agrakit
	 * Created By: Niket Agrawal
	 * Created On 25-10-2021
	 * @return
	 */
	private CellStyle getCellStyle() {
		CellStyle style = workBook.createCellStyle();
		style.setAlignment(HorizontalAlignment.CENTER);
		return style;
	}

	/**
	 * Description : set headers into excel file
	 * @author agrakit
	 * Created By: Niket Agrawal
	 * Created On 25-10-2021
	 * @param columns
	 * @param sheetName
	 */
	private void fillHeader(String[] columns, String sheetName) {
		// keep 100 rows in memory, exceeding rows will be flushed to disk
		workBook = new SXSSFWorkbook(100);
		excelSheet = workBook.createSheet(sheetName);
		CellStyle headerStle = getCellStyle();

		Row row = excelSheet.createRow(0);

		for (int cellnum = 0; cellnum < columns.length; cellnum++) {
			Cell cell = row.createCell(cellnum);
			cell.setCellValue(columns[cellnum]);
			cell.setCellStyle(headerStle);
		}
	}

	/**
	 * Description : Method to export data into excel file
	 * @author agrakit
	 * Created By: Niket Agrawal
	 * Created On 25-10-2021
	 * @param rows
	 * @param fileName
	 * @param sheetName
	 * @return
	 */
	public boolean exportExcel(List<String[]> rows, String fileName, String sheetName) {
		try {
			fillHeader(rows.get(0), sheetName);
			fillData(rows);
			writeExcelFile(fileName);
			LOGGER.info("Data exported in excel successful at {}", fileName);
		} catch (Exception e) {
			LOGGER.error("Exception while writing excel file {}", e);
			throw new BlotterRunTimeException("Exception while writing excel file", e);
		}
		return true;
	}

	/**
	 * Description : Populate records into Excel
	 * @author agrakit
	 * Created By: Niket Agrawal
	 * Created On 25-10-2021
	 * @param rows
	 */
	private void fillData(List<String[]> rows) {
		CellStyle normalStyle = getCellStyle();

		for (int rowNum = 1; rowNum < rows.size(); rowNum++) {
			Row row = excelSheet.createRow(rowNum);
			String[] data = rows.get(rowNum);
			for (int colNum = 0; colNum < data.length; colNum++) {
				Cell cell = row.createCell(colNum, CellType.STRING);
				cell.setCellStyle(normalStyle);
				cell.setCellValue(data[colNum]);
			}

		}
	}

	/**
	 * Description : Exporting file on shared location
	 * @author agrakit
	 * Created By: Niket Agrawal
	 * Created On 25-10-2021
	 * @param fileName
	 */
	private void writeExcelFile(String fileName) {
		try {
			File myFile = new File(fileName);
			FileOutputStream fileOut = new FileOutputStream(myFile);
			workBook.write(fileOut);
			fileOut.close();
			workBook.dispose();
			workBook.close();
		} catch (IOException e) {
			LOGGER.error("Exception while writing excel file");
			throw new BlotterRunTimeException("Exception while writing excel file", e);
		}
	}
}

Existing test class:

package com.rbs.tntr.business.blotter.utility;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;

@RunWith(MockitoJUnitRunner.class)
public class ExcelWriterImplTest {

    @InjectMocks
    private ExcelWriterImpl excelWriter;

    @Mock
    private SXSSFWorkbook workBook;

    @Mock
    private Sheet excelSheet;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetCellStyle() throws Exception {
        Method method = ExcelWriterImpl.class.getDeclaredMethod("getCellStyle");
        method.setAccessible(true);

        CellStyle style = mock(CellStyle.class);
        when(workBook.createCellStyle()).thenReturn(style);

        CellStyle result = (CellStyle) method.invoke(excelWriter);

        assertNotNull(result);
        verify(style).setAlignment(HorizontalAlignment.CENTER);
    }

    @Test
    public void testFillData() throws Exception {
        Method method = ExcelWriterImpl.class.getDeclaredMethod("fillData", List.class);
        method.setAccessible(true);

        String[] header = {"Column1", "Column2"};
        String[] row1 = {"Data1", "Data2"};
        List<String[]> rows = Arrays.asList(header, row1);

        CellStyle normalStyle = mock(CellStyle.class);
        when(workBook.createCellStyle()).thenReturn(normalStyle);

        Row row = mock(Row.class);
        when(excelSheet.createRow(1)).thenReturn(row);

        Cell cell1 = mock(Cell.class);
        Cell cell2 = mock(Cell.class);
        when(row.createCell(0, CellType.STRING)).thenReturn(cell1);
        when(row.createCell(1, CellType.STRING)).thenReturn(cell2);

        method.invoke(excelWriter, rows);

        verify(cell1).setCellValue("Data1");
        verify(cell1).setCellStyle(normalStyle);
        verify(cell2).setCellValue("Data2");
        verify(cell2).setCellStyle(normalStyle);
    }

}
