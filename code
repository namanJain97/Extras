package com.rbs.tntr.business.taggingService.jobs;

import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import com.rbs.tntr.api.taggingService.service.jiraAssignement.JiraAssignmentService;
import com.rbs.tntr.business.taggingService.configuration.TaggingServiceConfiguration;
import com.rbs.tntr.business.taggingService.service.common.DateTimeService;
import com.rbs.tntr.domain.taggingService.jiraTaggingDomain.common.AutoAssignResult;
import com.rbs.tntr.domain.taggingService.jiraTaggingDomain.common.TaggingServiceResult;
import com.rbs.tntr.domain.taggingService.jiraTaggingDomain.exceptions.MultipleFilesFoundException;

/**
 * Created by matbina on 20/05/2020.
 */
@Component
public class TaggingServiceJob {
    private static final Logger logger= LoggerFactory.getLogger(TaggingServiceJob.class);
    final TaggingServiceConfiguration taggingServiceConfiguration;
    final JiraAssignmentService jiraAssignmentService;

    @Autowired
	public TaggingServiceJob(TaggingServiceConfiguration taggingServiceConfiguration,
                             JiraAssignmentService jiraAssignmentService){
        this.taggingServiceConfiguration = taggingServiceConfiguration;
        this.jiraAssignmentService = jiraAssignmentService;
    }

    @Scheduled(cron = "${sftr.transaction.state.taggingService.schedule.cron}")
    public void triggerCronJob() {
        processTaggingService();
    }

    @Scheduled(cron = "${sftr.transaction.state.taggingService.schedule.13hrs.cron}")
    public void triggerCronJobAt1pm() {
        processTaggingService();
    }

    private void processTaggingService() {
        logger.info("Triggered processing of Jira Assignment Service");
        try {
			Date businessDate = DateTimeService.getCurrentUTCDate().toDate();
            int sleepDuration=taggingServiceConfiguration.getJiraAssignStateReadRetryDelaySeconds() *100;
            int maxRetry= taggingServiceConfiguration.getJiraAssignStateReadRetryMax();
            for (int i = maxRetry; i >0 ; i--) {
                if(tryPersistingJiraRules(businessDate)){
                    logger.info("Completed processing of Jira Assignment Service");
                    break;
                }
                logger.info("Jira Assignment Service : sleeping before retrying");
                Thread.sleep(sleepDuration);
            }
            assignJiraToTrade();
        }catch (Exception ex){
            logger.error(ex.getMessage(),ex);
        }
    }

    private boolean tryPersistingJiraRules(Date businessDate) throws MultipleFilesFoundException {
        logger.info("Read and Save Jira to df for business date {}", businessDate);
        boolean filePresent = jiraAssignmentService.isJiraFilterFileAvailable(businessDate);
        if(!filePresent) {
            return false;
        }
        ResponseEntity<List<TaggingServiceResult>> response =  jiraAssignmentService.readSaveJiraExpressions(businessDate);
        logger.info("Read and Save Jira to df response : ", response.getBody());

        return true;
    }

    private boolean assignJiraToTrade() {
        logger.info("Assign Jira to trades");
        ResponseEntity<List<AutoAssignResult>> response = jiraAssignmentService.readAndAssignJiraToTrades();
        logger.info("Assign Jira to trades {}", response.getBody());

        return response.getStatusCode().equals(HttpStatus.OK);
    }
}
