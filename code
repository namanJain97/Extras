import com.natwest.markets.micore.domain.model.reporting.ReportingTemplate;
import com.natwest.markets.micore.domain.model.tagging.TaggingSchema;
import com.natwest.markets.micore.domain.model.tagging.TaggingValue;
import com.natwest.markets.micore.persistence.repository.impl.BlotterExportMappingsRepositoryImpl;
import com.natwest.markets.micore.persistence.repository.utils.BsonMapper;
import com.natwest.markets.micore.tagging.context.TntrRepositoryReadCommandContext;
import com.natwest.markets.micore.tagging.model.jira.JiraReference;
import datafabric.DataFabricException;
import datafabric.client.ItrClient;
import datafabric.model.query.dql.SelectQuery;
import datafabric.model.schema.TableRow;
import datafabric.operations.DfConnectionManager;
import datafabric.operations.ScanOperation;
import org.bson.Document;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;
import java.util.*;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

@RunWith(org.mockito.junit.MockitoJUnitRunner.class)
public class BlotterExportMappingsRepositoryImplTest {

    @InjectMocks
    private BlotterExportMappingsRepositoryImpl repository;

    @Mock
    private DfConnectionManager dfConnectionManager;

    @Mock
    private ItrClient itrClient;

    @Mock
    private ScanOperation scanOperation;

    @Mock
    private TntrRepositoryReadCommandContext context;

    @Mock
    private BsonMapper bsonMapper;

    private final String DATA_FABRIC_ID = "testDfId";
    private final String TABLE_NAME = "blotter_export_mappings";

    @Before
    public void setUp() {
        repository = new BlotterExportMappingsRepositoryImpl(dfConnectionManager, itrClient);
        when(dfConnectionManager.getDataFabricId()).thenReturn(DATA_FABRIC_ID);
        when(dfConnectionManager.getScanOperation()).thenReturn(scanOperation);
        when(context.getQueryParameter(anyString())).thenReturn(Optional.empty());
    }

    @Test
    public void testGetBlotterExportMappings() throws DataFabricException {
        // Setup
        Document document = new Document("reportingTemplateId", "templateId1")
                .append("taggingValueId", "tagValue1")
                .append("jiraReference", new Document("ticketId", "JIRA-123"));

        TableRow row = TableRow.of(document);
        when(scanOperation.scan(anyString(), any(SelectQuery.class))).thenReturn(Collections.singletonList(row));

        // Execute
        Map<String, List<TaggingValue>> result = repository.getBlotterExportMappings(context);

        // Verify
        assertEquals(1, result.size());
        assertEquals("tagValue1", result.get("templateId1").get(0).getId());
        assertEquals("JIRA-123", result.get("templateId1").get(0).getJiraReference().getTicketId());
    }

    @Test
    public void testGetBlotterExportMappingsForActiveReportingTemplates() throws DataFabricException {
        // Setup
        Document document = new Document("reportingTemplateId", "templateId2")
                .append("taggingValueId", "tagValue2")
                .append("jiraReference", new Document("ticketId", "JIRA-456"));

        TableRow row = TableRow.of(document);
        when(scanOperation.scan(anyString(), any(SelectQuery.class))).thenReturn(Collections.singletonList(row));

        ReportingTemplate template = new ReportingTemplate("templateId2", "Name", "Desc", true, new ArrayList<>());
        List<ReportingTemplate> templates = Collections.singletonList(template);

        // Execute
        Map<String, List<TaggingValue>> result = repository.getBlotterExportMappingsForActiveReportingTemplates(context, templates);

        // Verify
        assertEquals(1, result.size());
        assertEquals("tagValue2", result.get("templateId2").get(0).getId());
        assertEquals("JIRA-456", result.get("templateId2").get(0).getJiraReference().getTicketId());
    }
}
