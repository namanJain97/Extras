package com.rbs.tntr.business.taggingService.transformer;

import com.nwm.tntr.commons.domain.JiraReference;
import com.nwm.tntr.commons.enums.TntrFieldsReadUpdateEnum;
import com.nwm.tntr.commons.repository.domain.*;
import com.nwm.tntr.commons.repository.service.RepositoryCommandFactory;
import com.nwm.tntr.commons.repository.util.TntrTdxNodeBuilderUtil;
import com.rbs.tntr.business.taggingService.service.common.DateTimeService;
import com.rbs.tntr.domain.taggingService.jiraTaggingDomain.common.JiraTaggingDetail;
import com.rbs.tntr.domain.taggingService.jiraTaggingDomain.enums.FlowType;
import org.junit.Before;
import org.junit.Test;

import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class TntrTradeTransformerImplTest {

    private TntrTradeTransformerImpl transformer;

    @Before
    public void setUp() {
        transformer = new TntrTradeTransformerImpl();
    }

    @Test
    public void testGetRecords_WithNewRecords() {
        String whereExpression = "status = 'active'";
        FlowType workflowType = FlowType.TRADE;
        String indexHint = "idx_test";
        JiraReference jiraReference = new JiraReference();

        TntrRepositoryReadCommandContext mockContext = mock(TntrRepositoryReadCommandContext.class);
        RepositoryCommand mockCommand = mock(RepositoryCommand.class);
        RepositoryCommandFactory mockFactory = mock(RepositoryCommandFactory.class);
        TntrRepositoryReadCommandResult mockResult = mock(TntrRepositoryReadCommandResult.class);
        Map<TntrFieldsReadUpdateEnum, Object> tradeMap = new HashMap<>();
        tradeMap.put(TntrFieldsReadUpdateEnum.SUPPLEMENTARY_INFORMATION, new HashMap<String, Object>());
        List<Map<TntrFieldsReadUpdateEnum, Object>> tradeList = Collections.singletonList(tradeMap);

        when(mockResult.getTradeList()).thenReturn(tradeList);
        when(mockCommand.execute(any())).thenReturn(mockResult);
        when(mockFactory.getCommand(RepositoryAction.READ_ALL)).thenReturn(mockCommand);

        try (MockedStatic<ReportingTemplate> mockedTemplate = mockStatic(ReportingTemplate.class);
             MockedStatic<TntrTdxNodeBuilderUtil> mockedUtil = mockStatic(TntrTdxNodeBuilderUtil.class)) {

            mockedTemplate.when(() -> ReportingTemplate.TRADE.getRepositoryCommandFactory()).thenReturn(mockFactory);
            mockedUtil.when(() -> TntrTdxNodeBuilderUtil.isJiraIdPresentInUserWorkflow(any(), any(), any()))
                    .thenReturn(false);

            int result = transformer.getRecords(whereExpression, workflowType, indexHint, jiraReference);
            assertEquals(1, result);
        }
    }

    @Test
    public void testGetRecords_NoNewRecords() {
        String whereExpression = "status = 'inactive'";
        FlowType workflowType = FlowType.TRADE;
        String indexHint = "idx_test";
        JiraReference jiraReference = new JiraReference();

        RepositoryCommand mockCommand = mock(RepositoryCommand.class);
        RepositoryCommandFactory mockFactory = mock(RepositoryCommandFactory.class);
        TntrRepositoryReadCommandResult mockResult = mock(TntrRepositoryReadCommandResult.class);

        when(mockResult.getTradeList()).thenReturn(Collections.emptyList());
        when(mockCommand.execute(any())).thenReturn(mockResult);
        when(mockFactory.getCommand(RepositoryAction.READ_ALL)).thenReturn(mockCommand);

        try (MockedStatic<ReportingTemplate> mockedTemplate = mockStatic(ReportingTemplate.class)) {
            mockedTemplate.when(() -> ReportingTemplate.TRADE.getRepositoryCommandFactory()).thenReturn(mockFactory);

            int result = transformer.getRecords(whereExpression, workflowType, indexHint, jiraReference);
            assertEquals(0, result);
        }
    }

    @Test
    public void testExecuteUpdateTrades_TradeFlow() {
        String where = "trade_id = 'T123'";
        JiraReference jiraReference = new JiraReference();
        JiraTaggingDetail taggingDetail = new JiraTaggingDetail();
        FlowType workflowType = FlowType.TRADE;

        TntrRepositoryUpdateCommandResult mockResult = mock(TntrRepositoryUpdateCommandResult.class);
        RepositoryCommand mockCommand = mock(RepositoryCommand.class);
        RepositoryCommandFactory mockFactory = mock(RepositoryCommandFactory.class);

        when(mockCommand.execute(any())).thenReturn(mockResult);
        when(mockFactory.getCommand(RepositoryAction.UPDATE)).thenReturn(mockCommand);

        try (MockedStatic<ReportingTemplate> mockedTemplate = mockStatic(ReportingTemplate.class);
             MockedStatic<DateTimeService> mockedDateTime = mockStatic(DateTimeService.class)) {

            mockedTemplate.when(() -> ReportingTemplate.TRADE.getRepositoryCommandFactory()).thenReturn(mockFactory);
            mockedDateTime.when(DateTimeService::getCurrentDateTime).thenReturn(new Date());

            TntrRepositoryUpdateCommandResult result = transformer.executeUpdateTrades(where, jiraReference, taggingDetail, workflowType);
            assertEquals(mockResult, result);
        }
    }

    @Test
    public void testExecuteUpdateTrades_CollateralFlow() {
        String where = "collateral_id = 'C456'";
        JiraReference jiraReference = new JiraReference();
        JiraTaggingDetail taggingDetail = new JiraTaggingDetail();
        FlowType workflowType = FlowType.AGGREGATED_COLLATERAL;

        TntrRepositoryUpdateCommandResult mockResult = mock(TntrRepositoryUpdateCommandResult.class);
        RepositoryCommand mockCommand = mock(RepositoryCommand.class);
        RepositoryCommandFactory mockFactory = mock(RepositoryCommandFactory.class);

        when(mockCommand.execute(any())).thenReturn(mockResult);
        when(mockFactory.getCommand(RepositoryAction.UPDATE)).thenReturn(mockCommand);

        try (MockedStatic<ReportingTemplate> mockedTemplate = mockStatic(ReportingTemplate.class);
             MockedStatic<DateTimeService> mockedDateTime = mockStatic(DateTimeService.class)) {

            mockedTemplate.when(() -> ReportingTemplate.COLLATERAL.getRepositoryCommandFactory()).thenReturn(mockFactory);
            mockedDateTime.when(DateTimeService::getCurrentDateTime).thenReturn(new Date());

            TntrRepositoryUpdateCommandResult result = transformer.executeUpdateTrades(where, jiraReference, taggingDetail, workflowType);
            assertEquals(mockResult, result);
        }
    }
}
