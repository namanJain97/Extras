package com.rbs.tntr.business.taggingService.jobs;

import com.rbs.tntr.api.taggingService.service.jiraAssignement.JiraAssignmentService;
import com.rbs.tntr.business.taggingService.configuration.TaggingServiceConfiguration;
import com.rbs.tntr.domain.taggingService.jiraTaggingDomain.common.AutoAssignResult;
import com.rbs.tntr.domain.taggingService.jiraTaggingDomain.common.TaggingServiceResult;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.*;

import static org.mockito.Mockito.*;

@RunWith(SpringRunner.class)
public class TaggingServiceJobTest {

    @Mock
    private TaggingServiceConfiguration taggingServiceConfiguration;

    @Mock
    private JiraAssignmentService jiraAssignmentService;

    @InjectMocks
    private TaggingServiceJob taggingServiceJob;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        when(taggingServiceConfiguration.getJiraAssignStateReadRetryDelaySeconds()).thenReturn(1);
        when(taggingServiceConfiguration.getJiraAssignStateReadRetryMax()).thenReturn(1);
    }

    @Test
    public void testTriggerCronJob_SuccessfulFlow() throws Exception {
        Date mockDate = new Date();

        try (MockedStatic<com.rbs.tntr.business.taggingService.service.common.DateTimeService> mockedDateTimeService =
                     mockStatic(com.rbs.tntr.business.taggingService.service.common.DateTimeService.class)) {

            mockedDateTimeService.when(com.rbs.tntr.business.taggingService.service.common.DateTimeService::getCurrentUTCDate)
                    .thenReturn(new org.joda.time.DateTime(mockDate));

            when(jiraAssignmentService.isJiraFilterFileAvailable(mockDate)).thenReturn(true);
            when(jiraAssignmentService.readSaveJiraExpressions(mockDate)).thenReturn(
                    new ResponseEntity<>(Collections.singletonList(new TaggingServiceResult()), HttpStatus.OK)
            );
            when(jiraAssignmentService.readAndAssignJiraToTrades()).thenReturn(
                    new ResponseEntity<>(Collections.singletonList(new AutoAssignResult()), HttpStatus.OK)
            );

            taggingServiceJob.triggerCronJob();
        }
    }

    @Test
    public void testTriggerCronJob_FileNotAvailable() throws Exception {
        Date mockDate = new Date();

        try (MockedStatic<com.rbs.tntr.business.taggingService.service.common.DateTimeService> mockedDateTimeService =
                     mockStatic(com.rbs.tntr.business.taggingService.service.common.DateTimeService.class)) {

            mockedDateTimeService.when(com.rbs.tntr.business.taggingService.service.common.DateTimeService::getCurrentUTCDate)
                    .thenReturn(new org.joda.time.DateTime(mockDate));

            when(jiraAssignmentService.isJiraFilterFileAvailable(mockDate)).thenReturn(false);

            taggingServiceJob.triggerCronJob();
        }
    }

    @Test
    public void testTriggerCronJobAt1pm_CallsProcessMethod() throws Exception {
        // Reuse previous test setup to ensure internal logic is executed.
        testTriggerCronJob_SuccessfulFlow();
        taggingServiceJob.triggerCronJobAt1pm();
    }

    @Test
    public void testTriggerCronJob_ExceptionHandling() throws Exception {
        Date mockDate = new Date();

        try (MockedStatic<com.rbs.tntr.business.taggingService.service.common.DateTimeService> mockedDateTimeService =
                     mockStatic(com.rbs.tntr.business.taggingService.service.common.DateTimeService.class)) {

            mockedDateTimeService.when(com.rbs.tntr.business.taggingService.service.common.DateTimeService::getCurrentUTCDate)
                    .thenReturn(new org.joda.time.DateTime(mockDate));

            when(jiraAssignmentService.isJiraFilterFileAvailable(mockDate)).thenThrow(new RuntimeException("Simulated error"));

            taggingServiceJob.triggerCronJob();
        }
    }
}
