package com.rbs.tntr.business.blotter.services.actions;

import com.nwm.tntr.commons.domain.persistence.entity.DocumentId;
import com.nwm.tntr.commons.domain.persistence.entity.ExceptionManagement;
import com.nwm.tntr.commons.domain.persistence.entity.NonReportableData;
import com.nwm.tntr.commons.domain.persistence.entity.collateral.CollateralReport;
import com.nwm.tntr.commons.domain.persistence.entity.collateral.CollateralReportDocument;
import com.nwm.tntr.commons.domain.persistence.entity.collateral.CollateralReportId;
import com.nwm.tntr.commons.repository.regreporting.WriteResult;
import com.rbs.tntr.business.blotter.df.manager.DfCollateralPersistManager;
import com.rbs.tntr.business.blotter.df.updater.CollateralDataUpdater;
import com.rbs.tntr.business.blotter.services.validators.ActionRequestValidator;
import com.rbs.tntr.business.blotter.web.request.regreportingTrade.*;
import com.rbs.tntr.domain.blotter.enums.ExceptionStatus;
import com.rbs.tntr.domain.blotter.exceptions.BlotterRunTimeException;
import com.rbs.tntr.domain.blotter.tntrBlotterView.ActionDocumentId;
import org.apache.commons.lang3.tuple.Pair;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;

import java.lang.reflect.Method;
import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Matchers.*;
import static org.mockito.Mockito.*;

public class CollateralActionServiceTest {

    @InjectMocks
    private CollateralActionService collateralActionService;

    @Mock
    private DfCollateralPersistManager dfCollateralPersistManager;

    @Mock
    private CollateralDataUpdater dataUpdater;

    @Mock
    private ActionRequestValidator requestValidator;

    @Mock
    private Logger logger;

    private CollateralReportDocument collateralReportDocument;
    private CollateralReport collateralReport;
    private ExceptionManagement exceptionManagement;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        collateralReportDocument = mock(CollateralReportDocument.class);
        collateralReport = mock(CollateralReport.class);
        exceptionManagement = mock(ExceptionManagement.class);
        when(collateralReportDocument.getCollateralReport()).thenReturn(collateralReport);
        when(collateralReport.getExceptionManagement()).thenReturn(exceptionManagement);
        when(collateralReport.getNonReportableData()).thenReturn(mock(NonReportableData.class));
        when(collateralReport.getCollateralReportId()).thenReturn(mock(CollateralReportId.class));
    }

    // addComment Tests
    @Test
    public void testAddComment_EmptyRequests() {
        List<AddTradeCommentRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralActionService.addComment(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAddComment_ValidRequest() throws Exception {
        AddTradeCommentRequest request = new AddTradeCommentRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<AddTradeCommentRequest> requests = Arrays.asList(request);
        when(requestValidator.validateUser(anyString(), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(Arrays.asList(collateralReportDocument));
        when(dataUpdater.addCommentsToException(any(), any(), anyString())).thenReturn(exceptionManagement);
        WriteResult<CollateralReport> writeResult = mock(WriteResult.class);
        when(writeResult.isSuccess()).thenReturn(true);
        when(writeResult.getDocumentId()).thenReturn(new DocumentId("key", 2L));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Arrays.asList(writeResult));
        List<ActionUpdateResult> results = collateralActionService.addComment(requests, "username");
        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testAddComment_UserValidationFails() {
        AddTradeCommentRequest request = new AddTradeCommentRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<AddTradeCommentRequest> requests = Arrays.asList(request);
        when(requestValidator.validateUser(anyString(), any(ExceptionManagement.class))).thenReturn(false);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(Arrays.asList(collateralReportDocument));
        List<ActionUpdateResult> results = collateralActionService.addComment(requests, "username");
        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
    }

    @Test
    public void testAddComment_ApprovalStatusValidationFails() {
        AddTradeCommentRequest request = new AddTradeCommentRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<AddTradeCommentRequest> requests = Arrays.asList(request);
        when(requestValidator.validateUser(anyString(), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(true);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(Arrays.asList(collateralReportDocument));
        List<ActionUpdateResult> results = collateralActionService.addComment(requests, "username");
        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
    }

    @Test
    public void testAddComment_ExceptionThrown() {
        AddTradeCommentRequest request = new AddTradeCommentRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<AddTradeCommentRequest> requests = Arrays.asList(request);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenThrow(new RuntimeException("Test Exception"));
        List<ActionUpdateResult> results = collateralActionService.addComment(requests, "username");
        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getErrorMessage().contains("Test Exception"));
    }

    // removeComment Tests
    @Test
    public void testRemoveComment_EmptyRequests() {
        List<AddTradeCommentRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralActionService.removeComment(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testRemoveComment_ValidRequest() throws Exception {
        AddTradeCommentRequest request = new AddTradeCommentRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<AddTradeCommentRequest> requests = Arrays.asList(request);
        when(requestValidator.validateUser(anyString(), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(Arrays.asList(collateralReportDocument));
        when(dataUpdater.removeCommentsToException(any(), any(), anyString())).thenReturn(exceptionManagement);
        WriteResult<CollateralReport> writeResult = mock(WriteResult.class);
        when(writeResult.isSuccess()).thenReturn(true);
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Arrays.asList(writeResult));
        List<ActionUpdateResult> results = collateralActionService.removeComment(requests, "username");
        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testRemoveComment_UserValidationFails() {
        AddTradeCommentRequest request = new AddTradeCommentRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<AddTradeCommentRequest> requests = Arrays.asList(request);
        when(requestValidator.validateUser(anyString(), any(ExceptionManagement.class))).thenReturn(false);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(Arrays.asList(collateralReportDocument));
        List<ActionUpdateResult> results = collateralActionService.removeComment(requests, "username");
        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
    }

    // updateEditedFields Tests
    @Test
    public void testUpdateEditedFields_EmptyRequests() {
        List<EditRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralActionService.updateEditedFields(requests, "username", ExceptionStatus.Open);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testUpdateEditedFields_ValidRequests() throws Exception {
        EditRequest request = new EditRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<EditRequest> requests = Arrays.asList(request);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(Arrays.asList(collateralReportDocument));
        when(dataUpdater.updateTradeReportData(any(), any(), anyString(), any())).thenReturn(collateralReport);
        WriteResult<CollateralReport> writeResult = mock(WriteResult.class);
        when(writeResult.isSuccess()).thenReturn(true);
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Arrays.asList(writeResult));
        List<ActionUpdateResult> results = collateralActionService.updateEditedFields(requests, "username", ExceptionStatus.Open);
        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testUpdateEditedFields_BlotterRunTimeException() {
        EditRequest request = new EditRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<EditRequest> requests = Arrays.asList(request);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(Arrays.asList(collateralReportDocument));
        when(dataUpdater.updateTradeReportData(any(), any(), anyString(), any())).thenThrow(new BlotterRunTimeException("Edit failed"));
        List<ActionUpdateResult> results = collateralActionService.updateEditedFields(requests, "username", ExceptionStatus.Open);
        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getErrorMessage().contains("Edit failed"));
    }

    // updateExceptionStatus Tests
    @Test
    public void testUpdateExceptionStatus_EmptyRequests() {
        List<UpdateExceptionStatusRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralActionService.updateExceptionStatus(requests, ExceptionStatus.Open, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testUpdateExceptionStatus_InvalidStatus() {
        UpdateExceptionStatusRequest request = new UpdateExceptionStatusRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<UpdateExceptionStatusRequest> requests = Arrays.asList(request);
        when(requestValidator.validateExceptionStatus(any(ExceptionStatus.class))).thenReturn(true);
        List<ActionUpdateResult> results = collateralActionService.updateExceptionStatus(requests, ExceptionStatus.Open, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testUpdateExceptionStatus_EditRejected() throws Exception {
        UpdateExceptionStatusRequest request = new UpdateExceptionStatusRequest();
        request.setDocumentId(new ActionDocumentId("key", 3L));
        List<UpdateExceptionStatusRequest> requests = Arrays.asList(request);
        when(requestValidator.validateExceptionStatus(any(ExceptionStatus.class))).thenReturn(false);
        when(requestValidator.validateUser(anyString(), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.validateExceptionStatus(any(ExceptionStatus.class), any())).thenReturn(true);
        when(requestValidator.validateApprover(any(), anyString(), anyString(), anyString())).thenReturn(false);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(Arrays.asList(collateralReportDocument));
        when(dataUpdater.addExceptionStatus(any(), any(), any(), anyString())).thenReturn(exceptionManagement);
        WriteResult<CollateralReport> writeResult = mock(WriteResult.class);
        when(writeResult.isSuccess()).thenReturn(true);
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Arrays.asList(writeResult));
        when(dfCollateralPersistManager.upsertAllRecords(anyList())).thenReturn(Arrays.asList(writeResult));
        List<ActionUpdateResult> results = collateralActionService.updateExceptionStatus(requests, ExceptionStatus.Edit_Rejected, "username");
        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
        verify(dfCollateralPersistManager, times(1)).upsertAllRecords(anyList());
    }

    // performResetAction Tests
    @Test
    public void testPerformResetAction_EmptyRequests() {
        List<UpdateExceptionStatusRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralActionService.performResetAction(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testPerformResetAction_FlowNotSet() throws Exception {
        UpdateExceptionStatusRequest request = new UpdateExceptionStatusRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<UpdateExceptionStatusRequest> requests = Arrays.asList(request);
        when(requestValidator.validateResetActionApprovalStatus(any(), eq(null))).thenReturn(true);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(Arrays.asList(collateralReportDocument));
        when(dataUpdater.resetAction(any(), any(), anyString())).thenReturn(exceptionManagement);
        WriteResult<CollateralReport> writeResult = mock(WriteResult.class);
        when(writeResult.isSuccess()).thenReturn(true);
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Arrays.asList(writeResult));
        List<ActionUpdateResult> results = collateralActionService.performResetAction(requests, "username");
        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    // assignExceptionToUser Tests
    @Test
    public void testAssignExceptionToUser_EmptyRequests() {
        List<AssignTradeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralActionService.assignExceptionToUser(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAssignExceptionToUser_ValidRequest() throws Exception {
        AssignTradeRequest request = new AssignTradeRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<AssignTradeRequest> requests = Arrays.asList(request);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(Arrays.asList(collateralReportDocument));
        when(dataUpdater.assignException(any(), any(), anyString())).thenReturn(exceptionManagement);
        WriteResult<CollateralReport> writeResult = mock(WriteResult.class);
        when(writeResult.isSuccess()).thenReturn(true);
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Arrays.asList(writeResult));
        List<ActionUpdateResult> results = collateralActionService.assignExceptionToUser(requests, "username");
        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    // addJiraId Tests
    @Test
    public void testAddJiraId_EmptyRequests() {
        List<AddTradeJiraReferenceRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralActionService.addJiraId(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAddJiraId_JiraIdAlreadyPresent() {
        AddTradeJiraReferenceRequest request = new AddTradeJiraReferenceRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<AddTradeJiraReferenceRequest> requests = Arrays.asList(request);
        when(requestValidator.validateUser(anyString(), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.isJiraIdPresent(anyList(), anyString())).thenReturn(true);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(Arrays.asList(collateralReportDocument));
        List<ActionUpdateResult> results = collateralActionService.addJiraId(requests, "username");
        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
    }

    // removeJiraId Tests
    @Test
    public void testRemoveJiraId_EmptyRequests() {
        List<AddTradeJiraReferenceRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralActionService.removeJiraId(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testRemoveJiraId_JiraIdNotPresent() {
        AddTradeJiraReferenceRequest request = new AddTradeJiraReferenceRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<AddTradeJiraReferenceRequest> requests = Arrays.asList(request);
        when(requestValidator.validateUser(anyString(), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.isJiraIdPresent(anyList(), anyString())).thenReturn(false);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(Arrays.asList(collateralReportDocument));
        List<ActionUpdateResult> results = collateralActionService.removeJiraId(requests, "username");
        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
    }

    // addJiraType Tests
    @Test
    public void testAddJiraType_EmptyRequests() {
        List<AddTradeJiraTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralActionService.addJiraType(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAddJiraType_ValidRequest() throws Exception {
        AddTradeJiraTypeRequest request = new AddTradeJiraTypeRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<AddTradeJiraTypeRequest> requests = Arrays.asList(request);
        when(requestValidator.validateUser(anyString(), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(Arrays.asList(collateralReportDocument));
        when(dataUpdater.addJiraTypeToException(any(), any(), anyString())).thenReturn(exceptionManagement);
        WriteResult<CollateralReport> writeResult = mock(WriteResult.class);
        when(writeResult.isSuccess()).thenReturn(true);
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Arrays.asList(writeResult));
        List<ActionUpdateResult> results = collateralActionService.addJiraType(requests, "username");
        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    // removeJiraType Tests
    @Test
    public void testRemoveJiraType_EmptyRequests() {
        List<AddTradeJiraTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralActionService.removeJiraType(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testRemoveJiraType_JiraTypeNotPresent() {
        AddTradeJiraTypeRequest request = new AddTradeJiraTypeRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<AddTradeJiraTypeRequest> requests = Arrays.asList(request);
        when(requestValidator.validateUser(anyString(), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(exceptionManagement.getIssueType()).thenReturn(mock(com.nwm.tntr.commons.domain.persistence.constant.IssueType.class));
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(Arrays.asList(collateralReportDocument));
        when(exceptionManagement.getIssueType().value()).thenReturn("DifferentType");
        when(request.getJiraType().getIssueType()).thenReturn("TestType");
        List<ActionUpdateResult> results = collateralActionService.removeJiraType(requests, "username");
        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
    }

    // updateUserActionType Tests
    @Test
    public void testUpdateUserActionType_EmptyRequests() {
        List<UpdateUserActionTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralActionService.updateUserActionType(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testUpdateUserActionType_ValidRequest() throws Exception {
        UpdateUserActionTypeRequest request = new UpdateUserActionTypeRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<UpdateUserActionTypeRequest> requests = Arrays.asList(request);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(Arrays.asList(collateralReportDocument));
        when(dataUpdater.addComments(any(), anyString(), anyString(), anyString())).thenReturn(exceptionManagement);
        WriteResult<CollateralReport> writeResult = mock(WriteResult.class);
        when(writeResult.isSuccess()).thenReturn(true);
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Arrays.asList(writeResult));
        List<ActionUpdateResult> results = collateralActionService.updateUserActionType(requests, "username");
        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    // addCommentType Tests
    @Test
    public void testAddCommentType_EmptyRequests() {
        List<AddTradeCommentTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralActionService.addCommentType(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAddCommentType_ValidRequest() throws Exception {
        AddTradeCommentTypeRequest request = new AddTradeCommentTypeRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<AddTradeCommentTypeRequest> requests = Arrays.asList(request);
        when(requestValidator.validateUser(anyString(), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(Arrays.asList(collateralReportDocument));
        when(dataUpdater.addCommentTypeToException(any(), any(), anyString())).thenReturn(exceptionManagement);
        WriteResult<CollateralReport> writeResult = mock(WriteResult.class);
        when(writeResult.isSuccess()).thenReturn(true);
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Arrays.asList(writeResult));
        List<ActionUpdateResult> results = collateralActionService.addCommentType(requests, "username");
        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    // removeCommentType Tests
    @Test
    public void testRemoveCommentType_EmptyRequests() {
        List<AddTradeCommentTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralActionService.removeCommentType(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testRemoveCommentType_ValidRequest() throws Exception {
        AddTradeCommentTypeRequest request = new AddTradeCommentTypeRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<AddTradeCommentTypeRequest> requests = Arrays.asList(request);
        when(requestValidator.validateUser(anyString(), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(Arrays.asList(collateralReportDocument));
        when(dataUpdater.removeCommentTypeToException(any(), any(), anyString())).thenReturn(exceptionManagement);
        WriteResult<CollateralReport> writeResult = mock(WriteResult.class);
        when(writeResult.isSuccess()).thenReturn(true);
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Arrays.asList(writeResult));
        List<ActionUpdateResult> results = collateralActionService.removeCommentType(requests, "username");
        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    // Private Method Tests via Reflection
    @Test
    public void testGetTradeWithRemovedComments() throws Exception {
        Method method = CollateralActionService.class.getDeclaredMethod("getTradeWithRemovedComments", List.class, Map.class, List.class, String.class);
        method.setAccessible(true);
        List<CollateralReportDocument> documents = Arrays.asList(collateralReportDocument);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        requests.put(new DocumentId("key", 1L), new AddTradeCommentRequest());
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        String userName = "username";
        when(requestValidator.validateUser(anyString(), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.removeCommentsToException(any(), any(), anyString())).thenReturn(exceptionManagement);
        List<Pair<CollateralReport, Long>> result = (List<Pair<CollateralReport, Long>>) method.invoke(collateralActionService, documents, requests, failedTrades, userName);
        assertEquals(1, result.size());
    }

    @Test
    public void testEditFields() throws Exception {
        Method method = CollateralActionService.class.getDeclaredMethod("editFields", List.class, Map.class, List.class, String.class, ExceptionStatus.class);
        method.setAccessible(true);
        List<CollateralReportDocument> documents = Arrays.asList(collateralReportDocument);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        requests.put(new DocumentId("key", 1L), new EditRequest());
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        String userName = "username";
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.updateTradeReportData(any(), any(), anyString(), any())).thenReturn(collateralReport);
        List<Pair<CollateralReport, Long>> result = (List<Pair<CollateralReport, Long>>) method.invoke(collateralActionService, documents, requests, failedTrades, userName, ExceptionStatus.Open);
        assertEquals(1, result.size());
    }

    @Test
    public void testGetTradeWithExceptionStatus() throws Exception {
        Method method = CollateralActionService.class.getDeclaredMethod("getTradeWithExceptionStatus", List.class, ExceptionStatus.class, Map.class, List.class, String.class);
        method.setAccessible(true);
        List<CollateralReportDocument> documents = Arrays.asList(collateralReportDocument);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        requests.put(new DocumentId("key", 1L), new UpdateExceptionStatusRequest());
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        String userName = "username";
        when(requestValidator.validateUser(anyString(), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.validateExceptionStatus(any(ExceptionStatus.class), any())).thenReturn(true);
        when(requestValidator.validateApprover(any(), anyString(), anyString(), anyString())).thenReturn(false);
        when(dataUpdater.addExceptionStatus(any(), any(), any(), anyString())).thenReturn(exceptionManagement);
        List<Pair<CollateralReport, Long>> result = (List<Pair<CollateralReport, Long>>) method.invoke(collateralActionService, documents, ExceptionStatus.Open, requests, failedTrades, userName);
        assertEquals(1, result.size());
    }

    @Test
    public void testResetActionOnCollateral() throws Exception {
        Method method = CollateralActionService.class.getDeclaredMethod("resetActionOnCollateral", List.class, Map.class, List.class, String.class);
        method.setAccessible(true);
        List<CollateralReportDocument> documents = Arrays.asList(collateralReportDocument);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        UpdateExceptionStatusRequest request = new UpdateExceptionStatusRequest();
        requests.put(new DocumentId("key", 1L), request);
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        String userName = "username";
        when(requestValidator.validateResetActionApprovalStatus(any(), anyString())).thenReturn(true);
        when(dataUpdater.resetAction(any(), any(), anyString())).thenReturn(exceptionManagement);
        List<Pair<CollateralReport, Long>> result = (List<Pair<CollateralReport, Long>>) method.invoke(collateralActionService, documents, requests, failedTrades, userName);
        assertEquals(1, result.size());
    }

    @Test
    public void testGetTradeWithAssignment() throws Exception {
        Method method = CollateralActionService.class.getDeclaredMethod("getTradeWithAssignment", List.class, Map.class, List.class, String.class);
        method.setAccessible(true);
        List<CollateralReportDocument> documents = Arrays.asList(collateralReportDocument);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        requests.put(new DocumentId("key", 1L), new AssignTradeRequest());
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        String userName = "username";
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.assignException(any(), any(), anyString())).thenReturn(exceptionManagement);
        List<Pair<CollateralReport, Long>> result = (List<Pair<CollateralReport, Long>>) method.invoke(collateralActionService, documents, requests, failedTrades, userName);
        assertEquals(1, result.size());
    }

    @Test
    public void testGetTradeWithJiraReference() throws Exception {
        Method method = CollateralActionService.class.getDeclaredMethod("getTradeWithJiraReference", List.class, Map.class, List.class, String.class);
        method.setAccessible(true);
        List<CollateralReportDocument> documents = Arrays.asList(collateralReportDocument);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        requests.put(new DocumentId("key", 1L), new AddTradeJiraReferenceRequest());
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        String userName = "username";
        when(requestValidator.validateUser(anyString(), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.isJiraIdPresent(anyList(), anyString())).thenReturn(false);
        when(dataUpdater.addJiraIdToException(any(), any(), anyString())).thenReturn(exceptionManagement);
        List<Pair<CollateralReport, Long>> result = (List<Pair<CollateralReport, Long>>) method.invoke(collateralActionService, documents, requests, failedTrades, userName);
        assertEquals(1, result.size());
    }

    @Test
    public void testRemoveJiraReference() throws Exception {
        Method method = CollateralActionService.class.getDeclaredMethod("removeJiraReference", List.class, Map.class, List.class, String.class);
        method.setAccessible(true);
        List<CollateralReportDocument> documents = Arrays.asList(collateralReportDocument);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        requests.put(new DocumentId("key", 1L), new AddTradeJiraReferenceRequest());
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        String userName = "username";
        when(requestValidator.validateUser(anyString(), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.isJiraIdPresent(anyList(), anyString())).thenReturn(true);
        when(dataUpdater.removeJiraIdFromException(any(), any(), anyString())).thenReturn(exceptionManagement);
        List<Pair<CollateralReport, Long>> result = (List<Pair<CollateralReport, Long>>) method.invoke(collateralActionService, documents, requests, failedTrades, userName);
        assertEquals(1, result.size());
    }

    @Test
    public void testGetTradeWithJiraType() throws Exception {
        Method method = CollateralActionService.class.getDeclaredMethod("getTradeWithJiraType", List.class, Map.class, List.class, String.class);
        method.setAccessible(true);
        List<CollateralReportDocument> documents = Arrays.asList(collateralReportDocument);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        requests.put(new DocumentId("key", 1L), new AddTradeJiraTypeRequest());
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        String userName = "username";
        when(requestValidator.validateUser(anyString(), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.addJiraTypeToException(any(), any(), anyString())).thenReturn(exceptionManagement);
        List<Pair<CollateralReport, Long>> result = (List<Pair<CollateralReport, Long>>) method.invoke(collateralActionService, documents, requests, failedTrades, userName);
        assertEquals(1, result.size());
    }

    @Test
    public void testRemoveJiraType() throws Exception {
        Method method = CollateralActionService.class.getDeclaredMethod("removeJiraType", List.class, Map.class, List.class, String.class);
        method.setAccessible(true);
        List<CollateralReportDocument> documents = Arrays.asList(collateralReportDocument);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        requests.put(new DocumentId("key", 1L), new AddTradeJiraTypeRequest());
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        String userName = "username";
        when(requestValidator.validateUser(anyString(), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(exceptionManagement.getIssueType()).thenReturn(mock(com.nwm.tntr.commons.domain.persistence.constant.IssueType.class));
        when(exceptionManagement.getIssueType().value()).thenReturn("TestType");
        when(((AddTradeJiraTypeRequest) requests.get(new DocumentId("key", 1L))).getJiraType().getIssueType()).thenReturn("TestType");
        when(dataUpdater.removeJiraTypeFromException(any(), any(), anyString())).thenReturn(exceptionManagement);
        List<Pair<CollateralReport, Long>> result = (List<Pair<CollateralReport, Long>>) method.invoke(collateralActionService, documents, requests, failedTrades, userName);
        assertEquals(1, result.size());
    }

    @Test
    public void testGetUserActionTypeTrades() throws Exception {
        Method method = CollateralActionService.class.getDeclaredMethod("getUserActionTypeTrades", List.class, Map.class, List.class, String.class);
        method.setAccessible(true);
        List<CollateralReportDocument> documents = Arrays.asList(collateralReportDocument);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        requests.put(new DocumentId("key", 1L), new UpdateUserActionTypeRequest());
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        String userName = "username";
        when(dataUpdater.addComments(any(), anyString(), anyString(), anyString())).thenReturn(exceptionManagement);
        List<Pair<CollateralReport, Long>> result = (List<Pair<CollateralReport, Long>>) method.invoke(collateralActionService, documents, requests, failedTrades, userName);
        assertEquals(1, result.size());
    }

    @Test
    public void testGetTradeWithCommentTypd() throws Exception {
        Method method = CollateralActionService.class.getDeclaredMethod("getTradeWithCommentTypd", List.class, Map.class, List.class, String.class);
        method.setAccessible(true);
        List<CollateralReportDocument> documents = Arrays.asList(collateralReportDocument);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        requests.put(new DocumentId("key", 1L), new AddTradeCommentTypeRequest());
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        String userName = "username";
        when(requestValidator.validateUser(anyString(), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.addCommentTypeToException(any(), any(), anyString())).thenReturn(exceptionManagement);
        List<Pair<CollateralReport, Long>> result = (List<Pair<CollateralReport, Long>>) method.invoke(collateralActionService, documents, requests, failedTrades, userName);
        assertEquals(1, result.size());
    }

    @Test
    public void testGetTradeWithRemovedCommentType() throws Exception {
        Method method = CollateralActionService.class.getDeclaredMethod("getTradeWithRemovedCommentType", List.class, Map.class, List.class, String.class);
        method.setAccessible(true);
        List<CollateralReportDocument> documents = Arrays.asList(collateralReportDocument);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        requests.put(new DocumentId("key", 1L), new AddTradeCommentTypeRequest());
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        String userName = "username";
        when(requestValidator.validateUser(anyString(), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.removeCommentTypeToException(any(), any(), anyString())).thenReturn(exceptionManagement);
        List<Pair<CollateralReport, Long>> result = (List<Pair<CollateralReport, Long>>) method.invoke(collateralActionService, documents, requests, failedTrades, userName);
        assertEquals(1, result.size());
    }

    @Test
    public void testGetCollateralReport() throws Exception {
        Method method = CollateralActionService.class.getDeclaredMethod("getCollateralReport", CollateralReport.class, ExceptionManagement.class);
        method.setAccessible(true);
        CollateralReport result = (CollateralReport) method.invoke(collateralActionService, collateralReport, exceptionManagement);
        assertNotNull(result);
    }

    @Test
    public void testGetTradeReportDocuments_EmptyList() throws Exception {
        Method method = CollateralActionService.class.getDeclaredMethod("getTradeReportDocuments", List.class);
        method.setAccessible(true);
        List<DocumentId> documentIds = new ArrayList<>();
        when(dfCollateralPersistManager.getAllRecordsById(documentIds)).thenReturn(new ArrayList<>());
        List<CollateralReportDocument> result = (List<CollateralReportDocument>) method.invoke(collateralActionService, documentIds);
        assertTrue(result.isEmpty());
    }

    @Test
    public void testGetReportsWithExpectedBaseVersion() throws Exception {
        Method method = CollateralActionService.class.getDeclaredMethod("getReportsWithExpectedBaseVersion", CollateralReportDocument.class, CollateralReport.class);
        method.setAccessible(true);
        when(collateralReportDocument.getDocumentId()).thenReturn(new DocumentId("key", 1L));
        Pair<CollateralReport, Long> result = (Pair<CollateralReport, Long>) method.invoke(collateralActionService, collateralReportDocument, collateralReport);
        assertEquals(1L, (long) result.getRight());
    }

    @Test
    public void testSaveAllRecords_NullWriteResults() throws Exception {
        Method method = CollateralActionService.class.getDeclaredMethod("saveAllRecords", List.class, List.class);
        method.setAccessible(true);
        List<CollateralReportDocument> documents = Arrays.asList(collateralReportDocument);
        List<Pair<CollateralReport, Long>> tradeReports = Arrays.asList(Pair.of(collateralReport, 1L));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(null);
        List<ActionUpdateResult> results = (List<ActionUpdateResult>) method.invoke(collateralActionService, documents, tradeReports);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testUpsertAllRecords() throws Exception {
        Method method = CollateralActionService.class.getDeclaredMethod("upsertAllRecords", List.class, List.class);
        method.setAccessible(true);
        List<CollateralReportDocument> documents = Arrays.asList(collateralReportDocument);
        List<CollateralReport> reports = Arrays.asList(collateralReport);
        WriteResult<CollateralReport> writeResult = mock(WriteResult.class);
        when(writeResult.isSuccess()).thenReturn(true);
        when(dfCollateralPersistManager.upsertAllRecords(anyList())).thenReturn(Arrays.asList(writeResult));
        List<ActionUpdateResult> results = (List<ActionUpdateResult>) method.invoke(collateralActionService, documents, reports);
        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testGetTradeUpdateResultOnError() throws Exception {
        Method method = CollateralActionService.class.getDeclaredMethod("getTradeUpdateResultOnError", List.class, String.class);
        method.setAccessible(true);
        UpdateExceptionStatusRequest request = new UpdateExceptionStatusRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<UpdateExceptionStatusRequest> requests = Arrays.asList(request);
        List<ActionUpdateResult> results = (List<ActionUpdateResult>) method.invoke(collateralActionService, requests, "Test Error");
        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getErrorMessage().contains("Test Error"));
    }

    @Test
    public void testLogFailuerReason() throws Exception {
        Method method = CollateralActionService.class.getDeclaredMethod("logFailuerReason", DocumentId.class, String.class);
        method.setAccessible(true);
        DocumentId docId = new DocumentId("key", 1L);
        method.invoke(collateralActionService, docId, "Test Reason");
        verify(logger, times(1)).warn(anyString(), anyString(), anyLong(), anyString());
    }

    @Test
    public void testGetTradeReportWithUserActionType() throws Exception {
        Method method = CollateralActionService.class.getDeclaredMethod("getTradeReportWithUserActionType", CollateralReport.class, ExceptionManagement.class, com.nwm.tntr.commons.domain.persistence.constant.UserActionType.class);
        method.setAccessible(true);
        CollateralReport result = (CollateralReport) method.invoke(collateralActionService, collateralReport, exceptionManagement, com.nwm.tntr.commons.domain.persistence.constant.UserActionType.COMMENT_ADDED);
        assertNotNull(result);
    }
}
