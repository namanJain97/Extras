@RunWith(MockitoJUnitRunner.class)
public class MIAnalyticsDashboardRepositoryImplTest {

    @Mock
    private DfConnectionManager dfConnectionManager;

    @Mock
    private ItrClient itrClient;

    @Mock
    private DfStoreService dfStoreService;

    @Mock
    private ItrConfiguration itrConfiguration;

    @Mock
    private OffsetPaginationHelper offsetPaginationHelper;

    @InjectMocks
    private MIAnalyticsDashboardRepositoryImpl repository;

    @Test
    public void testScanDashboardMIAnalytics() {
        String tag = "testTag";
        List<Document> documents = Collections.singletonList(new Document());
        when(dfStoreService.scan(any(), any())).thenReturn(documents);

        List<Document> result = repository.scanDashboardMIAnalytics(tag);

        assertEquals(1, result.size());
        verify(dfStoreService).scan(any(), any());
    }

    @Test
    public void testScanMIAnalyticsFromDynamicFields() {
        String tag = "testTag";
        String storePath = "path/to/store";
        List<String> selectors = Arrays.asList("field1", "field2");
        List<Document> documents = Collections.singletonList(new Document());

        when(itrClient.getMIAnalyticsStorePath()).thenReturn(storePath);
        when(itrClient.getMIAnalyticsSelectors()).thenReturn(selectors);
        when(dfStoreService.scan(any(), any())).thenReturn(documents);

        List<Document> result = repository.scanMIAnalyticsFromDynamicFields(tag);

        assertEquals(1, result.size());
        verify(dfStoreService).scan(any(), any());
    }

    @Test
    public void testGetMIAnalyticsListFromItrClientWithOffsetPagination() {
        String tag = "testTag";
        Document doc = new Document();
        doc.set("client", "testClient");
        doc.set("totalCount", BigDecimal.TEN);
        doc.set("createdOn", Instant.now());
        doc.set("updatedOn", Instant.now());
        doc.set("tag", tag);

        List<Document> docs = Collections.singletonList(doc);
        when(offsetPaginationHelper.getPaginatedList(any(), any(), any())).thenReturn(docs);

        List<MIAnalyticsEntity> result = repository.getMIAnalyticsListFromItrClientWithOffsetPagination(tag);

        assertEquals(1, result.size());
        assertEquals("testClient", result.get(0).getClient());
    }

    @Test
    public void testUpsertMIAnalyticsToDataFabric() {
        MIAnalyticsEntity entity = new MIAnalyticsEntity();
        entity.setClient("client");
        entity.setTag("tag");
        entity.setCreatedOn(Instant.now());

        when(itrClient.getMIAnalyticsStorePath()).thenReturn("test/path");

        repository.upsertMIAnalyticsToDataFabric(entity);

        verify(dfStoreService).upsert(any(), any());
    }

    @Test
    public void testConvertDocumentToMIAnalyticsEntity() {
        Document doc = new Document();
        doc.set("client", "testClient");
        doc.set("totalCount", BigDecimal.ONE);
        doc.set("createdOn", Instant.now());
        doc.set("updatedOn", Instant.now());
        doc.set("tag", "tag");

        MIAnalyticsEntity entity = repository.convertDocumentToMIAnalyticsEntity(doc);

        assertEquals("testClient", entity.getClient());
        assertEquals(BigDecimal.ONE, entity.getTotalCount());
    }
}
