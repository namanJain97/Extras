package com.rbs.tntr.business.taggingService.transformer;

import com.nwm.tntr.commons.domain.JiraReference;
import com.nwm.tntr.commons.domain.WorkflowType;
import com.nwm.tntr.commons.enums.ApiQueryFilter;
import com.nwm.tntr.commons.enums.TntrCallerService;
import com.nwm.tntr.commons.enums.TntrFieldsReadUpdateEnum;
import com.nwm.tntr.commons.repository.domain.ReportingTemplate;
import com.nwm.tntr.commons.repository.domain.RepositoryAction;
import com.nwm.tntr.commons.repository.domain.TntrRepositoryReadCommandContext;
import com.nwm.tntr.commons.repository.domain.TntrRepositoryReadCommandResult;
import com.nwm.tntr.commons.repository.domain.TntrRepositoryUpdateCommandContext;
import com.nwm.tntr.commons.repository.domain.TntrRepositoryUpdateCommandResult;
import com.nwm.tntr.commons.repository.util.TntrTdxNodeBuilderUtil;
import com.rbs.tntr.domain.taggingService.jiraTaggingDomain.common.JiraTaggingDetail;
import com.rbs.tntr.domain.taggingService.jiraTaggingDomain.enums.FlowType;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class TntrTradeTransformerImplTest {

    @InjectMocks
    private TntrTradeTransformerImpl transformer;

    @Mock
    private ReportingTemplate reportingTemplate;

    @Mock
    private TntrRepositoryReadCommandResult readResult;

    @Mock
    private TntrRepositoryUpdateCommandResult updateResult;

    @Mock
    private RepositoryAction repositoryAction;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test(expected = NullPointerException.class)
    public void testExecuteUpdateTrades_NullJiraReference() {
        String whereExpression = "status=active";
        JiraTaggingDetail jiraTaggingDetail = new JiraTaggingDetail();
        FlowType workflowType = FlowType.TRADE;
        transformer.executeUpdateTrades(whereExpression, null, jiraTaggingDetail, workflowType);
    }

    @Test(expected = NullPointerException.class)
    public void testExecuteUpdateTrades_NullJiraTaggingDetail() {
        String whereExpression = "status=active";
        JiraReference jiraReference = mock(JiraReference.class);
        FlowType workflowType = FlowType.TRADE;
        transformer.executeUpdateTrades(whereExpression, jiraReference, null, workflowType);
    }

    @Test
    public void testExecuteUpdateTrades_TradeFlow() {
        String whereExpression = "status=active";
        JiraReference jiraReference = mock(JiraReference.class);
        JiraTaggingDetail jiraTaggingDetail = new JiraTaggingDetail();
        FlowType workflowType = FlowType.TRADE;

        RepositoryAction mockAction = mock(RepositoryAction.class);
        when(reportingTemplate.getRepositoryCommandFactory()).thenReturn(mock(RepositoryAction.class));
        when(reportingTemplate.getRepositoryCommandFactory().getCommand(RepositoryAction.UPDATE)).thenReturn(mockAction);
        when(mockAction.execute(any(TntrRepositoryUpdateCommandContext.class))).thenReturn(updateResult);

        TntrRepositoryUpdateCommandResult result = transformer.executeUpdateTrades(whereExpression, jiraReference, jiraTaggingDetail, workflowType);

        assertNotNull(result);
        verify(mockAction).execute(any(TntrRepositoryUpdateCommandContext.class));
    }

    @Test
    public void testExecuteUpdateTrades_CollateralFlow() {
        String whereExpression = "status=active";
        JiraReference jiraReference = mock(JiraReference.class);
        JiraTaggingDetail jiraTaggingDetail = new JiraTaggingDetail();
        FlowType workflowType = FlowType.COLLATERAL;

        RepositoryAction mockAction = mock(RepositoryAction.class);
        when(reportingTemplate.getRepositoryCommandFactory()).thenReturn(mock(RepositoryAction.class));
        when(reportingTemplate.getRepositoryCommandFactory().getCommand(RepositoryAction.UPDATE)).thenReturn(mockAction);
        when(mockAction.execute(any(TntrRepositoryUpdateCommandContext.class))).thenReturn(updateResult);

        TntrRepositoryUpdateCommandResult result = transformer.executeUpdateTrades(whereExpression, jiraReference, jiraTaggingDetail, workflowType);

        assertNotNull(result);
        verify(mockAction).execute(any(TntrRepositoryUpdateCommandContext.class));
    }

    @Test
    public void testExecuteUpdateTrades_ValuationFlow() {
        String whereExpression = "status=active";
        JiraReference jiraReference = mock(JiraReference.class);
        JiraTaggingDetail jiraTaggingDetail = new JiraTaggingDetail();
        FlowType workflowType = FlowType.VALUATION;

        RepositoryAction mockAction = mock(RepositoryAction.class);
        when(reportingTemplate.getRepositoryCommandFactory()).thenReturn(mock(RepositoryAction.class));
        when(reportingTemplate.getRepositoryCommandFactory().getCommand(RepositoryAction.UPDATE)).thenReturn(mockAction);
        when(mockAction.execute(any(TntrRepositoryUpdateCommandContext.class))).thenReturn(updateResult);

        TntrRepositoryUpdateCommandResult result = transformer.executeUpdateTrades(whereExpression, jiraReference, jiraTaggingDetail, workflowType);

        assertNotNull(result);
        verify(mockAction).execute(any(TntrRepositoryUpdateCommandContext.class));
    }

    @Test
    public void testExecuteUpdateTrades_AggregatedCollateralFlow() {
        String whereExpression = "status=active";
        JiraReference jiraReference = mock(JiraReference.class);
        JiraTaggingDetail jiraTaggingDetail = new JiraTaggingDetail();
        FlowType workflowType = FlowType.AGGREGATED_COLLATERAL;

        RepositoryAction mockAction = mock(RepositoryAction.class);
        when(reportingTemplate.getRepositoryCommandFactory()).thenReturn(mock(RepositoryAction.class));
        when(reportingTemplate.getRepositoryCommandFactory().getCommand(RepositoryAction.UPDATE)).thenReturn(mockAction);
        when(mockAction.execute(any(TntrRepositoryUpdateCommandContext.class))).thenReturn(updateResult);

        TntrRepositoryUpdateCommandResult result = transformer.executeUpdateTrades(whereExpression, jiraReference, jiraTaggingDetail, workflowType);

        assertNotNull(result);
        verify(mockAction).execute(any(TntrRepositoryUpdateCommandContext.class));
    }

    @Test
    public void testGetRecords_TradeFlow_EmptyTradeList() {
        String whereExpression = "status=active";
        FlowType workflowType = FlowType.TRADE;
        String indexHint = "index1";
        JiraReference jiraReference = mock(JiraReference.class);

        RepositoryAction mockAction = mock(RepositoryAction.class);
        when(reportingTemplate.getRepositoryCommandFactory()).thenReturn(mock(RepositoryAction.class));
        when(reportingTemplate.getRepositoryCommandFactory().getCommand(RepositoryAction.READ_ALL)).thenReturn(mockAction);
        when(readResult.getTradeList()).thenReturn(new ArrayList<>());
        when(mockAction.execute(any(TntrRepositoryReadCommandContext.class))).thenReturn(readResult);

        int count = transformer.getRecords(whereExpression, workflowType, indexHint, jiraReference);

        assertEquals(0, count);
        verify(mockAction).execute(any(TntrRepositoryReadCommandContext.class));
    }

    @Test
    public void testGetRecords_CollateralFlow_WithJiraReference() {
        String whereExpression = "status=active";
        FlowType workflowType = FlowType.COLLATERAL;
        String indexHint = "index1";
        JiraReference jiraReference = mock(JiraReference.class);

        List<Map<TntrFieldsReadUpdateEnum, Object>> tradeList = new ArrayList<>();
        Map<TntrFieldsReadUpdateEnum, Object> trade = new HashMap<>();
        Map<String, Object> suppMap = new HashMap<>();
        trade.put(TntrFieldsReadUpdateEnum.SUPPLEMENTARY_INFORMATION, suppMap);
        tradeList.add(trade);

        RepositoryAction mockAction = mock(RepositoryAction.class);
        when(reportingTemplate.getRepositoryCommandFactory()).thenReturn(mock(RepositoryAction.class));
        when(reportingTemplate.getRepositoryCommandFactory().getCommand(RepositoryAction.READ_ALL)).thenReturn(mockAction);
        when(readResult.getTradeList()).thenReturn(tradeList);
        when(mockAction.execute(any(TntrRepositoryReadCommandContext.class))).thenReturn(readResult);
        when(TntrTdxNodeBuilderUtil.isJiraIdPresentInUserWorkflow(eq(suppMap), eq(TntrFieldsReadUpdateEnum.JIRA_REFERENCES.getValue()), eq(jiraReference))).thenReturn(true);

        int count = transformer.getRecords(whereExpression, workflowType, indexHint, jiraReference);

        assertEquals(0, count);
        verify(mockAction).execute(any(TntrRepositoryReadCommandContext.class));
    }

    @Test
    public void testGetRecords_ValuationFlow_NoJiraReference() {
        String whereExpression = "status=active";
        FlowType workflowType = FlowType.VALUATION;
        String indexHint = "index1";
        JiraReference jiraReference = mock(JiraReference.class);

        List<Map<TntrFieldsReadUpdateEnum, Object>> tradeList = new ArrayList<>();
        Map<TntrFieldsReadUpdateEnum, Object> trade = new HashMap<>();
        Map<String, Object> suppMap = new HashMap<>();
        trade.put(TntrFieldsReadUpdateEnum.SUPPLEMENTARY_INFORMATION, suppMap);
        tradeList.add(trade);

        RepositoryAction mockAction = mock(RepositoryAction.class);
        when(reportingTemplate.getRepositoryCommandFactory()).thenReturn(mock(RepositoryAction.class));
        when(reportingTemplate.getRepositoryCommandFactory().getCommand(RepositoryAction.READ_ALL)).thenReturn(mockAction);
        when(readResult.getTradeList()).thenReturn(tradeList);
        when(mockAction.execute(any(TntrRepositoryReadCommandContext.class))).thenReturn(readResult);
        when(TntrTdxNodeBuilderUtil.isJiraIdPresentInUserWorkflow(eq(suppMap), eq(TntrFieldsReadUpdateEnum.JIRA_REFERENCES.getValue()), eq(jiraReference))).thenReturn(false);

        int count = transformer.getRecords(whereExpression, workflowType, indexHint, jiraReference);

        assertEquals(1, count);
        verify(mockAction).execute(any(TntrRepositoryReadCommandContext.class));
    }

    @Test
    public void testGetRecords_AggregatedCollateralFlow_MixedJiraReferences() {
        String whereExpression = "status=active";
        FlowType workflowType = FlowType.AGGREGATED_COLLATERAL;
        String indexHint = "index1";
        JiraReference jiraReference = mock(JiraReference.class);

        List<Map<TntrFieldsReadUpdateEnum, Object>> tradeList = new ArrayList<>();
        Map<TntrFieldsReadUpdateEnum, Object> trade1 = new HashMap<>();
        Map<String, Object> suppMap1 = new HashMap<>();
        trade1.put(TntrFieldsReadUpdateEnum.SUPPLEMENTARY_INFORMATION, suppMap1);
        Map<TntrFieldsReadUpdateEnum, Object> trade2 = new HashMap<>();
        Map<String, Object> suppMap2 = new HashMap<>();
        trade2.put(TntrFieldsReadUpdateEnum.SUPPLEMENTARY_INFORMATION, suppMap2);
        tradeList.add(trade1);
        tradeList.add(trade2);

        RepositoryAction mockAction = mock(RepositoryAction.class);
        when(reportingTemplate.getRepositoryCommandFactory()).thenReturn(mock(RepositoryAction.class));
        when(reportingTemplate.getRepositoryCommandFactory().getCommand(RepositoryAction.READ_ALL)).thenReturn(mockAction);
        when(readResult.getTradeList()).thenReturn(tradeList);
        when(mockAction.execute(any(TntrRepositoryReadCommandContext.class))).thenReturn(readResult);
        when(TntrTdxNodeBuilderUtil.isJiraIdPresentInUserWorkflow(eq(suppMap1), eq(TntrFieldsReadUpdateEnum.JIRA_REFERENCES.getValue()), eq(jiraReference))).thenReturn(true);
        when(TntrTdxNodeBuilderUtil.isJiraIdPresentInUserWorkflow(eq(suppMap2), eq(TntrFieldsReadUpdateEnum.JIRA_REFERENCES.getValue()), eq(jiraReference))).thenReturn(false);

        int count = transformer.getRecords(whereExpression, workflowType, indexHint, jiraReference);

        assertEquals(1, count);
        verify(mockAction).execute(any(TntrRepositoryReadCommandContext.class));
    }
}
