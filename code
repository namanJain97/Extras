package com.rbs.tntr.business.taggingService.configurer;

import com.rbs.ignite.security.spring.BaseSecurityConfigurer;
import com.rbs.ignite.security.spring.SecurityProvider;
import com.rbs.ignite.security.spring.SsoTokenAuthenticationFilter;
import com.rbs.tntr.business.taggingService.configuration.SsoConfiguration;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Import;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.stereotype.Component;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.Arrays;

/**
 * An implementation of {@link BaseSecurityConfigurer} for the exemplar service. Defines the secured URL pattern and allocates the
 * {@link SecurityProvider} to the parent so that all authentication and authorization calls for this service are handled by
 * that provider.
 */
@Component
@Import(SsoConfiguration.class)
public class TaggingSecurityConfigurer extends BaseSecurityConfigurer {

    @Value("${sso.security.skipUrls}")
    String skipAuthAntPatternUrls;

    public TaggingSecurityConfigurer(SecurityProvider securityProvider,
                                     @Value("${sso.security.secureEndpointAddressPattern}")
                                             String secureEndPointAddressPattern) {
        super(securityProvider,
                secureEndPointAddressPattern,
                new SsoTokenAuthenticationFilter(secureEndPointAddressPattern));
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        super.configure(http.cors().and());

    }

    @Override
    public void configure(WebSecurity web) {
        web.ignoring().antMatchers(skipAuthAntPatternUrls);
    }

    @Bean
    CorsConfigurationSource corsConfigurationSource() {
        //TODO: Pick the settings from cnofig map.
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(Arrays.asList("*"));
        configuration.setAllowedMethods(Arrays.asList("GET","POST"));
        configuration.setAllowedHeaders(Arrays.asList("Access-Control-Allow-Headers", "Origin","Accept", "X-Requested-With", "Content-Type", "Access-Control-Request-Method", "Access-Control-Request-Headers","sso-token","Cookie"));
        configuration.setAllowCredentials(true);
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }
}
