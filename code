
# Check if running as administrator
$isElevated = ([Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544"
if (-not $isElevated) {
    Start-Process powershell -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`"" -Verb RunAs
    exit
}

$executablePath = "C:\Program Files\VCS\VDI Servicing Suite\VDIServicing.exe"

# Check if the executable exists
if (Test-Path $executablePath) {
    $process = Start-Process $executablePath -PassThru
    $timeout = 25  # Set the maximum time to wait in seconds
    $interval = 3  # Set the interval for checking in seconds
    $elapsedTime = 0

    while (-not $process.HasExited -and $elapsedTime -lt $timeout) {
        Start-Sleep -Seconds $interval
        $elapsedTime += $interval
    }

    if ($elapsedTime -lt $timeout) {
        # Bring the application to the foreground
        Add-Type @"
            using System;
            using System.Runtime.InteropServices;
            public class User32 {
                [DllImport("user32.dll")]
                [return: MarshalAs(UnmanagedType.Bool)]
                public static extern bool SetForegroundWindow(IntPtr hWnd);
            }
"@
        [User32]::SetForegroundWindow($process.MainWindowHandle)
    } else {
        Write-Host "Timeout waiting for the application to become responsive."
    }
} else {
    Write-Host "Application executable not found."
}

# Send keys (Tab, Tab, Enter)
[System.Windows.Forms.SendKeys]::SendWait("{TAB}")			
Start-Sleep -Milliseconds 100
[System.Windows.Forms.SendKeys]::SendWait("{TAB}")
Start-Sleep -Milliseconds 100
[System.Windows.Forms.SendKeys]::SendWait("{ENTER}")
Start-Sleep -Milliseconds 300
[System.Windows.Forms.SendKeys]::SendWait("{TAB}")			
Start-Sleep -Milliseconds 100
[System.Windows.Forms.SendKeys]::SendWait("{TAB}")
Start-Sleep -Milliseconds 100
[System.Windows.Forms.SendKeys]::SendWait("{ENTER}")
Start-Sleep -Milliseconds 300
