@Test
    public void testAddComment_GetTradeReportDocumentsThrowsException() {
        AddTradeCommentRequest request = new AddTradeCommentRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<AddTradeCommentRequest> requests = Collections.singletonList(request);

        when(dfTradePersistManager.getAllRecordsById(anyList())).thenThrow(new DfRunTimeException("DB error"));

        List<ActionUpdateResult> results = valuationActionService.addComment(requests, "username");

        assertEquals(1, results.size());
        assertTrue(results.get(0).getError().contains("DB error"));
    }

    // Test for addComment when approval status validation fails
    @Test
    public void testAddComment_ApprovalStatusValidationFailure() {
        AddTradeCommentRequest request = new AddTradeCommentRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<AddTradeCommentRequest> requests = Collections.singletonList(request);

        ValuationReportDocument doc = mock(ValuationReportDocument.class);
        ValuationReport report = mock(ValuationReport.class);
        ExceptionManagement em = mock(ExceptionManagement.class);
        when(doc.getDocumentId()).thenReturn(DocumentId.from("key", 1L));
        when(doc.getValuationReport()).thenReturn(report);
        when(report.getExceptionManagement()).thenReturn(em);

        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(true); // Invalid status

        List<ActionUpdateResult> results = valuationActionService.addComment(requests, "username");

        assertEquals(1, results.size());
        assertTrue(results.get(0).getError().contains(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR));
    }

    // Test for addComment with partial save success
    @Test
    public void testAddComment_PartialSaveSuccess() {
        AddTradeCommentRequest req1 = new AddTradeCommentRequest();
        req1.setDocumentId(new ActionDocumentId("key1", 1L));
        AddTradeCommentRequest req2 = new AddTradeCommentRequest();
        req2.setDocumentId(new ActionDocumentId("key2", 1L));
        List<AddTradeCommentRequest> requests = Arrays.asList(req1, req2);

        ValuationReportDocument doc1 = mock(ValuationReportDocument.class);
        ValuationReport report1 = mock(ValuationReport.class);
        ExceptionManagement em1 = mock(ExceptionManagement.class);
        when(doc1.getDocumentId()).thenReturn(DocumentId.from("key1", 1L));
        when(doc1.getValuationReport()).thenReturn(report1);
        when(report1.getExceptionManagement()).thenReturn(em1);

        ValuationReportDocument doc2 = mock(ValuationReportDocument.class);
        ValuationReport report2 = mock(ValuationReport.class);
        ExceptionManagement em2 = mock(ExceptionManagement.class);
        when(doc2.getDocumentId()).thenReturn(DocumentId.from("key2", 1L));
        when(doc2.getValuationReport()).thenReturn(report2);
        when(report2.getExceptionManagement()).thenReturn(em2);

        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Arrays.asList(doc1, doc2));
        when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.addCommentsToException(any(), any(), anyString())).thenReturn(em1, em2);

        WriteResult<ValuationReport> success = WriteResult.success(DocumentId.from("key1", 2L), report1);
        WriteResult<ValuationReport> failure = WriteResult.failure(DocumentId.from("key2", 1L), new RuntimeException("Save failed"));
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Arrays.asList(success, failure));

        List<ActionUpdateResult> results = valuationActionService.addComment(requests, "username");

        assertEquals(2, results.size());
        assertTrue(results.get(0).isSuccess());
        assertTrue(results.get(1).getError().contains("Save failed"));
    }

    // Test for removeComment when dataUpdater throws an exception
    @Test
    public void testRemoveComment_DataUpdaterThrowsException() {
        AddTradeCommentRequest request = new AddTradeCommentRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<AddTradeCommentRequest> requests = Collections.singletonList(request);

        ValuationReportDocument doc = mock(ValuationReportDocument.class);
        ValuationReport report = mock(ValuationReport.class);
        ExceptionManagement em = mock(ExceptionManagement.class);
        when(doc.getDocumentId()).thenReturn(DocumentId.from("key", 1L));
        when(doc.getValuationReport()).thenReturn(report);
        when(report.getExceptionManagement()).thenReturn(em);

        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.removeCommentsToException(any(), any(), anyString())).thenThrow(new RuntimeException("Update error"));

        List<ActionUpdateResult> results = valuationActionService.removeComment(requests, "username");

        assertEquals(1, results.size());
        assertTrue(results.get(0).getError().contains("Update error"));
    }

    // Test for updateExceptionStatus with mixed validations
    @Test
    public void testUpdateExceptionStatus_MixedValidations() {
        UpdateExceptionStatusRequest req1 = new UpdateExceptionStatusRequest();
        req1.setDocumentId(new ActionDocumentId("key1", 1L));
        UpdateExceptionStatusRequest req2 = new UpdateExceptionStatusRequest();
        req2.setDocumentId(new ActionDocumentId("key2", 1L));
        List<UpdateExceptionStatusRequest> requests = Arrays.asList(req1, req2);

        ValuationReportDocument doc1 = mock(ValuationReportDocument.class);
        ValuationReport report1 = mock(ValuationReport.class);
        ExceptionManagement em1 = mock(ExceptionManagement.class);
        when(doc1.getDocumentId()).thenReturn(DocumentId.from("key1", 1L));
        when(doc1.getValuationReport()).thenReturn(report1);
        when(report1.getExceptionManagement()).thenReturn(em1);

        ValuationReportDocument doc2 = mock(ValuationReportDocument.class);
        ValuationReport report2 = mock(ValuationReport.class);
        ExceptionManagement em2 = mock(ExceptionManagement.class);
        when(doc2.getDocumentId()).thenReturn(DocumentId.from("key2", 1L));
        when(doc2.getValuationReport()).thenReturn(report2);
        when(report2.getExceptionManagement()).thenReturn(em2);

        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Arrays.asList(doc1, doc2));
        when(requestValidator.validateExceptionStatus(any())).thenReturn(false);
        when(requestValidator.validateUser(eq("username"), eq(em1))).thenReturn(false);
        when(requestValidator.validateUser(eq("username"), eq(em2))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.validateExceptionStatus(any(), any())).thenReturn(true);
        when(requestValidator.validateApprover(any(), any(), any(), any())).thenReturn(false);
        when(dataUpdater.addExceptionStatus(any(), any(), any(), anyString())).thenReturn(em2);
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(
            WriteResult.success(DocumentId.from("key2", 2L), report2)
        ));

        List<ActionUpdateResult> results = valuationActionService.updateExceptionStatus(requests, ExceptionStatus.Edit_Requested, "username");

        assertEquals(2, results.size());
        assertTrue(results.get(0).getError().contains(ActionRequestValidator.USER_VALIDATION_ERROR));
        assertTrue(results.get(1).isSuccess());
    }

    // Test for updateExceptionStatus when validateApprover fails
    @Test
    public void testUpdateExceptionStatus_ApproverValidationFailure() {
        UpdateExceptionStatusRequest request = new UpdateExceptionStatusRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<UpdateExceptionStatusRequest> requests = Collections.singletonList(request);

        ValuationReportDocument doc = mock(ValuationReportDocument.class);
        ValuationReport report = mock(ValuationReport.class);
        ExceptionManagement em = mock(ExceptionManagement.class);
        when(doc.getDocumentId()).thenReturn(DocumentId.from("key", 1L));
        when(doc.getValuationReport()).thenReturn(report);
        when(report.getExceptionManagement()).thenReturn(em);

        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        when(requestValidator.validateExceptionStatus(any())).thenReturn(false);
        when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.validateExceptionStatus(any(), any())).thenReturn(true);
        when(requestValidator.validateApprover(any(), any(), any(), any())).thenReturn(true);

        List<ActionUpdateResult> results = valuationActionService.updateExceptionStatus(requests, ExceptionStatus.Edit_Requested, "username");

        assertEquals(1, results.size());
        assertTrue(results.get(0).getError().contains(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR));
    }

    // Test for performResetAction when reset is not allowed
    @Test
    public void testPerformResetAction_NotAllowed() {
        UpdateExceptionStatusRequest request = new UpdateExceptionStatusRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<UpdateExceptionStatusRequest> requests = Collections.singletonList(request);

        ValuationReportDocument doc = mock(ValuationReportDocument.class);
        ValuationReport report = mock(ValuationReport.class);
        ExceptionManagement em = mock(ExceptionManagement.class);
        when(doc.getDocumentId()).thenReturn(DocumentId.from("key", 1L));
        when(doc.getValuationReport()).thenReturn(report);
        when(report.getExceptionManagement()).thenReturn(em);

        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        when(requestValidator.validateResetActionApprovalStatus(any(), any())).thenReturn(false);

        List<ActionUpdateResult> results = valuationActionService.performResetAction(requests, "username");

        assertEquals(1, results.size());
        assertTrue(results.get(0).getError().contains(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR));
    }

    // Test for assignExceptionToUser when approval status validation fails
    @Test
    public void testAssignExceptionToUser_ApprovalStatusFailure() {
        AssignTradeRequest request = new AssignTradeRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<AssignTradeRequest> requests = Collections.singletonList(request);

        ValuationReportDocument doc = mock(ValuationReportDocument.class);
        ValuationReport report = mock(ValuationReport.class);
        ExceptionManagement em = mock(ExceptionManagement.class);
        when(doc.getDocumentId()).thenReturn(DocumentId.from("key", 1L));
        when(doc.getValuationReport()).thenReturn(report);
        when(report.getExceptionManagement()).thenReturn(em);

        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        when(requestValidator.validateApprovalStatus(any())).thenReturn(true);

        List<ActionUpdateResult> results = valuationActionService.assignExceptionToUser(requests, "username");

        assertEquals(1, results.size());
        assertTrue(results.get(0).getError().contains(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR));
    }

    // Test for addJiraId when dataUpdater throws an exception
    @Test
    public void testAddJiraId_DataUpdaterThrowsException() {
        AddTradeJiraReferenceRequest request = new AddTradeJiraReferenceRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<AddTradeJiraReferenceRequest> requests = Collections.singletonList(request);

        ValuationReportDocument doc = mock(ValuationReportDocument.class);
        ValuationReport report = mock(ValuationReport.class);
        ExceptionManagement em = mock(ExceptionManagement.class);
        when(doc.getDocumentId()).thenReturn(DocumentId.from("key", 1L));
        when(doc.getValuationReport()).thenReturn(report);
        when(report.getExceptionManagement()).thenReturn(em);

        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.isJiraIdPresent(any(), anyString())).thenReturn(false);
        when(dataUpdater.addJiraIdToException(any(), any(), anyString())).thenThrow(new RuntimeException("Jira error"));

        List<ActionUpdateResult> results = valuationActionService.addJiraId(requests, "username");

        assertEquals(1, results.size());
        assertTrue(results.get(0).getError().contains("Jira error"));
    }

    // Test for removeJiraId when removal succeeds
    @Test
    public void testRemoveJiraId_Success() {
        AddTradeJiraReferenceRequest request = new AddTradeJiraReferenceRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<AddTradeJiraReferenceRequest> requests = Collections.singletonList(request);

        ValuationReportDocument doc = mock(ValuationReportDocument.class);
        ValuationReport report = mock(ValuationReport.class);
        ExceptionManagement em = mock(ExceptionManagement.class);
        when(doc.getDocumentId()).thenReturn(DocumentId.from("key", 1L));
        when(doc.getValuationReport()).thenReturn(report);
        when(report.getExceptionManagement()).thenReturn(em);

        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.isJiraIdPresent(any(), anyString())).thenReturn(true);
        when(dataUpdater.removeJiraIdFromException(any(), any(), anyString())).thenReturn(em);
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(
            WriteResult.success(DocumentId.from("key", 2L), report)
        ));

        List<ActionUpdateResult> results = valuationActionService.removeJiraId(requests, "username");

        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    // Test for addJiraType when dataUpdater throws an exception
    @Test
    public void testAddJiraType_DataUpdaterThrowsException() {
        AddTradeJiraTypeRequest request = new AddTradeJiraTypeRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<AddTradeJiraTypeRequest> requests = Collections.singletonList(request);

        ValuationReportDocument doc = mock(ValuationReportDocument.class);
        ValuationReport report = mock(ValuationReport.class);
        ExceptionManagement em = mock(ExceptionManagement.class);
        when(doc.getDocumentId()).thenReturn(DocumentId.from("key", 1L));
        when(doc.getValuationReport()).thenReturn(report);
        when(report.getExceptionManagement()).thenReturn(em);

        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.addJiraTypeToException(any(), any(), anyString())).thenThrow(new RuntimeException("Jira type error"));

        List<ActionUpdateResult> results = valuationActionService.addJiraType(requests, "username");

        assertEquals(1, results.size());
        assertTrue(results.get(0).getError().contains("Jira type error"));
    }

    // Test for updateEditedFields when edit succeeds
    @Test
    public void testUpdateEditedFields_Success() {
        EditRequest request = new EditRequest();
        request.setDocumentId(new ActionDocumentId("key", 1L));
        List<EditRequest> requests = Collections.singletonList(request);

        ValuationReportDocument doc = mock(ValuationReportDocument.class);
        ValuationReport report = mock(ValuationReport.class);
        ExceptionManagement em = mock(ExceptionManagement.class);
        when(doc.getDocumentId()).thenReturn(DocumentId.from("key", 1L));
        when(doc.getValuationReport()).thenReturn(report);
        when(report.getExceptionManagement()).thenReturn(em);

        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.updateTradeReportData(any(), any(), anyString(), any())).thenReturn(report);
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(
            WriteResult.success(DocumentId.from("key", 2L), report)
        ));

        List<ActionUpdateResult> results = valuationActionService.updateEditedFields(requests, "username", ExceptionStatus.Edit_Requested);

        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    // Test for rollBackRejectedRecords using reflection
    @Test
    public void testRollBackRejectedRecords() throws Exception {
        UpdateExceptionStatusRequest request = new UpdateExceptionStatusRequest();
        request.setDocumentId(new ActionDocumentId("key", 3L));
        Map<DocumentId, UpdateRequest> tradeRequestMap = Collections.singletonMap(
            DocumentId.from("key", 3L), request
        );

        ValuationReportDocument prevDoc = mock(ValuationReportDocument.class);
        ValuationReport prevReport = mock(ValuationReport.class);
        when(prevDoc.getDocumentId()).thenReturn(DocumentId.from("key", 1L));
        when(prevDoc.getValuationReport()).thenReturn(prevReport);

        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(prevDoc));
        when(dfTradePersistManager.upsertAllRecords(anyList())).thenReturn(Collections.singletonList(
            WriteResult.success(DocumentId.from("key", 1L), prevReport)
        ));

        Method method = ValuationActionService.class.getDeclaredMethod("rollBackRejectedRecords", Map.class);
        method.setAccessible(true);
        List<ActionUpdateResult> results = (List<ActionUpdateResult>) method.invoke(valuationActionService, tradeRequestMap);

        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    // Test for getResult with null writeResults
    @Test
    public void testGetResult_NullWriteResults() throws Exception {
        ValuationReportDocument doc = mock(ValuationReportDocument.class);
        when(doc.getDocumentId()).thenReturn(DocumentId.from("key", 1L));
        List<ValuationReportDocument> docs = Collections.singletonList(doc);

        Method method = ValuationActionService.class.getDeclaredMethod("getResult", List.class, List.class);
        method.setAccessible(true);
        List<ActionUpdateResult> results = (List<ActionUpdateResult>) method.invoke(valuationActionService, docs, null);

        assertTrue(results.isEmpty());
    }

    // Test for addCommentType when empty requests
    @Test
    public void testAddCommentType_EmptyRequests() {
        List<AddTradeCommentTypeRequest> requests = Collections.emptyList();
        List<ActionUpdateResult> results = valuationActionService.addCommentType(requests, "username");
        assertTrue(results.isEmpty());
    }

    // Test for removeCommentType when empty requests
    @Test
    public void testRemoveCommentType_EmptyRequests() {
        List<AddTradeCommentTypeRequest> requests = Collections.emptyList();
        List<ActionUpdateResult> results = valuationActionService.removeCommentType(requests, "username");
        assertTrue(results.isEmpty());
    }

    // Test for addJiraType when empty requests
    @Test
    public void testAddJiraType_EmptyRequests() {
        List<AddTradeJiraTypeRequest> requests = Collections.emptyList();
        List<ActionUpdateResult> results = valuationActionService.addJiraType(requests, "username");
        assertTrue(results.isEmpty());
    }

    // Test for removeJiraType when empty requests
    @Test
    public void testRemoveJiraType_EmptyRequests() {
        List<AddTradeJiraTypeRequest> requests = Collections.emptyList();
        List<ActionUpdateResult> results = valuationActionService.removeJiraType(requests, "username");
        assertTrue(results.isEmpty());
    }

    // Test for updateUserActionType when empty requests
    @Test
    public void testUpdateUserActionType_EmptyRequests() {
        List<UpdateUserActionTypeRequest> requests = Collections.emptyList();
        List<ActionUpdateResult> results = valuationActionService.updateUserActionType(requests, "username");
        assertTrue(results.isEmpty());
    }

    // Test for performResetAction when empty requests
    @Test
    public void testPerformResetAction_EmptyRequests() {
        List<UpdateExceptionStatusRequest> requests = Collections.emptyList();
        List<ActionUpdateResult> results = valuationActionService.performResetAction(requests, "username");
        assertTrue(results.isEmpty());
    }

    // Test for updateEditedFields when empty requests
    @Test
    public void testUpdateEditedFields_EmptyRequests() {
        List<EditRequest> requests = Collections.emptyList();
        List<ActionUpdateResult> results = valuationActionService.updateEditedFields(requests, "username", ExceptionStatus.Edit_Requested);
        assertTrue(results.isEmpty());
    }

    // Test for updateExceptionStatus when empty requests
    @Test
    public void testUpdateExceptionStatus_EmptyRequests() {
        List<UpdateExceptionStatusRequest> requests = Collections.emptyList();
        List<ActionUpdateResult> results = valuationActionService.updateExceptionStatus(requests, ExceptionStatus.Edit_Requested, "username");
        assertTrue(results.isEmpty());
    }

    // Test for removeJiraId when empty requests
    @Test
    public void testRemoveJiraId_EmptyRequests() {
        List<AddTradeJiraReferenceRequest> requests = Collections.emptyList();
        List<ActionUpdateResult> results = valuationActionService.removeJiraId(requests, "username");
        assertTrue(results.isEmpty());
    }

@Test
public void testAddComment_Exception() {
    List<AddTradeCommentRequest> requests = Collections.singletonList(new AddTradeCommentRequest());
    when(dfTradePersistManager.getAllRecordsById(anyList())).thenThrow(new RuntimeException("DB Error"));
    
    List<ActionUpdateResult> results = valuationActionService.addComment(requests, "username");
    
    assertEquals(1, results.size());
    assertTrue(results.get(0).getError().contains("DB Error"));
}

@Test
public void testGetTradeWithComments_ApprovalStatusFailure() {
    // Setup
    AddTradeCommentRequest request = new AddTradeCommentRequest();
    request.setDocumentId(new ActionDocumentId("key", 1L));
    List<AddTradeCommentRequest> requests = Collections.singletonList(request);
    
    ValuationReportDocument doc = mock(ValuationReportDocument.class);
    when(doc.getDocumentId()).thenReturn(DocumentId.from("key", 1L));
    ValuationReport report = mock(ValuationReport.class);
    ExceptionManagement em = mock(ExceptionManagement.class);
    when(report.getExceptionManagement()).thenReturn(em);
    when(doc.getValuationReport()).thenReturn(report);
    
    when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
    when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
    when(requestValidator.validateApprovalStatus(any())).thenReturn(true); // Triggers failure
    
    // Execute
    List<ActionUpdateResult> results = valuationActionService.addComment(requests, "username");
    
    // Verify
    assertEquals(1, results.size());
    assertTrue(results.get(0).getError().contains(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR));
}

@Test
public void testUpdateEditedFields_EmptyRequests() {
    List<EditRequest> requests = new ArrayList<>();
    List<ActionUpdateResult> results = valuationActionService.updateEditedFields(requests, "username", ExceptionStatus.Edit_Requested);
    assertTrue(results.isEmpty());
}

@Test
public void testUpdateExceptionStatus_RollbackOnEditRejected() {
    // Setup Edit_Rejected status
    UpdateExceptionStatusRequest request = new UpdateExceptionStatusRequest();
    request.setDocumentId(new ActionDocumentId("key", 1L));
    List<UpdateExceptionStatusRequest> requests = Collections.singletonList(request);
    
    ValuationReportDocument doc = mock(ValuationReportDocument.class);
    when(doc.getDocumentId()).thenReturn(DocumentId.from("key", 1L));
    ValuationReport report = mock(ValuationReport.class);
    when(report.getValuationReportId()).thenReturn(mock(ValuationReport.ValuationReportId.class));
    ExceptionManagement em = mock(ExceptionManagement.class);
    when(em.getApprovalStatus()).thenReturn(ExceptionStatus.Edit_Requested);
    when(report.getExceptionManagement()).thenReturn(em);
    when(doc.getValuationReport()).thenReturn(report);
    
    when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
    when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
    when(requestValidator.validateExceptionStatus(any(), any())).thenReturn(true);
    when(dataUpdater.addExceptionStatus(any(), any(), any(), anyString())).thenReturn(em);
    
    // Execute with Edit_Rejected
    List<ActionUpdateResult> results = valuationActionService.updateExceptionStatus(
        requests, ExceptionStatus.Edit_Rejected, "username"
    );
    
    // Verify rollback was triggered
    verify(dfTradePersistManager, times(1)).upsertAllRecords(anyList());
    assertEquals(1, results.size());
}

@Test
public void testSaveAllRecords_ErrorHandling() throws Exception {
    // Use reflection to test private method
    List<ValuationReportDocument> docs = new ArrayList<>();
    ValuationReportDocument doc = mock(ValuationReportDocument.class);
    DocumentId docId = DocumentId.from("key", 1L);
    when(doc.getDocumentId()).thenReturn(docId);
    docs.add(doc);
    
    List<WriteResult<ValuationReport>> writeResults = new ArrayList<>();
    WriteResult<ValuationReport> errorResult = mock(WriteResult.class);
    when(errorResult.isSuccess()).thenReturn(false);
    when(errorResult.getErrorDetail()).thenReturn(new WriteResult.ErrorDetail("DB Error", new RuntimeException("Cause")));
    writeResults.add(errorResult);
    
    when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(writeResults);
    
    // Invoke private method via reflection
    Method saveAllRecords = ValuationActionService.class.getDeclaredMethod("saveAllRecords", List.class, List.class);
    saveAllRecords.setAccessible(true);
    List<ActionUpdateResult> results = (List<ActionUpdateResult>) saveAllRecords.invoke(
        valuationActionService, docs, Collections.singletonList(Pair.of(mock(ValuationReport.class), 1L))
    );
    
    // Verify error handling
    assertEquals(1, results.size());
    assertTrue(results.get(0).getError().contains("DB Error"));
}

@Test
public void testUpdateExceptionStatus_ValidationFailures() {
    // Setup invalid status
    UpdateExceptionStatusRequest request = new UpdateExceptionStatusRequest();
    request.setDocumentId(new ActionDocumentId("key", 1L));
    List<UpdateExceptionStatusRequest> requests = Collections.singletonList(request);
    
    when(requestValidator.validateExceptionStatus(any())).thenReturn(true); // Invalid status
    
    List<ActionUpdateResult> results = valuationActionService.updateExceptionStatus(
        requests, ExceptionStatus.Edit_Requested, "username"
    );
    
    assertTrue(results.isEmpty());
}

@Test
public void testUpdateUserActionType_Exception() {
    UpdateUserActionTypeRequest request = new UpdateUserActionTypeRequest();
    request.setDocumentId(new ActionDocumentId("key", 1L));
    List<UpdateUserActionTypeRequest> requests = Collections.singletonList(request);
    
    when(dfTradePersistManager.getAllRecordsById(anyList())).thenThrow(new RuntimeException("DB Error"));
    
    List<ActionUpdateResult> results = valuationActionService.updateUserActionType(requests, "username");
    assertEquals(1, results.size());
    assertTrue(results.get(0).getError().contains("DB Error"));
}

@Test
public void testAddJiraType_EmptyRequests() {
    List<AddTradeJiraTypeRequest> requests = new ArrayList<>();
    List<ActionUpdateResult> results = valuationActionService.addJiraType(requests, "username");
    assertTrue(results.isEmpty());
}
