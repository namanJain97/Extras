package com.rbs.tntr.business.blotter.services.actions;

import com.google.common.collect.Lists;
import com.nwm.tntr.commons.domain.persistence.entity.DocumentId;
import com.nwm.tntr.commons.domain.persistence.entity.ExceptionManagement;
import com.nwm.tntr.commons.domain.persistence.entity.NonReportableData;
import com.nwm.tntr.commons.domain.persistence.entity.collaterallink.CollateralLinkReport;
import com.nwm.tntr.commons.domain.persistence.entity.collaterallink.CollateralLinkReportDocument;
import com.nwm.tntr.commons.repository.regreporting.WriteResult;
import com.rbs.tntr.business.blotter.df.manager.DfCollateralLinkPersistManager;
import com.rbs.tntr.business.blotter.df.updater.CollateralLinkDataUpdater;
import com.rbs.tntr.business.blotter.services.validators.ActionRequestValidator;
import com.rbs.tntr.business.blotter.web.request.regreportingTrade.*;
import com.rbs.tntr.domain.blotter.enums.ExceptionStatus;
import com.rbs.tntr.domain.blotter.exceptions.BlotterRunTimeException;
import com.rbs.tntr.domain.blotter.tntrBlotterView.ActionDocumentId;
import com.rbs.tntr.domain.blotter.tntrBlotterView.Comment;
import com.rbs.tntr.domain.blotter.tntrBlotterView.JiraReference;
import com.rbs.tntr.domain.blotter.tntrBlotterView.JiraType;
import org.apache.commons.lang3.tuple.Pair;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.lang.reflect.Method;
import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class CollateralLinkActionServiceTest {

    @InjectMocks
    private CollateralLinkActionService collateralLinkActionService;

    @Mock
    private DfCollateralLinkPersistManager dfCollateralPersistManager;

    @Mock
    private CollateralLinkDataUpdater dataUpdater;

    @Mock
    private ActionRequestValidator requestValidator;

    private static final String USERNAME = "testUser";

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    // Existing Tests (unchanged)
    @Test
    public void testAddComment_EmptyRequests() {
        List<AddTradeCommentRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.addComment(requests, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAddComment_ValidRequest() {
        List<AddTradeCommentRequest> requests = setupValidCommentRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();

        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.addCommentsToException(any(), any(), eq(USERNAME))).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(CollateralLinkReport.class), DocumentId.from("key1", 1L))));

        List<ActionUpdateResult> results = collateralLinkActionService.addComment(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testAddComment_ExceptionHandling() {
        List<AddTradeCommentRequest> requests = setupValidCommentRequests();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenThrow(new RuntimeException("Database Error"));

        List<ActionUpdateResult> results = collateralLinkActionService.addComment(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals("Error updating collateral record : Database Error", results.get(0).getErrorMessage());
    }

    @Test
    public void testRemoveComment_EmptyRequests() {
        List<AddTradeCommentRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.removeComment(requests, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testRemoveComment_ValidRequest() {
        List<AddTradeCommentRequest> requests = setupValidCommentRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();

        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.removeCommentsToException(any(), any(), eq(USERNAME))).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(CollateralLinkReport.class), DocumentId.from("key1", 1L))));

        List<ActionUpdateResult> results = collateralLinkActionService.removeComment(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testAssignExceptionToUser_EmptyRequests() {
        List<AssignTradeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.assignExceptionToUser(requests, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAddJiraId_EmptyRequests() {
        List<AddTradeJiraReferenceRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.addJiraId(requests, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testRemoveJiraId_ExceptionHandling() {
        List<AddTradeJiraReferenceRequest> requests = setupValidJiraReferenceRequests();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenThrow(new RuntimeException("Error deleting"));

        List<ActionUpdateResult> results = collateralLinkActionService.removeJiraId(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals("Error updating collateral record : Error deleting", results.get(0).getErrorMessage());
    }

    @Test
    public void testAddCommentType_EmptyRequests() {
        List<AddTradeCommentTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.addCommentType(requests, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testRemoveCommentType_EmptyRequests() {
        List<AddTradeCommentTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.removeCommentType(requests, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testUpdateEditedFields_ValidRequest() {
        List<EditRequest> requests = setupValidEditRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.updateTradeReportData(any(), any(), eq(USERNAME), eq(ExceptionStatus.Open))).thenReturn(mock(CollateralLinkReport.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(CollateralLinkReport.class), DocumentId.from("key1", 1L))));

        List<ActionUpdateResult> results = collateralLinkActionService.updateEditedFields(requests, USERNAME, ExceptionStatus.Open);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testUpdateExceptionStatus_InvalidExceptionStatus() {
        List<UpdateExceptionStatusRequest> requests = setupValidUpdateExceptionStatusRequests();
        when(requestValidator.validateExceptionStatus(eq(ExceptionStatus.Open))).thenReturn(true);

        List<ActionUpdateResult> results = collateralLinkActionService.updateExceptionStatus(requests, ExceptionStatus.Open, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testUpdateExceptionStatus_UserValidationFails() {
        List<UpdateExceptionStatusRequest> requests = setupValidUpdateExceptionStatusRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(requestValidator.validateExceptionStatus(eq(ExceptionStatus.Open))).thenReturn(false);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(false);

        List<ActionUpdateResult> results = collateralLinkActionService.updateExceptionStatus(requests, ExceptionStatus.Open, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.USER_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testPerformResetAction_ValidRequest() {
        List<UpdateExceptionStatusRequest> requests = setupValidUpdateExceptionStatusRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateResetActionApprovalStatus(any(), any())).thenReturn(true);
        when(dataUpdater.resetAction(any(), any(), eq(USERNAME))).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(CollateralLinkReport.class), DocumentId.from("key1", 1L))));

        List<ActionUpdateResult> results = collateralLinkActionService.performResetAction(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testAssignExceptionToUser_ValidRequest() {
        List<AssignTradeRequest> requests = setupValidAssignTradeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.assignException(any(), any(), eq(USERNAME))).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(CollateralLinkReport.class), DocumentId.from("key1", 1L))));

        List<ActionUpdateResult> results = collateralLinkActionService.assignExceptionToUser(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testAddJiraId_ValidRequest() {
        List<AddTradeJiraReferenceRequest> requests = setupValidJiraReferenceRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.isJiraIdPresent(any(), any())).thenReturn(false);
        when(dataUpdater.addJiraIdToException(any(), any(), eq(USERNAME))).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(CollateralLinkReport.class), DocumentId.from("key1", 1L))));

        List<ActionUpdateResult> results = collateralLinkActionService.addJiraId(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testRemoveJiraId_EmptyRequests() {
        List<AddTradeJiraReferenceRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.removeJiraId(requests, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAddJiraType_ValidRequest() {
        List<AddTradeJiraTypeRequest> requests = setupValidJiraTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.addJiraTypeToException(any(), any(), eq(USERNAME))).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(CollateralLinkReport.class), DocumentId.from("key1", 1L))));

        List<ActionUpdateResult> results = collateralLinkActionService.addJiraType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testRemoveJiraType_ValidRequest() {
        List<AddTradeJiraTypeRequest> requests = setupValidJiraTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        ExceptionManagement em = mock(ExceptionManagement.class);
        when(documents.get(0).getCollateralLinkReport().getExceptionManagement()).thenReturn(em);
        when(em.getIssueType()).thenReturn(mock(com.nwm.tntr.commons.domain.persistence.entity.IssueType.class));
        when(em.getIssueType().value()).thenReturn("type");
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requests.get(0).getJiraType().getIssueType()).thenReturn("type");
        when(dataUpdater.removeJiraTypeFromException(any(), any(), eq(USERNAME))).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(CollateralLinkReport.class), DocumentId.from("key1", 1L))));

        List<ActionUpdateResult> results = collateralLinkActionService.removeJiraType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testAddCommentType_UserValidationFails() {
        List<AddTradeCommentTypeRequest> requests = setupValidCommentTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(false);

        List<ActionUpdateResult> results = collateralLinkActionService.addCommentType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.USER_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testRemoveCommentType_UserValidationFails() {
        List<AddTradeCommentTypeRequest> requests = setupValidCommentTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(false);

        List<ActionUpdateResult> results = collateralLinkActionService.removeCommentType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.USER_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    // New Tests

    // updateUserActionType Tests
    @Test
    public void testUpdateUserActionType_EmptyRequests() {
        List<UpdateUserActionTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.updateUserActionType(requests, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testUpdateUserActionType_ValidRequest() {
        List<UpdateUserActionTypeRequest> requests = setupValidUpdateUserActionTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(dataUpdater.addComments(any(), eq(USERNAME), anyString(), anyString())).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(CollateralLinkReport.class), DocumentId.from("key1", 1L))));

        List<ActionUpdateResult> results = collateralLinkActionService.updateUserActionType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testUpdateUserActionType_GetAllRecordsByIdThrowsException() {
        List<UpdateUserActionTypeRequest> requests = setupValidUpdateUserActionTypeRequests();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenThrow(new RuntimeException("Database error"));

        List<ActionUpdateResult> results = collateralLinkActionService.updateUserActionType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals("Error updating collateral record : Database error", results.get(0).getErrorMessage());
    }

    @Test
    public void testUpdateUserActionType_AddCommentsThrowsException() {
        List<UpdateUserActionTypeRequest> requests = setupValidUpdateUserActionTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(dataUpdater.addComments(any(), eq(USERNAME), anyString(), anyString())).thenThrow(new RuntimeException("Error adding comments"));

        List<ActionUpdateResult> results = collateralLinkActionService.updateUserActionType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals("Error updating collateral record : Error occured while updating comments in ExceptionManagement. ", results.get(0).getErrorMessage());
    }

    // addCommentType Additional Tests
    @Test
    public void testAddCommentType_ValidRequest() {
        List<AddTradeCommentTypeRequest> requests = setupValidCommentTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.addCommentTypeToException(any(), any(), eq(USERNAME))).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(CollateralLinkReport.class), DocumentId.from("key1", 1L))));

        List<ActionUpdateResult> results = collateralLinkActionService.addCommentType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testAddCommentType_ApprovalStatusValidationFails() {
        List<AddTradeCommentTypeRequest> requests = setupValidCommentTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(true);

        List<ActionUpdateResult> results = collateralLinkActionService.addCommentType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testAddCommentType_AddCommentTypeThrowsException() {
        List<AddTradeCommentTypeRequest> requests = setupValidCommentTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.addCommentTypeToException(any(), any(), eq(USERNAME))).thenThrow(new RuntimeException("Error adding comment type"));

        List<ActionUpdateResult> results = collateralLinkActionService.addCommentType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals("Error updating collateral record : Error occured while updating comments in ExceptionManagement. ", results.get(0).getErrorMessage());
    }

    // removeCommentType Additional Tests
    @Test
    public void testRemoveCommentType_ValidRequest() {
        List<AddTradeCommentTypeRequest> requests = setupValidCommentTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.removeCommentTypeToException(any(), any(), eq(USERNAME))).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(CollateralLinkReport.class), DocumentId.from("key1", 1L))));

        List<ActionUpdateResult> results = collateralLinkActionService.removeCommentType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testRemoveCommentType_ApprovalStatusValidationFails() {
        List<AddTradeCommentTypeRequest> requests = setupValidCommentTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(true);

        List<ActionUpdateResult> results = collateralLinkActionService.removeCommentType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testRemoveCommentType_RemoveCommentTypeThrowsException() {
        List<AddTradeCommentTypeRequest> requests = setupValidCommentTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.removeCommentTypeToException(any(), any(), eq(USERNAME))).thenThrow(new RuntimeException("Error removing comment type"));

        List<ActionUpdateResult> results = collateralLinkActionService.removeCommentType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals("Error updating collateral record : Error occured while updating comments in ExceptionManagement. ", results.get(0).getErrorMessage());
    }

    // updateEditedFields Additional Tests
    @Test
    public void testUpdateEditedFields_ApprovalStatusValidationFails() {
        List<EditRequest> requests = setupValidEditRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(true);

        List<ActionUpdateResult> results = collateralLinkActionService.updateEditedFields(requests, USERNAME, ExceptionStatus.Open);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testUpdateEditedFields_UpdateTradeReportDataThrowsException() {
        List<EditRequest> requests = setupValidEditRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.updateTradeReportData(any(), any(), eq(USERNAME), eq(ExceptionStatus.Open))).thenThrow(new BlotterRunTimeException("Update failed"));

        List<ActionUpdateResult> results = collateralLinkActionService.updateEditedFields(requests, USERNAME, ExceptionStatus.Open);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals("Update failed", results.get(0).getErrorMessage());
    }

    @Test
    public void testUpdateEditedFields_SaveFails() {
        List<EditRequest> requests = setupValidEditRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.updateTradeReportData(any(), any(), eq(USERNAME), eq(ExceptionStatus.Open))).thenReturn(mock(CollateralLinkReport.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.failure(mock(CollateralLinkReport.class), new Exception("Save failed"))));

        List<ActionUpdateResult> results = collateralLinkActionService.updateEditedFields(requests, USERNAME, ExceptionStatus.Open);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getErrorMessage().contains("Save failed"));
    }

    // updateExceptionStatus Additional Tests
    @Test
    public void testUpdateExceptionStatus_EmptyRequests() {
        List<UpdateExceptionStatusRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.updateExceptionStatus(requests, ExceptionStatus.Open, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testUpdateExceptionStatus_ApprovalStatusValidationFails() {
        List<UpdateExceptionStatusRequest> requests = setupValidUpdateExceptionStatusRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(requestValidator.validateExceptionStatus(eq(ExceptionStatus.Open))).thenReturn(false);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(true);

        List<ActionUpdateResult> results = collateralLinkActionService.updateExceptionStatus(requests, ExceptionStatus.Open, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testUpdateExceptionStatus_ExceptionStatusValidationFails() {
        List<UpdateExceptionStatusRequest> requests = setupValidUpdateExceptionStatusRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(requestValidator.validateExceptionStatus(eq(ExceptionStatus.Open))).thenReturn(false);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.validateExceptionStatus(eq(ExceptionStatus.Open), any())).thenReturn(false);

        List<ActionUpdateResult> results = collateralLinkActionService.updateExceptionStatus(requests, ExceptionStatus.Open, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testUpdateExceptionStatus_ApproverValidationFails() {
        List<UpdateExceptionStatusRequest> requests = setupValidUpdateExceptionStatusRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(requestValidator.validateExceptionStatus(eq(ExceptionStatus.Open))).thenReturn(false);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.validateExceptionStatus(eq(ExceptionStatus.Open), any())).thenReturn(true);
        when(requestValidator.validateApprover(eq(ExceptionStatus.Open), anyString(), eq("CollateralLink;"), eq(USERNAME))).thenReturn(true);

        List<ActionUpdateResult> results = collateralLinkActionService.updateExceptionStatus(requests, ExceptionStatus.Open, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testUpdateExceptionStatus_EditRejected() {
        List<UpdateExceptionStatusRequest> requests = setupValidUpdateExceptionStatusRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(requestValidator.validateExceptionStatus(eq(ExceptionStatus.Edit_Rejected))).thenReturn(false);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.validateExceptionStatus(eq(ExceptionStatus.Edit_Rejected), any())).thenReturn(true);
        when(requestValidator.validateApprover(eq(ExceptionStatus.Edit_Rejected), anyString(), eq("CollateralLink;"), eq(USERNAME))).thenReturn(false);
        when(dataUpdater.addExceptionStatus(eq(ExceptionStatus.Edit_Rejected), any(), any(), eq(USERNAME))).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(CollateralLinkReport.class), DocumentId.from("key1", 1L))));
        when(dfCollateralPersistManager.upsertAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(CollateralLinkReport.class), DocumentId.from("key1", 0L))));

        List<ActionUpdateResult> results = collateralLinkActionService.updateExceptionStatus(requests, ExceptionStatus.Edit_Rejected, USERNAME);
        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testUpdateExceptionStatus_AddExceptionStatusThrowsException() {
        List<UpdateExceptionStatusRequest> requests = setupValidUpdateExceptionStatusRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(requestValidator.validateExceptionStatus(eq(ExceptionStatus.Open))).thenReturn(false);
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.validateExceptionStatus(eq(ExceptionStatus.Open), any())).thenReturn(true);
        when(requestValidator.validateApprover(eq(ExceptionStatus.Open), anyString(), eq("CollateralLink;"), eq(USERNAME))).thenReturn(false);
        when(dataUpdater.addExceptionStatus(eq(ExceptionStatus.Open), any(), any(), eq(USERNAME))).thenThrow(new RuntimeException("Error adding status"));

        List<ActionUpdateResult> results = collateralLinkActionService.updateExceptionStatus(requests, ExceptionStatus.Open, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals("Error updating collateral record : Error occured while updating exception status in ExceptionManagement. ", results.get(0).getErrorMessage());
    }

    // performResetAction Additional Tests
    @Test
    public void testPerformResetAction_EmptyRequests() {
        List<UpdateExceptionStatusRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.performResetAction(requests, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testPerformResetAction_ValidationFails() {
        List<UpdateExceptionStatusRequest> requests = setupValidUpdateExceptionStatusRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateResetActionApprovalStatus(any(), anyString())).thenReturn(false);

        List<ActionUpdateResult> results = collateralLinkActionService.performResetAction(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testPerformResetAction_ResetActionThrowsException() {
        List<UpdateExceptionStatusRequest> requests = setupValidUpdateExceptionStatusRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateResetActionApprovalStatus(any(), anyString())).thenReturn(true);
        when(dataUpdater.resetAction(any(), any(), eq(USERNAME))).thenThrow(new RuntimeException("Error resetting"));

        List<ActionUpdateResult> results = collateralLinkActionService.performResetAction(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals("Error updating collateral record : Error occured while updating exception status in ExceptionManagement. ", results.get(0).getErrorMessage());
    }

    // assignExceptionToUser Additional Tests
    @Test
    public void testAssignExceptionToUser_ApprovalStatusValidationFails() {
        List<AssignTradeRequest> requests = setupValidAssignTradeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(true);

        List<ActionUpdateResult> results = collateralLinkActionService.assignExceptionToUser(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testAssignExceptionToUser_AssignExceptionThrowsException() {
        List<AssignTradeRequest> requests = setupValidAssignTradeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.assignException(any(), any(), eq(USERNAME))).thenThrow(new RuntimeException("Error assigning"));

        List<ActionUpdateResult> results = collateralLinkActionService.assignExceptionToUser(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals("Error updating collateral record : Error occured while updating assign user in ExceptionManagement. ", results.get(0).getErrorMessage());
    }

    // addJiraId Additional Tests
    @Test
    public void testAddJiraId_UserValidationFails() {
        List<AddTradeJiraReferenceRequest> requests = setupValidJiraReferenceRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(false);

        List<ActionUpdateResult> results = collateralLinkActionService.addJiraId(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.USER_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testAddJiraId_ApprovalStatusValidationFails() {
        List<AddTradeJiraReferenceRequest> requests = setupValidJiraReferenceRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(true);

        List<ActionUpdateResult> results = collateralLinkActionService.addJiraId(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testAddJiraId_JiraIdAlreadyPresent() {
        List<AddTradeJiraReferenceRequest> requests = setupValidJiraReferenceRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.isJiraIdPresent(any(), anyString())).thenReturn(true);

        List<ActionUpdateResult> results = collateralLinkActionService.addJiraId(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.JIRA_ID_PRESENT, results.get(0).getErrorMessage());
    }

    @Test
    public void testAddJiraId_AddJiraIdThrowsException() {
        List<AddTradeJiraReferenceRequest> requests = setupValidJiraReferenceRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.isJiraIdPresent(any(), anyString())).thenReturn(false);
        when(dataUpdater.addJiraIdToException(any(), any(), eq(USERNAME))).thenThrow(new RuntimeException("Error adding Jira ID"));

        List<ActionUpdateResult> results = collateralLinkActionService.addJiraId(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals("Error updating collateral record : Error occured while adding jira id in ExceptionManagement. ", results.get(0).getErrorMessage());
    }

    // removeJiraId Additional Tests
    @Test
    public void testRemoveJiraId_UserValidationFails() {
        List<AddTradeJiraReferenceRequest> requests = setupValidJiraReferenceRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(false);

        List<ActionUpdateResult> results = collateralLinkActionService.removeJiraId(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.USER_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testRemoveJiraId_ApprovalStatusValidationFails() {
        List<AddTradeJiraReferenceRequest> requests = setupValidJiraReferenceRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(true);

        List<ActionUpdateResult> results = collateralLinkActionService.removeJiraId(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testRemoveJiraId_JiraIdNotPresent() {
        List<AddTradeJiraReferenceRequest> requests = setupValidJiraReferenceRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.isJiraIdPresent(any(), anyString())).thenReturn(false);

        List<ActionUpdateResult> results = collateralLinkActionService.removeJiraId(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.JIRA_ID_NOT_PRESENT, results.get(0).getErrorMessage());
    }

    @Test
    public void testRemoveJiraId_RemoveJiraIdThrowsException() {
        List<AddTradeJiraReferenceRequest> requests = setupValidJiraReferenceRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.isJiraIdPresent(any(), anyString())).thenReturn(true);
        when(dataUpdater.removeJiraIdFromException(any(), any(), eq(USERNAME))).thenThrow(new RuntimeException("Error removing Jira ID"));

        List<ActionUpdateResult> results = collateralLinkActionService.removeJiraId(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals("Error updating collateral record : Error occured while removing jira id from ExceptionManagement. ", results.get(0).getErrorMessage());
    }

    // addJiraType Additional Tests
    @Test
    public void testAddJiraType_EmptyRequests() {
        List<AddTradeJiraTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.addJiraType(requests, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAddJiraType_UserValidationFails() {
        List<AddTradeJiraTypeRequest> requests = setupValidJiraTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(false);

        List<ActionUpdateResult> results = collateralLinkActionService.addJiraType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.USER_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testAddJiraType_ApprovalStatusValidationFails() {
        List<AddTradeJiraTypeRequest> requests = setupValidJiraTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(true);

        List<ActionUpdateResult> results = collateralLinkActionService.addJiraType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testAddJiraType_AddJiraTypeThrowsException() {
        List<AddTradeJiraTypeRequest> requests = setupValidJiraTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.addJiraTypeToException(any(), any(), eq(USERNAME))).thenThrow(new RuntimeException("Error adding Jira type"));

        List<ActionUpdateResult> results = collateralLinkActionService.addJiraType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals("Error updating collateral record : Error occured while adding jira type in ExceptionManagement. ", results.get(0).getErrorMessage());
    }

    // removeJiraType Additional Tests
    @Test
    public void testRemoveJiraType_EmptyRequests() {
        List<AddTradeJiraTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = collateralLinkActionService.removeJiraType(requests, USERNAME);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testRemoveJiraType_UserValidationFails() {
        List<AddTradeJiraTypeRequest> requests = setupValidJiraTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(false);

        List<ActionUpdateResult> results = collateralLinkActionService.removeJiraType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.USER_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testRemoveJiraType_ApprovalStatusValidationFails() {
        List<AddTradeJiraTypeRequest> requests = setupValidJiraTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(true);

        List<ActionUpdateResult> results = collateralLinkActionService.removeJiraType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testRemoveJiraType_JiraTypeNotPresent() {
        List<AddTradeJiraTypeRequest> requests = setupValidJiraTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        ExceptionManagement em = mock(ExceptionManagement.class);
        when(documents.get(0).getCollateralLinkReport().getExceptionManagement()).thenReturn(em);
        when(em.getIssueType()).thenReturn(mock(com.nwm.tntr.commons.domain.persistence.entity.IssueType.class));
        when(em.getIssueType().value()).thenReturn("differentType");
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requests.get(0).getJiraType().getIssueType()).thenReturn("type");

        List<ActionUpdateResult> results = collateralLinkActionService.removeJiraType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.JIRA_TYPE_NOT_PRESENT, results.get(0).getErrorMessage());
    }

    @Test
    public void testRemoveJiraType_RemoveJiraTypeThrowsException() {
        List<AddTradeJiraTypeRequest> requests = setupValidJiraTypeRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        ExceptionManagement em = mock(ExceptionManagement.class);
        when(documents.get(0).getCollateralLinkReport().getExceptionManagement()).thenReturn(em);
        when(em.getIssueType()).thenReturn(mock(com.nwm.tntr.commons.domain.persistence.entity.IssueType.class));
        when(em.getIssueType().value()).thenReturn("type");
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requests.get(0).getJiraType().getIssueType()).thenReturn("type");
        when(dataUpdater.removeJiraTypeFromException(any(), any(), eq(USERNAME))).thenThrow(new RuntimeException("Error removing Jira type"));

        List<ActionUpdateResult> results = collateralLinkActionService.removeJiraType(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals("Error updating collateral record : Error occured while removing jira type from ExceptionManagement. ", results.get(0).getErrorMessage());
    }

    // addComment Additional Tests
    @Test
    public void testAddComment_UserValidationFails() {
        List<AddTradeCommentRequest> requests = setupValidCommentRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(false);

        List<ActionUpdateResult> results = collateralLinkActionService.addComment(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.USER_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testAddComment_ApprovalStatusValidationFails() {
        List<AddTradeCommentRequest> requests = setupValidCommentRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(true);

        List<ActionUpdateResult> results = collateralLinkActionService.addComment(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testAddComment_SaveFails() {
        List<AddTradeCommentRequest> requests = setupValidCommentRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.addCommentsToException(any(), any(), eq(USERNAME))).thenReturn(mock(ExceptionManagement.class));
        when(dfCollateralPersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.failure(mock(CollateralLinkReport.class), new Exception("Save failed"))));

        List<ActionUpdateResult> results = collateralLinkActionService.addComment(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getErrorMessage().contains("Save failed"));
    }

    // removeComment Additional Tests
    @Test
    public void testRemoveComment_UserValidationFails() {
        List<AddTradeCommentRequest> requests = setupValidCommentRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(false);

        List<ActionUpdateResult> results = collateralLinkActionService.removeComment(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.USER_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    @Test
    public void testRemoveComment_ApprovalStatusValidationFails() {
        List<AddTradeCommentRequest> requests = setupValidCommentRequests();
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(requestValidator.validateUser(eq(USERNAME), any(ExceptionManagement.class))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(true);

        List<ActionUpdateResult> results = collateralLinkActionService.removeComment(requests, USERNAME);
        assertFalse(results.isEmpty());
        assertFalse(results.get(0).isSuccess());
        assertEquals(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR, results.get(0).getErrorMessage());
    }

    // Private Method Tests via Reflection
    @Test
    public void testGetResult_SuccessAndFailure() throws Exception {
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(documents.get(0).getDocumentId()).thenReturn(DocumentId.from("key1", 1L));
        List<WriteResult<CollateralLinkReport>> writeResults = Lists.newArrayList(
            WriteResult.success(mock(CollateralLinkReport.class), DocumentId.from("key1", 2L)),
            WriteResult.failure(mock(CollateralLinkReport.class), new Exception("Save failed"))
        );

        Method getResultMethod = CollateralLinkActionService.class.getDeclaredMethod("getResult", List.class, List.class);
        getResultMethod.setAccessible(true);
        List<ActionUpdateResult> results = (List<ActionUpdateResult>) getResultMethod.invoke(collateralLinkActionService, documents, writeResults);

        assertEquals(2, results.size());
        assertTrue(results.get(0).isSuccess());
        assertFalse(results.get(1).isSuccess());
        assertTrue(results.get(1).getErrorMessage().contains("Save failed"));
    }

    @Test
    public void testRollBackRejectedRecords() throws Exception {
        Map<DocumentId, UpdateRequest> tradeRequestMap = new HashMap<>();
        tradeRequestMap.put(DocumentId.from("key1", 2L), mock(UpdateRequest.class));
        List<CollateralLinkReportDocument> documents = setupValidCollateralLinkDocuments();
        when(documents.get(0).getDocumentId()).thenReturn(DocumentId.from("key1", 0L));
        when(dfCollateralPersistManager.getAllRecordsById(anyList())).thenReturn(documents);
        when(dfCollateralPersistManager.upsertAllRecords(anyList())).thenReturn(Collections.singletonList(WriteResult.success(mock(CollateralLinkReport.class), DocumentId.from("key1", 0L))));

        Method rollBackMethod = CollateralLinkActionService.class.getDeclaredMethod("rollBackRejectedRecords", Map.class);
        rollBackMethod.setAccessible(true);
        List<ActionUpdateResult> results = (List<ActionUpdateResult>) rollBackMethod.invoke(collateralLinkActionService, tradeRequestMap);

        assertFalse(results.isEmpty());
        assertTrue(results.get(0).isSuccess());
    }

    // Helper Methods
    private List<AddTradeCommentRequest> setupValidCommentRequests() {
        AddTradeCommentRequest request = mock(AddTradeCommentRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        return Collections.singletonList(request);
    }

    private List<CollateralLinkReportDocument> setupValidCollateralLinkDocuments() {
        CollateralLinkReportDocument document = mock(CollateralLinkReportDocument.class);
        CollateralLinkReport report = mock(CollateralLinkReport.class);
        ExceptionManagement em = mock(ExceptionManagement.class);
        NonReportableData nrd = mock(NonReportableData.class);
        when(document.getCollateralLinkReport()).thenReturn(report);
        when(document.getDocumentId()).thenReturn(DocumentId.from("key1", 1L));
        when(report.getExceptionManagement()).thenReturn(em);
        when(report.getNonReportableData()).thenReturn(nrd);
        when(report.getCollateralLinkReportId()).thenReturn(mock(com.nwm.tntr.commons.domain.persistence.entity.collaterallink.CollateralLinkReportId.class));
        when(report.getCollateralLinkReportId().getTradeSourceSystemTransactionId()).thenReturn("tradeId");
        return Collections.singletonList(document);
    }

    private List<EditRequest> setupValidEditRequests() {
        EditRequest request = mock(EditRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        return Collections.singletonList(request);
    }

    private List<AddTradeJiraReferenceRequest> setupValidJiraReferenceRequests() {
        AddTradeJiraReferenceRequest request = mock(AddTradeJiraReferenceRequest.class);
        JiraReference jiraRef = mock(JiraReference.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getJiraReference()).thenReturn(jiraRef);
        when(jiraRef.getJiraId()).thenReturn("JIRA-123");
        return Collections.singletonList(request);
    }

    private List<UpdateExceptionStatusRequest> setupValidUpdateExceptionStatusRequests() {
        UpdateExceptionStatusRequest request = mock(UpdateExceptionStatusRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getFlow()).thenReturn("flow");
        return Collections.singletonList(request);
    }

    private List<AssignTradeRequest> setupValidAssignTradeRequests() {
        AssignTradeRequest request = mock(AssignTradeRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        return Collections.singletonList(request);
    }

    private List<AddTradeJiraTypeRequest> setupValidJiraTypeRequests() {
        AddTradeJiraTypeRequest request = mock(AddTradeJiraTypeRequest.class);
        JiraType jiraType = mock(JiraType.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getJiraType()).thenReturn(jiraType);
        when(jiraType.getIssueType()).thenReturn("type");
        return Collections.singletonList(request);
    }

    private List<AddTradeCommentTypeRequest> setupValidCommentTypeRequests() {
        AddTradeCommentTypeRequest request = mock(AddTradeCommentTypeRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        return Collections.singletonList(request);
    }

    private List<UpdateUserActionTypeRequest> setupValidUpdateUserActionTypeRequests() {
        UpdateUserActionTypeRequest request = mock(UpdateUserActionTypeRequest.class);
        Comment comment = mock(Comment.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getComment()).thenReturn(comment);
        when(comment.getComment()).thenReturn("comment");
        when(request.getAction()).thenReturn("action");
        when(request.getUserActionType()).thenReturn("type");
        return Collections.singletonList(request);
    }
}
