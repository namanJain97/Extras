package com.rbs.tntr.business.taggingService.service.jiraAssignment;

import static org.mockito.Mockito.; import static org.junit.Assert.;

import java.lang.reflect.Method; import java.util.Arrays; import java.util.Date; import java.util.List;

import com.nwm.tntr.commons.domain.JiraReference; import com.nwm.tntr.commons.repository.domain.TntrRepositoryUpdateCommandResult; import com.rbs.datafabric.api.exception.InsertException; import com.rbs.datafabric.api.exception.OptimisticLockException; import com.rbs.datafabric.api.exception.UpsertException; import com.rbs.datafabric.common.DataFabricSerializerException; import com.rbs.datafabric.agile.commons.lang.StartableException; import com.rbs.datafabric.domain.RecordId; import com.rbs.tntr.api.taggingService.service.jiraAssignement.JiraAssignmentReader; import com.rbs.tntr.api.taggingService.service.jiraAssignement.TntrTradeTransformer; import com.rbs.tntr.business.taggingService.configuration.TaggingServiceQueryConfiguration; import com.rbs.tntr.business.taggingService.service.common.TaggingServiceRepository; import com.rbs.tntr.domain.taggingService.jiraTaggingDomain.common.JiraAssignmentDao; import com.rbs.tntr.domain.taggingService.jiraTaggingDomain.common.TaggingServiceResult; import com.rbs.tntr.domain.taggingService.jiraTaggingDomain.enums.FlowType; import com.rbs.tntr.domain.taggingService.jiraTaggingDomain.exceptions.TaggingServiceRunTimeException; import com.rbs.tntr.business.taggingService.service.trigger.JiraAssignmentTriggerEvent;

import org.junit.Before; import org.junit.Test; import org.mockito.ArgumentCaptor; import org.springframework.http.ResponseEntity;

public class JiraAssignmentServiceImplFullTest { JiraAssignmentReader reader; TaggingServiceRepository repo; TntrTradeTransformer transformer; TaggingServiceQueryConfiguration config; JiraAssignmentServiceImpl service;

@Before
public void setup() {
    reader = mock(JiraAssignmentReader.class);
    repo = mock(TaggingServiceRepository.class);
    transformer = mock(TntrTradeTransformer.class);
    config = new TaggingServiceQueryConfiguration();
    config.setTradeQuery("trade_query '{lifetimeFrom}'");
    config.setCollateralQuery("coll_query '{lifetimeFrom}'");
    config.setValuationQuery("val_query '{lifetimeFrom}'");
    config.setAggregatedcollQuery("agg_query '{lifetimeFrom}'");
    service = new JiraAssignmentServiceImpl(reader, repo, transformer, config);
}

@Test
public void testIsJiraFilterFileAvailable() {
    Date d = new Date();
    when(reader.isJiraFilterFileAvailable(d)).thenReturn(true);
    assertTrue(service.isJiraFilterFileAvailable(d));
    when(reader.isJiraFilterFileAvailable(d)).thenReturn(false);
    assertFalse(service.isJiraFilterFileAvailable(d));
}

@Test
public void testUpsertRules_nullRecordIdResultsInError() {
    JiraAssignmentDao dao = new JiraAssignmentDao();
    dao.setPrimaryKey("key1");
    List<TaggingServiceResult> results = service.saveRules(Arrays.asList(dao), new Date()).getBody();
    // default repo.saveTaggingService returns null -> error
    assertEquals(1, results.size());
    assertEquals("key1", results.get(0).getPrimaryKey());
    assertTrue(results.get(0).getErrorMessage().contains("Failed To persist"));
}

@Test
public void testUpsertRules_exceptionDuringSave() throws Exception {
    JiraAssignmentDao dao = new JiraAssignmentDao();
    dao.setPrimaryKey("key2");
    when(repo.saveTaggingService(eq(dao), anyString())).thenThrow(new RuntimeException("boom"));
    ResponseEntity<List<TaggingServiceResult>> resp = service.saveRules(Arrays.asList(dao), new Date());
    TaggingServiceResult r = resp.getBody().get(0);
    assertEquals("key2", r.getPrimaryKey());
    assertTrue(r.getErrorMessage().contains("boom"));
}

@Test(expected = TaggingServiceRunTimeException.class)
public void testValidateGroupedRulesThrowsOnDifferentExpression() {
    JiraAssignmentDao a = new JiraAssignmentDao();
    a.setFlow(FlowType.RECONCILIATION.getValue());
    a.setGroupId("g1");
    a.setExpression("exp1");
    a.setStartDate("2020-01-01");
    a.setMaxVolume(10);
    JiraAssignmentDao b = new JiraAssignmentDao();
    b.setFlow(FlowType.RECONCILIATION.getValue());
    b.setGroupId("g1");
    b.setExpression("exp2");
    b.setStartDate(a.getStartDate());
    b.setMaxVolume(a.getMaxVolume());
    service.saveRules(Arrays.asList(a, b), new Date());
}

@Test
public void testValidateGroupedRulesSucceedsForUniformGroup() {
    JiraAssignmentDao a = new JiraAssignmentDao();
    a.setFlow(FlowType.RECONCILIATION.getValue());
    a.setGroupId("g2");
    a.setExpression("exp");
    a.setSubExpression("sub");
    a.setIndexHint("idx");
    a.setScheduledTime("time");
    a.setStartDate("start");
    a.setMaxVolume(5);
    JiraAssignmentDao b = new JiraAssignmentDao();
    b.setFlow(FlowType.RECONCILIATION.getValue());
    b.setGroupId("g2");
    b.setExpression(a.getExpression());
    b.setSubExpression(a.getSubExpression());
    b.setIndexHint(a.getIndexHint());
    b.setScheduledTime(a.getScheduledTime());
    b.setStartDate(a.getStartDate());
    b.setMaxVolume(a.getMaxVolume());
    // should not throw
    service.saveRules(Arrays.asList(a, b), new Date());
}

@Test
public void testGetWhereClauseReflection() throws Exception {
    Method m = JiraAssignmentServiceImpl.class.getDeclaredMethod("getWhereClause", String.class, String.class, String.class, String.class);
    m.setAccessible(true);
    String exp = "baseExp";
    String lc = "2020-01-01";
    String flow = FlowType.TRADE.getValue();
    String jira = "JIRA123";
    String where = (String) m.invoke(service, exp, lc, flow, jira);
    assertTrue(where.startsWith(exp));
    // check lifetime replaced
    assertTrue(where.contains("trade_query '" + lc + "'"));
}

@Test
public void testAssignJiraToTrades_recordCountZeroLeadsToSuccess() throws Exception {
    JiraAssignmentTriggerEvent ev = mock(JiraAssignmentTriggerEvent.class);
    when(ev.getExpression()).thenReturn("exp");
    when(ev.getLastSuccessDate()).thenReturn("lsd");
    when(ev.getFlow()).thenReturn(FlowType.VALUATION.getValue());
    when(ev.getActionValue()).thenReturn("JIRA1");
    when(ev.getIndexHint()).thenReturn(null);
    when(ev.getPrimaryKey()).thenReturn("pk");
    when(ev.getMaxVolume()).thenReturn(100);
    when(repo.searchRulesFromDf(anyString())).thenReturn(Arrays.asList(ev));
    when(transformer.getRecords(anyString(), any(), any(), any())).thenReturn(0);
    ResponseEntity<List<AutoAssignResult>> resp = service.readAndAssignJiraToTrades();
    assertEquals(1, resp.getBody().size());
    assertTrue(resp.getBody().get(0).isSuccess());
}

@Test
public void testAssignJiraToTrades_recordCountAboveMaxLeadsToFailure() throws Exception {
    JiraAssignmentTriggerEvent ev = mock(JiraAssignmentTriggerEvent.class);
    when(ev.getExpression()).thenReturn("exp");
    when(ev.getLastSuccessDate()).thenReturn("lsd");
    when(ev.getFlow()).thenReturn(FlowType.COLLATERAL.getValue());
    when(ev.getActionValue()).thenReturn("JIRA2");
    when(ev.getIndexHint()).thenReturn(null);
    when(ev.getPrimaryKey()).thenReturn("pk2");
    when(ev.getMaxVolume()).thenReturn(1);
    when(repo.searchRulesFromDf(anyString())).thenReturn(Arrays.asList(ev));
    when(transformer.getRecords(anyString(), any(), any(), any())).thenReturn(2);
    ResponseEntity<List<AutoAssignResult>> resp = service.readAndAssignJiraToTrades();
    assertFalse(resp.getBody().get(0).isSuccess());
}

@Test
public void testAssignJiraToTrades_updateTradesMismatchLeadsToError() throws Exception {
    JiraAssignmentTriggerEvent ev = mock(JiraAssignmentTriggerEvent.class);
    when(ev.getExpression()).thenReturn("exp");
    when(ev.getLastSuccessDate()).thenReturn("lsd");
    when(ev.getFlow()).thenReturn(FlowType.AGGREGATED_COLLATERAL.getValue());
    when(ev.getActionValue()).thenReturn("JIRA3");
    when(ev.getIndexHint()).thenReturn(null);
    when(ev.getPrimaryKey()).thenReturn("pk3");
    when(ev.getMaxVolume()).thenReturn(5);
    when(repo.searchRulesFromDf(anyString())).thenReturn(Arrays.asList(ev));
    when(transformer.getRecords(anyString(), any(), any(), any())).thenReturn(3);
    TntrRepositoryUpdateCommandResult result = new TntrRepositoryUpdateCommandResult(Arrays.asList(), Arrays.asList(new Object(), new Object()));
    when(transformer.executeUpdateTrades(anyString(), any(JiraReference.class), any(), any())).thenReturn(result);
    ResponseEntity<List<AutoAssignResult>> resp = service.readAndAssignJiraToTrades();
    assertFalse(resp.getBody().get(0).isSuccess());
}

@Test
public void testDeleteAllRecordsException() {
    when(repo.deleteAllRecords()).thenThrow(new RuntimeException("del error"));
    ResponseEntity<String> resp = service.deleteAllRecords();
    assertTrue(resp.getBody().contains("del error"));
    assertEquals(500, resp.getStatusCodeValue());
}

}

