package com.rbs.tntr.business.taggingService.service.common;

import org.junit.Before;
import org.junit.Test;
import org.junit.Rule;
import org.junit.rules.TemporaryFolder;
import org.mockito.*;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardOpenOption;
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

public class FileSystemServiceImplTest {

    @InjectMocks
    private FileSystemServiceImpl fileSystemService;

    private File mockFile;
    private File[] mockFiles;
    private FilenameFilter mockFilter;

    @Rule
    public TemporaryFolder tempFolder = new TemporaryFolder();

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        mockFile = mock(File.class);
        mockFiles = new File[] { mockFile };
        mockFilter = mock(FilenameFilter.class);
    }

    /**
     * Test listFiles when files are returned by directory.listFiles().
     */
    @Test
    public void testListFiles() {
        // Arrange
        File directory = mock(File.class);
        when(directory.listFiles(mockFilter)).thenReturn(mockFiles);

        // Act
        File[] result = fileSystemService.listFiles(directory, mockFilter);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.length);
        assertEquals(mockFile, result[0]);
    }

    /**
     * Test listFiles when directory returns null.
     */
    @Test
    public void testListFilesWithNull() {
        // Arrange
        File directory = mock(File.class);
        when(directory.listFiles(mockFilter)).thenReturn(null);

        // Act
        File[] result = fileSystemService.listFiles(directory, mockFilter);

        // Assert
        assertNull(result);
    }

    /**
     * Test listFiles when directory has no files.
     */
    @Test
    public void testListFilesWithEmptyDirectory() {
        // Arrange
        File directory = mock(File.class);
        when(directory.listFiles(mockFilter)).thenReturn(new File[0]);

        // Act
        File[] result = fileSystemService.listFiles(directory, mockFilter);

        // Assert
        assertNotNull(result);
        assertEquals(0, result.length);
    }

    /**
     * Test getFile method.
     */
    @Test
    public void testGetFile() {
        // Arrange
        String path = "mock/path";
        File expectedFile = new File(path);

        // Act
        File result = fileSystemService.getFile(path);

        // Assert
        assertEquals(expectedFile.getPath(), result.getPath());
    }

    /**
     * Test getFile method with null path.
     */
    @Test
    public void testGetFileWithNullPath() {
        // Act
        File result = fileSystemService.getFile(null);

        // Assert
        assertNotNull(result);
        assertEquals("null", result.getPath());
    }

    /**
     * Test getFile method with empty string path.
     */
    @Test
    public void testGetFileWithEmptyPath() {
        // Act
        File result = fileSystemService.getFile("");

        // Assert
        assertNotNull(result);
        assertEquals("", result.getPath());
    }

    /**
     * Test copyFile method with successful copy operation.
     */
    @Test
    public void testCopyFileSuccess() throws IOException {
        // Arrange
        File sourceFile = tempFolder.newFile("source.txt");
        File destFile = new File(tempFolder.getRoot(), "dest.txt");
        
        // Write some content to source file
        Files.write(sourceFile.toPath(), "test content".getBytes(), StandardOpenOption.CREATE);

        // Act
        fileSystemService.copyFile(sourceFile, destFile);

        // Assert
        assertTrue("Destination file should exist", destFile.exists());
        assertEquals("File contents should match", 
                     new String(Files.readAllBytes(sourceFile.toPath())),
                     new String(Files.readAllBytes(destFile.toPath())));
    }

    /**
     * Test copyFile method when source file doesn't exist.
     */
    @Test(expected = IOException.class)
    public void testCopyFileSourceNotExists() throws IOException {
        // Arrange
        File sourceFile = new File(tempFolder.getRoot(), "nonexistent.txt");
        File destFile = new File(tempFolder.getRoot(), "dest.txt");

        // Act
        fileSystemService.copyFile(sourceFile, destFile);
    }

    /**
     * Test copyFile method when destination directory doesn't exist.
     */
    @Test
    public void testCopyFileDestinationDirNotExists() throws IOException {
        // Arrange
        File sourceFile = tempFolder.newFile("source.txt");
        File destFile = new File(tempFolder.getRoot(), "subdir/dest.txt");
        
        // Write some content to source file
        Files.write(sourceFile.toPath(), "test content".getBytes(), StandardOpenOption.CREATE);

        // Act
        fileSystemService.copyFile(sourceFile, destFile);

        // Assert
        assertTrue("Destination file should exist", destFile.exists());
        assertTrue("Destination directory should be created", destFile.getParentFile().exists());
    }

    /**
     * Test copyFile method with same source and destination.
     */
    @Test
    public void testCopyFileSameSourceAndDest() throws IOException {
        // Arrange
        File file = tempFolder.newFile("same.txt");
        Files.write(file.toPath(), "test content".getBytes(), StandardOpenOption.CREATE);

        // Act
        fileSystemService.copyFile(file, file);

        // Assert - should not throw exception, file should still exist
        assertTrue("File should still exist", file.exists());
    }

    /**
     * Test moveFile method with successful move operation.
     */
    @Test
    public void testMoveFileSuccess() throws IOException {
        // Arrange
        File sourceFile = tempFolder.newFile("source.txt");
        File destFile = new File(tempFolder.getRoot(), "dest.txt");
        
        // Write some content to source file
        String content = "test content";
        Files.write(sourceFile.toPath(), content.getBytes(), StandardOpenOption.CREATE);

        // Act
        fileSystemService.moveFile(sourceFile, destFile);

        // Assert
        assertFalse("Source file should not exist after move", sourceFile.exists());
        assertTrue("Destination file should exist", destFile.exists());
        assertEquals("File contents should match", content,
                     new String(Files.readAllBytes(destFile.toPath())));
    }

    /**
     * Test moveFile method when source file doesn't exist.
     */
    @Test(expected = IOException.class)
    public void testMoveFileSourceNotExists() throws IOException {
        // Arrange
        File sourceFile = new File(tempFolder.getRoot(), "nonexistent.txt");
        File destFile = new File(tempFolder.getRoot(), "dest.txt");

        // Act
        fileSystemService.moveFile(sourceFile, destFile);
    }

    /**
     * Test moveFile method when destination directory doesn't exist.
     */
    @Test
    public void testMoveFileDestinationDirNotExists() throws IOException {
        // Arrange
        File sourceFile = tempFolder.newFile("source.txt");
        File destFile = new File(tempFolder.getRoot(), "subdir/dest.txt");
        
        // Write some content to source file
        String content = "test content";
        Files.write(sourceFile.toPath(), content.getBytes(), StandardOpenOption.CREATE);

        // Act
        fileSystemService.moveFile(sourceFile, destFile);

        // Assert
        assertFalse("Source file should not exist after move", sourceFile.exists());
        assertTrue("Destination file should exist", destFile.exists());
        assertTrue("Destination directory should be created", destFile.getParentFile().exists());
        assertEquals("File contents should match", content,
                     new String(Files.readAllBytes(destFile.toPath())));
    }

    /**
     * Test moveFile method with same source and destination.
     */
    @Test
    public void testMoveFileSameSourceAndDest() throws IOException {
        // Arrange
        File file = tempFolder.newFile("same.txt");
        String content = "test content";
        Files.write(file.toPath(), content.getBytes(), StandardOpenOption.CREATE);

        // Act
        fileSystemService.moveFile(file, file);

        // Assert - should not throw exception, file should still exist
        assertTrue("File should still exist", file.exists());
        assertEquals("File contents should match", content,
                     new String(Files.readAllBytes(file.toPath())));
    }

    /**
     * Test moveFile method when destination file already exists.
     */
    @Test
    public void testMoveFileDestinationExists() throws IOException {
        // Arrange
        File sourceFile = tempFolder.newFile("source.txt");
        File destFile = tempFolder.newFile("dest.txt");
        
        String sourceContent = "source content";
        String destContent = "dest content";
        Files.write(sourceFile.toPath(), sourceContent.getBytes(), StandardOpenOption.CREATE);
        Files.write(destFile.toPath(), destContent.getBytes(), StandardOpenOption.CREATE);

        // Act
        fileSystemService.moveFile(sourceFile, destFile);

        // Assert
        assertFalse("Source file should not exist after move", sourceFile.exists());
        assertTrue("Destination file should exist", destFile.exists());
        assertEquals("Destination file should have source content", sourceContent,
                     new String(Files.readAllBytes(destFile.toPath())));
    }

    /**
     * Test copyFile method when destination file already exists.
     */
    @Test
    public void testCopyFileDestinationExists() throws IOException {
        // Arrange
        File sourceFile = tempFolder.newFile("source.txt");
        File destFile = tempFolder.newFile("dest.txt");
        
        String sourceContent = "source content";
        String destContent = "dest content";
        Files.write(sourceFile.toPath(), sourceContent.getBytes(), StandardOpenOption.CREATE);
        Files.write(destFile.toPath(), destContent.getBytes(), StandardOpenOption.CREATE);

        // Act
        fileSystemService.copyFile(sourceFile, destFile);

        // Assert
        assertTrue("Source file should still exist after copy", sourceFile.exists());
        assertTrue("Destination file should exist", destFile.exists());
        assertEquals("Destination file should have source content", sourceContent,
                     new String(Files.readAllBytes(destFile.toPath())));
        assertEquals("Source file should retain its content", sourceContent,
                     new String(Files.readAllBytes(sourceFile.toPath())));
    }
}
