Could you write all the additional test cases for below java class to cover all the remaining scenarios or methods and make the test coverage or code coverage as 100% using junit 4 and old mockito version and java 8. Also don't use power mockito as i m using older mockito version and for private methods try to use reflection. Plus we can't change any file other than the above test class. 

package com.rbs.tntr.business.blotter.df.updater;


import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.List;

import com.nwm.tntr.commons.domain.persistence.constant.AccountSubmissionType;
import com.nwm.tntr.commons.domain.persistence.constant.UserCommentType;
import com.rbs.tntr.business.blotter.web.request.regreportingTrade.*;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Component;

import com.nwm.tntr.commons.domain.persistence.constant.ApprovalStatus;
import com.nwm.tntr.commons.domain.persistence.constant.IssueType;
import com.nwm.tntr.commons.domain.persistence.entity.ExceptionManagement;
import com.rbs.tntr.business.blotter.utility.EntityComparator;
import com.rbs.tntr.business.blotter.utility.ObjectManagementUtility;
import com.rbs.tntr.domain.blotter.enums.ExceptionStatus;
import com.rbs.tntr.domain.blotter.tntrBlotterView.JiraReference;

@Component
public class ExceptionManagmentUpdater extends ObjectManagementUtility {
	
    public static final String NO_FIELD_EDITED = "No edited field found";
    public static final String APPROVED = "Approved";

    public ExceptionManagement addExceptionStatus(ExceptionStatus requestedExceptionStatus,
                                                  UpdateExceptionStatusRequest updateExceptionStatusRequest,
                                                  ExceptionManagement em,
                                                  String userName) {

        ExceptionManagement.Builder exceptionManagement = ExceptionManagement.newBuilder(em)
                .withLastActionDateTime(ZonedDateTime.now(ZoneOffset.UTC))
                .withLastActionUser(userName)
                .withLastAction(updateExceptionStatusRequest.getAction())
                .withUserComment(updateExceptionStatusRequest.getComment().getComment())
                .withAccountSubmissionType(updateExceptionStatusRequest.getAccountSubmissionType() != null ? AccountSubmissionType.fromValue(updateExceptionStatusRequest.getAccountSubmissionType()): em.getAccountSubmissionType());

		if (StringUtils.isEmpty(updateExceptionStatusRequest.getApprovedBy())
				&& (validateExceptionApprovedStatus(requestedExceptionStatus)
						|| validateExceptionRejectedStatus(requestedExceptionStatus))) {
            exceptionManagement.withApprovedBy(userName);
        }else{
            exceptionManagement.withApprovedBy(updateExceptionStatusRequest.getApprovedBy());
        }
        if(requestedExceptionStatus.getValue().equalsIgnoreCase(ExceptionStatus.Open.getValue())) {
            exceptionManagement.withExceptionStatus(com.nwm.tntr.commons.domain.persistence.constant.ExceptionStatus.fromValue(requestedExceptionStatus.getValue()));
            exceptionManagement.withApprovalStatus(ApprovalStatus.OPEN_APPROVED);
        }else if(requestedExceptionStatus.getValue().equalsIgnoreCase(ExceptionStatus.Close.getValue())) {
            exceptionManagement.withExceptionStatus(com.nwm.tntr.commons.domain.persistence.constant.ExceptionStatus.fromValue(requestedExceptionStatus.getValue()));
            exceptionManagement.withApprovalStatus(ApprovalStatus.CLOSE_APPROVED);
        }else {
            exceptionManagement.withApprovalStatus(ApprovalStatus.fromValue(requestedExceptionStatus.getValue()));
        }

        return exceptionManagement.build();
    }
    
	public ExceptionManagement resetAction(UpdateExceptionStatusRequest updateExceptionStatusRequest, ExceptionManagement em, String userName) {

		ExceptionManagement.Builder exceptionManagement = ExceptionManagement.newBuilder(em)
				.withLastActionDateTime(ZonedDateTime.now(ZoneOffset.UTC)).withLastActionUser(userName)
				.withLastAction(updateExceptionStatusRequest.getAction())
				.withUserComment(updateExceptionStatusRequest.getComment().getComment())
				.withApprovalStatus(null)
				.withApprovedBy(userName);
		
		return exceptionManagement.build();
	}

    private boolean validateExceptionApprovedStatus(ExceptionStatus requestedExceptionStatus) {
        switch (requestedExceptionStatus) {
            case Cancel_Approved:
            case Replay_Approved:
            case Replay_Refresh_Approved:
            case Dummy_Amend_Approved:
            case Close_Approved:
            case Open_Approved:
            case Open:
            case Close:
		case Edit_Approved:
                return true;
            default:
                return false;
        }
    }

	private boolean validateExceptionRejectedStatus(ExceptionStatus requestedExceptionStatus) {
		switch (requestedExceptionStatus) {
		case Open_Rejected:
		case Close_Rejected:
		case Replay_Rejected:
		case Replay_Refresh_Rejected:
		case Dummy_Amend_Rejected:
		case Cancel_Rejected:
		case Edit_Rejected:
			return true;
		default:
			return false;
		}
	}

    public ExceptionManagement addExceptionStatusForEdit(ExceptionStatus requestedExceptionStatus, EditRequest editRequest, ExceptionManagement em, String userName, String editedFields) {

        ExceptionManagement.Builder exceptionManagement = ExceptionManagement.newBuilder(em)
                .withLastActionDateTime(ZonedDateTime.now(ZoneOffset.UTC))
                .withLastActionUser(userName)
                .withLastAction(editRequest.getAction())
                .withApprovalStatus(ApprovalStatus.fromValue(requestedExceptionStatus.getValue()))
                .withApprovedBy(editRequest.getExceptionManagementData().getApprovedBy() != null ? editRequest.getExceptionManagementData().getApprovedBy() : userName)
                .withEditedFields(editedFields)
                .withUserComment(editRequest.getExceptionManagementData().getComment() == null ? em.getUserComment() : editRequest.getExceptionManagementData().getComment())
                .withAccountSubmissionType(editRequest.getAccountSubmissionType() != null ? AccountSubmissionType.fromValue(editRequest.getAccountSubmissionType()): em.getAccountSubmissionType());

        return exceptionManagement.build();
    }

    public ExceptionManagement assignException(AssignTradeRequest assignTradeRequest,
                                               ExceptionManagement em,
                                               String userName) {

        ExceptionManagement.Builder exceptionManagement = ExceptionManagement.newBuilder(em)
                .withAssignedTo(assignTradeRequest.getAssignTo())
                .withLastActionDateTime(ZonedDateTime.now(ZoneOffset.UTC))
                .withLastActionUser(userName)
                .withLastAction(assignTradeRequest.getAction());

        return exceptionManagement.build();
    }

    public ExceptionManagement addCommentsToException(AddTradeCommentRequest addTradeCommentRequest,
                                                      ExceptionManagement em,
                                                      String userName) {

        ExceptionManagement.Builder exceptionManagement = ExceptionManagement.newBuilder(em)
                .withUserComment(addTradeCommentRequest.getComment().getComment())
                .withLastActionDateTime(ZonedDateTime.now(ZoneOffset.UTC))
                .withLastActionUser(userName)
                .withLastAction(addTradeCommentRequest.getAction());

        return exceptionManagement.build();
    }
    
	public ExceptionManagement addComments(ExceptionManagement em, String userName,String userComment,String userAction) {

		ExceptionManagement.Builder exceptionManagement = ExceptionManagement.newBuilder(em)
				.withUserComment(userComment)
				.withLastActionDateTime(ZonedDateTime.now(ZoneOffset.UTC)).withLastActionUser(userName)
				.withLastAction(userAction);

		return exceptionManagement.build();
	}

	public ExceptionManagement removeCommentsToException(AddTradeCommentRequest addTradeCommentRequest,
			ExceptionManagement em, String userName) {

		ExceptionManagement.Builder exceptionManagement = ExceptionManagement.newBuilder(em)
                .withUserComment(null)
				.withLastActionDateTime(ZonedDateTime.now(ZoneOffset.UTC)).withLastActionUser(userName)
				.withLastAction(addTradeCommentRequest.getAction());

		return exceptionManagement.build();
	}

    public ExceptionManagement addJiraIdToException(AddTradeJiraReferenceRequest addTradeJiraReferenceRequest,
                                                    ExceptionManagement em,
                                                    String userName) {

        ExceptionManagement.Builder exceptionManagement = ExceptionManagement.newBuilder(em)
                .withIssueIds(getJiraIds(addTradeJiraReferenceRequest.getJiraReference(), em))
                .withLastActionDateTime(ZonedDateTime.now(ZoneOffset.UTC))
                .withLastActionUser(userName)
                .withLastAction(addTradeJiraReferenceRequest.getAction());

        return exceptionManagement.build();
    }

    private List<String> getJiraIds(JiraReference jiraReference , ExceptionManagement exceptionManagement) {
        List<String> lstJiraReference = exceptionManagement.getIssueIds();
        if (jiraReference != null && StringUtils.isNotBlank(jiraReference.getJiraId())) {
            if (lstJiraReference == null) {
                lstJiraReference = new ArrayList<>();
            }
            if(!lstJiraReference.contains(jiraReference.getJiraId())) {
                lstJiraReference.add(jiraReference.getJiraId());
            }
        }
        return lstJiraReference;
    }

    public ExceptionManagement removeJiraIdFromException(AddTradeJiraReferenceRequest addTradeJiraReferenceRequest,
                                                         ExceptionManagement em,
                                                    String userName) {

        ExceptionManagement.Builder exceptionManagement = ExceptionManagement.newBuilder(em)
                .withIssueIds(removeJiraIds(addTradeJiraReferenceRequest.getJiraReference(), em))
                .withLastActionDateTime(ZonedDateTime.now(ZoneOffset.UTC))
                .withLastActionUser(userName)
                .withLastAction(addTradeJiraReferenceRequest.getAction());

        return exceptionManagement.build();
    }

    private List<String> removeJiraIds(JiraReference jiraReference , ExceptionManagement exceptionManagement) {
        List<String> lstJiraReference = exceptionManagement.getIssueIds();
        if (jiraReference != null && StringUtils.isNotBlank(jiraReference.getJiraId()) && lstJiraReference != null && lstJiraReference.contains(jiraReference.getJiraId())) {
                lstJiraReference.remove(jiraReference.getJiraId());
        }
        return lstJiraReference;
    }


    public ExceptionManagement addJiraTypeToException(AddTradeJiraTypeRequest addTradeJiraReferenceRequest,
                                                      ExceptionManagement em,
                                                      String userName) {

        ExceptionManagement.Builder exceptionManagement = ExceptionManagement.newBuilder(em)
                .withIssueType(IssueType.fromValue(addTradeJiraReferenceRequest.getJiraType().getIssueType()))
                .withLastActionDateTime(ZonedDateTime.now(ZoneOffset.UTC))
                .withLastActionUser(userName)
                .withLastAction(addTradeJiraReferenceRequest.getAction());

        return exceptionManagement.build();
    }

    public ExceptionManagement removeJiraTypeFromException(AddTradeJiraTypeRequest addTradeJiraTypeRequest,
                                                           ExceptionManagement em,
                                                         String userName) {

        ExceptionManagement.Builder exceptionManagement = ExceptionManagement.newBuilder(em)
                .withIssueType(addTradeJiraTypeRequest.getJiraType().getIssueType().equals(em.getIssueType().value()) ? null : em.getIssueType())
                .withLastActionDateTime(ZonedDateTime.now(ZoneOffset.UTC))
                .withLastActionUser(userName)
                .withLastAction(addTradeJiraTypeRequest.getAction());

        return exceptionManagement.build();
    }

    public String getEditedFields(Object actualObj, Object modifiedObj) {
        List<EntityComparator.Delta> deltas = EntityComparator.compare(actualObj, modifiedObj, o -> "id");

        StringBuilder fieldName = new StringBuilder();
        for (EntityComparator.Delta d : deltas) {
            fieldName.append(d.getFieldName());
            fieldName.append(", ");
        }

        if(StringUtils.isNotBlank(fieldName.toString())) {
            return fieldName.substring(0, fieldName.length() - 2);
        }
        return NO_FIELD_EDITED;
    }

    public ExceptionManagement addCommentTypeToException(AddTradeCommentTypeRequest addTradeCommentTypeRequest, ExceptionManagement em, String userName) {
        ExceptionManagement.Builder exceptionManagement = ExceptionManagement.newBuilder(em)
                .withUserCommentType(UserCommentType.fromValue(addTradeCommentTypeRequest.getCommentType().getUserCommentType()))
                .withLastActionDateTime(ZonedDateTime.now(ZoneOffset.UTC))
                .withLastActionUser(userName)
                .withLastAction(addTradeCommentTypeRequest.getAction());

        return exceptionManagement.build();
    }

    public ExceptionManagement removeCommentTypeToException(AddTradeCommentTypeRequest addTradeCommentTypeRequest, ExceptionManagement em, String userName) {
        ExceptionManagement.Builder exceptionManagement = ExceptionManagement.newBuilder(em)
                .withUserCommentType(addTradeCommentTypeRequest.getCommentType().getUserCommentType().equals(em.getUserCommentType().value()) ? null : em.getUserCommentType())
                .withUserComment(null)
                .withLastActionDateTime(ZonedDateTime.now(ZoneOffset.UTC)).withLastActionUser(userName)
                .withLastAction(addTradeCommentTypeRequest.getAction());

        return exceptionManagement.build();
    }
}

Existing test class:

package com.rbs.tntr.business.blotter.df.updater;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import com.nwm.tntr.commons.domain.persistence.constant.*;
import com.rbs.tntr.domain.blotter.tntrBlotterView.CommentType;
import com.rbs.tntr.domain.blotter.tntrBlotterView.JiraType;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;

import com.nwm.tntr.commons.domain.persistence.entity.ExceptionManagement;
import com.rbs.tntr.business.blotter.web.request.regreportingTrade.*;
import com.rbs.tntr.domain.blotter.tntrBlotterView.JiraReference;
import java.util.ArrayList;
import java.util.List;

@RunWith(MockitoJUnitRunner.class)
public class ExceptionManagmentUpdaterTest {

    @InjectMocks
    private ExceptionManagmentUpdater updater;

    @Mock
    private ExceptionManagement em;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testAssignException() {
        AssignTradeRequest request = mock(AssignTradeRequest.class);
        when(request.getAssignTo()).thenReturn("assignTo");
        when(request.getAction()).thenReturn("action");

        ExceptionManagement result = updater.assignException(request, em, "userName");

        assertNotNull(result);
        assertEquals("assignTo", result.getAssignedTo());
        assertEquals("userName", result.getLastActionUser());
        assertEquals("action", result.getLastAction());
    }

    @Test
    public void testAddComments() {
        ExceptionManagement result = updater.addComments(em, "userName", "userComment", "userAction");

        assertNotNull(result);
        assertEquals("userComment", result.getUserComment());
        assertEquals("userName", result.getLastActionUser());
        assertEquals("userAction", result.getLastAction());
    }

    @Test
    public void testRemoveCommentsToException() {
        AddTradeCommentRequest request = mock(AddTradeCommentRequest.class);
        when(request.getAction()).thenReturn("action");

        ExceptionManagement result = updater.removeCommentsToException(request, em, "userName");

        assertNotNull(result);
        assertNull(result.getUserComment());
        assertEquals("userName", result.getLastActionUser());
        assertEquals("action", result.getLastAction());
    }

    @Test
    public void testAddJiraIdToException() {
        AddTradeJiraReferenceRequest request = mock(AddTradeJiraReferenceRequest.class);
        JiraReference jiraReference = new JiraReference("jiraId");
        when(request.getJiraReference()).thenReturn(jiraReference);
        when(request.getAction()).thenReturn("action");

        ExceptionManagement result = updater.addJiraIdToException(request, em, "userName");

        assertNotNull(result);
        assertTrue(result.getIssueIds().contains("jiraId"));
        assertEquals("userName", result.getLastActionUser());
        assertEquals("action", result.getLastAction());
    }

    @Test
    public void testRemoveJiraIdFromException() {
        AddTradeJiraReferenceRequest request = mock(AddTradeJiraReferenceRequest.class);
        JiraReference jiraReference = new JiraReference("jiraId");
        when(request.getJiraReference()).thenReturn(jiraReference);
        when(request.getAction()).thenReturn("action");

        List<String> issueIds = new ArrayList<>();
        issueIds.add("jiraId");
        when(em.getIssueIds()).thenReturn(issueIds);

        ExceptionManagement result = updater.removeJiraIdFromException(request, em, "userName");

        assertNotNull(result);
        assertFalse(result.getIssueIds().contains("jiraId"));
        assertEquals("userName", result.getLastActionUser());
        assertEquals("action", result.getLastAction());
    }

    @Test
    public void testAddJiraTypeToException() {
        AddTradeJiraTypeRequest request = mock(AddTradeJiraTypeRequest.class);
        JiraType jiraType = new JiraType("issueType");
        when(request.getJiraType()).thenReturn(jiraType);
        when(request.getAction()).thenReturn("action");

        ExceptionManagement result = updater.addJiraTypeToException(request, em, "userName");

        assertNotNull(result);
        assertEquals(IssueType.fromValue("issueType"), result.getIssueType());
        assertEquals("userName", result.getLastActionUser());
        assertEquals("action", result.getLastAction());
    }

    @Test
    public void testGetEditedFields() {
        Object actualObj = new Object();
        Object modifiedObj = new Object();

        String editedFields = updater.getEditedFields(actualObj, modifiedObj);

        assertEquals(ExceptionManagmentUpdater.NO_FIELD_EDITED, editedFields);
    }

    @Test
    public void testAddCommentTypeToException() {
        AddTradeCommentTypeRequest request = mock(AddTradeCommentTypeRequest.class);
        CommentType commentType = new CommentType("userCommentType");
        when(request.getCommentType()).thenReturn(commentType);
        when(request.getAction()).thenReturn("action");

        ExceptionManagement result = updater.addCommentTypeToException(request, em, "userName");

        assertNotNull(result);
        assertEquals(UserCommentType.fromValue("userCommentType"), result.getUserCommentType());
        assertEquals("userName", result.getLastActionUser());
        assertEquals("action", result.getLastAction());
    }

}
