package com.rbs.tntr.business.blotter.services.actions;

import com.google.common.collect.Lists;
import com.nwm.tntr.commons.domain.persistence.constant.TNTRApplication;
import com.nwm.tntr.commons.domain.persistence.constant.UserActionType;
import com.nwm.tntr.commons.domain.persistence.entity.DocumentId;
import com.nwm.tntr.commons.domain.persistence.entity.ExceptionManagement;
import com.nwm.tntr.commons.domain.persistence.entity.NonReportableData;
import com.nwm.tntr.commons.domain.persistence.entity.trade.*;
import com.nwm.tntr.commons.repository.regreporting.WriteResult;
import com.rbs.tntr.business.blotter.df.manager.DfTradePersistManager;
import com.rbs.tntr.business.blotter.df.updater.TradeDataUpdater;
import com.rbs.tntr.business.blotter.services.validators.ActionRequestValidator;
import com.rbs.tntr.business.blotter.web.request.regreportingTrade.*;
import com.rbs.tntr.domain.blotter.enums.ExceptionStatus;
import com.rbs.tntr.domain.blotter.tntrBlotterView.ActionDocumentId;
import org.apache.commons.lang3.tuple.Pair;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.lang.reflect.Method;
import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class TradeActionServiceTest {

    @Mock
    private DfTradePersistManager dfTradePersistManager;

    @Mock
    private TradeDataUpdater dataUpdater;

    @Mock
    private ActionRequestValidator requestValidator;

    @InjectMocks
    private TradeActionService tradeActionService;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    // Helper method to create a TradeReportDocument mock
    private TradeReportDocument createTradeReportDocument(String key, Long version) {
        TradeReportDocument doc = mock(TradeReportDocument.class);
        DocumentId docId = DocumentId.from(key, version);
        when(doc.getDocumentId()).thenReturn(docId);
        TradeReport report = mock(TradeReport.class);
        ExceptionManagement em = mock(ExceptionManagement.class);
        NonReportableData nrd = mock(NonReportableData.class);
        TransactionReportingStatus trs = mock(TransactionReportingStatus.class);
        TradeReportId tradeReportId = mock(TradeReportId.class);
        when(doc.getTradeReport()).thenReturn(report);
        when(report.getExceptionManagement()).thenReturn(em);
        when(report.getNonReportableData()).thenReturn(nrd);
        when(report.getTransactionReportingStatus()).thenReturn(trs);
        when(report.getTradeReportId()).thenReturn(tradeReportId);
        when(tradeReportId.getTradeSourceSystemTransactionId()).thenReturn("transId");
        when(em.getApprovalStatus()).thenReturn("Pending");
        when(em.getIssueIds()).thenReturn(Collections.singletonList("JIRA-1"));
        when(em.getIssueType()).thenReturn(mock(IssueType.class));
        when(em.getIssueType().value()).thenReturn("Bug");
        return doc;
    }

    private WriteResult<TradeReport> createSuccessWriteResult(String key, Long version, TradeReport report) {
        WriteResult<TradeReport> wr = mock(WriteResult.class);
        when(wr.isSuccess()).thenReturn(true);
        when(wr.getDocumentId()).thenReturn(DocumentId.from(key, version));
        when(wr.getRecord()).thenReturn(report);
        return wr;
    }

    private WriteResult<TradeReport> createFailureWriteResult(String error) {
        WriteResult<TradeReport> wr = mock(WriteResult.class);
        when(wr.isSuccess()).thenReturn(false);
        WriteResult.ErrorDetail ed = new WriteResult.ErrorDetail(error, null);
        when(wr.getErrorDetail()).thenReturn(ed);
        return wr;
    }

    // Tests for addComment
    @Test
    public void testAddComment_EmptyRequests() {
        List<AddTradeCommentRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = tradeActionService.addComment(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAddComment_Success() {
        AddTradeCommentRequest request = mock(AddTradeCommentRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        List<AddTradeCommentRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        doNothing().when(requestValidator).validateMAS755Trades(anyList(), anyList());
        when(requestValidator.validateUser("username", doc.getTradeReport().getExceptionManagement())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        ExceptionManagement updatedEm = mock(ExceptionManagement.class);
        when(dataUpdater.addCommentsToException(request, doc.getTradeReport().getExceptionManagement(), "username")).thenReturn(updatedEm);
        TradeReport updatedReport = mock(TradeReport.class);
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(createSuccessWriteResult("key1", 2L, updatedReport)));

        List<ActionUpdateResult> results = tradeActionService.addComment(requests, "username");

        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
        assertEquals("key1", results.get(0).getKey());
        assertEquals(Long.valueOf(2L), results.get(0).getVersion());
    }

    @Test
    public void testAddComment_MAS755ValidationFailure() {
        AddTradeCommentRequest request = mock(AddTradeCommentRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        List<AddTradeCommentRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        doAnswer(invocation -> {
            List<ActionUpdateResult> results = invocation.getArgument(1);
            results.add(ActionUpdateResult.createWithError(new ActionDocumentId("key1", 1L), "MAS755 validation failed"));
            return null;
        }).when(requestValidator).validateMAS755Trades(anyList(), anyList());

        List<ActionUpdateResult> results = tradeActionService.addComment(requests, "username");

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains("MAS755 validation failed"));
    }

    @Test
    public void testAddComment_UserValidationFailure() {
        AddTradeCommentRequest request = mock(AddTradeCommentRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        List<AddTradeCommentRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        doNothing().when(requestValidator).validateMAS755Trades(anyList(), anyList());
        when(requestValidator.validateUser("username", doc.getTradeReport().getExceptionManagement())).thenReturn(false);

        List<ActionUpdateResult> results = tradeActionService.addComment(requests, "username");

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains(ActionRequestValidator.USER_VALIDATION_ERROR));
    }

    @Test
    public void testAddComment_ApprovalStatusValidationFailure() {
        AddTradeCommentRequest request = mock(AddTradeCommentRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        List<AddTradeCommentRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        doNothing().when(requestValidator).validateMAS755Trades(anyList(), anyList());
        when(requestValidator.validateUser("username", doc.getTradeReport().getExceptionManagement())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(true);

        List<ActionUpdateResult> results = tradeActionService.addComment(requests, "username");

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR));
    }

    @Test
    public void testAddComment_WithException() {
        AddTradeCommentRequest request = mock(AddTradeCommentRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        List<AddTradeCommentRequest> requests = Collections.singletonList(request);

        when(dfTradePersistManager.getAllRecordsById(anyList())).thenThrow(new RuntimeException("Test exception"));

        List<ActionUpdateResult> results = tradeActionService.addComment(requests, "username");

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains("Error updating trade record"));
        assertTrue(results.get(0).getError().contains("Test exception"));
    }

    @Test
    public void testAddComment_PartialSaveSuccess() {
        AddTradeCommentRequest req1 = mock(AddTradeCommentRequest.class);
        AddTradeCommentRequest req2 = mock(AddTradeCommentRequest.class);
        when(req1.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(req2.getDocumentId()).thenReturn(new ActionDocumentId("key2", 1L));
        List<AddTradeCommentRequest> requests = Arrays.asList(req1, req2);

        TradeReportDocument doc1 = createTradeReportDocument("key1", 1L);
        TradeReportDocument doc2 = createTradeReportDocument("key2", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Arrays.asList(doc1, doc2));
        doNothing().when(requestValidator).validateMAS755Trades(anyList(), anyList());
        when(requestValidator.validateUser(eq("username"), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.addCommentsToException(any(), any(), eq("username"))).thenReturn(mock(ExceptionManagement.class));
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Arrays.asList(
            createSuccessWriteResult("key1", 2L, doc1.getTradeReport()),
            createFailureWriteResult("Save failed")
        ));

        List<ActionUpdateResult> results = tradeActionService.addComment(requests, "username");

        assertEquals(2, results.size());
        assertTrue(results.get(0).isSuccess());
        assertFalse(results.get(1).isSuccess());
        assertTrue(results.get(1).getError().contains("Save failed"));
    }

    // Tests for removeComment
    @Test
    public void testRemoveComment_EmptyRequests() {
        List<AddTradeCommentRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = tradeActionService.removeComment(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testRemoveComment_Success() {
        AddTradeCommentRequest request = mock(AddTradeCommentRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        List<AddTradeCommentRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        doNothing().when(requestValidator).validateMAS755Trades(anyList(), anyList());
        when(requestValidator.validateUser("username", doc.getTradeReport().getExceptionManagement())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        ExceptionManagement updatedEm = mock(ExceptionManagement.class);
        when(dataUpdater.removeCommentsToException(request, doc.getTradeReport().getExceptionManagement(), "username")).thenReturn(updatedEm);
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(createSuccessWriteResult("key1", 2L, doc.getTradeReport())));

        List<ActionUpdateResult> results = tradeActionService.removeComment(requests, "username");

        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testRemoveComment_DataUpdaterThrowsException() {
        AddTradeCommentRequest request = mock(AddTradeCommentRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        List<AddTradeCommentRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        doNothing().when(requestValidator).validateMAS755Trades(anyList(), anyList());
        when(requestValidator.validateUser("username", doc.getTradeReport().getExceptionManagement())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.removeCommentsToException(any(), any(), anyString())).thenThrow(new RuntimeException("Update error"));

        List<ActionUpdateResult> results = tradeActionService.removeComment(requests, "username");

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains("Error occured while updating comments"));
    }

    // Tests for addCommentType
    @Test
    public void testAddCommentType_EmptyRequests() {
        List<AddTradeCommentTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = tradeActionService.addCommentType(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAddCommentType_Success() {
        AddTradeCommentTypeRequest request = mock(AddTradeCommentTypeRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        List<AddTradeCommentTypeRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        doNothing().when(requestValidator).validateMAS755Trades(anyList(), anyList());
        when(requestValidator.validateUser("username", doc.getTradeReport().getExceptionManagement())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.addCommentTypeToException(any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(createSuccessWriteResult("key1", 2L, doc.getTradeReport())));

        List<ActionUpdateResult> results = tradeActionService.addCommentType(requests, "username");

        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testAddCommentType_UserValidationFailure() {
        AddTradeCommentTypeRequest request = mock(AddTradeCommentTypeRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        List<AddTradeCommentTypeRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        doNothing().when(requestValidator).validateMAS755Trades(anyList(), anyList());
        when(requestValidator.validateUser("username", doc.getTradeReport().getExceptionManagement())).thenReturn(false);

        List<ActionUpdateResult> results = tradeActionService.addCommentType(requests, "username");

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains(ActionRequestValidator.USER_VALIDATION_ERROR));
    }

    // Tests for removeCommentType
    @Test
    public void testRemoveCommentType_EmptyRequests() {
        List<AddTradeCommentTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = tradeActionService.removeCommentType(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testRemoveCommentType_Success() {
        AddTradeCommentTypeRequest request = mock(AddTradeCommentTypeRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        List<AddTradeCommentTypeRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        doNothing().when(requestValidator).validateMAS755Trades(anyList(), anyList());
        when(requestValidator.validateUser("username", doc.getTradeReport().getExceptionManagement())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.removeCommentTypeToException(any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(createSuccessWriteResult("key1", 2L, doc.getTradeReport())));

        List<ActionUpdateResult> results = tradeActionService.removeCommentType(requests, "username");

        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testRemoveCommentType_WithException() {
        AddTradeCommentTypeRequest request = mock(AddTradeCommentTypeRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        List<AddTradeCommentTypeRequest> requests = Collections.singletonList(request);

        when(dfTradePersistManager.getAllRecordsById(anyList())).thenThrow(new RuntimeException("Test exception"));

        List<ActionUpdateResult> results = tradeActionService.removeCommentType(requests, "username");

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains("Error updating trade record"));
    }

    // Tests for updateEditedFields
    @Test
    public void testUpdateEditedFields_EmptyRequests() {
        List<EditRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = tradeActionService.updateEditedFields(requests, "username", ExceptionStatus.Edit_Requested);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testUpdateEditedFields_Success() {
        EditRequest request = mock(EditRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        List<EditRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        TradeReport updatedReport = mock(TradeReport.class);
        when(dataUpdater.updateTradeReportData(any(), any(), anyString(), any())).thenReturn(updatedReport);
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(createSuccessWriteResult("key1", 2L, updatedReport)));

        List<ActionUpdateResult> results = tradeActionService.updateEditedFields(requests, "username", ExceptionStatus.Edit_Requested);

        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testUpdateEditedFields_EditFailure() {
        EditRequest request = mock(EditRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        List<EditRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.updateTradeReportData(any(), any(), anyString(), any())).thenThrow(new RuntimeException("Edit failed"));

        List<ActionUpdateResult> results = tradeActionService.updateEditedFields(requests, "username", ExceptionStatus.Edit_Requested);

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains("Edit failed"));
    }

    // Tests for updateExceptionStatus
    @Test
    public void testUpdateExceptionStatus_EmptyRequests() {
        List<UpdateExceptionStatusRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = tradeActionService.updateExceptionStatus(requests, ExceptionStatus.Edit_Requested, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testUpdateExceptionStatus_Success() {
        UpdateExceptionStatusRequest request = mock(UpdateExceptionStatusRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        List<UpdateExceptionStatusRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        doNothing().when(requestValidator).validatePermittedExceptionStatus(anyList(), anyList(), any());
        when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.validateAckedCancleTrade(any(), any())).thenReturn(false);
        when(requestValidator.validateExceptionStatus(any(), any())).thenReturn(true);
        when(requestValidator.validateApprover(any(), any(), any(), any())).thenReturn(false);
        when(dataUpdater.addExceptionStatus(any(), any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(createSuccessWriteResult("key1", 2L, doc.getTradeReport())));

        List<ActionUpdateResult> results = tradeActionService.updateExceptionStatus(requests, ExceptionStatus.Edit_Requested, "username");

        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testUpdateExceptionStatus_RollbackOnEditRejected() {
        UpdateExceptionStatusRequest request = mock(UpdateExceptionStatusRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 3L));
        List<UpdateExceptionStatusRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 3L);
        TradeReportDocument prevDoc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(Collections.singletonList(DocumentId.from("key1", 3L)))).thenReturn(Collections.singletonList(doc));
        when(dfTradePersistManager.getAllRecordsById(Collections.singletonList(DocumentId.from("key1", 1L)))).thenReturn(Collections.singletonList(prevDoc));
        doNothing().when(requestValidator).validatePermittedExceptionStatus(anyList(), anyList(), any());
        when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.validateAckedCancleTrade(any(), any())).thenReturn(false);
        when(requestValidator.validateExceptionStatus(any(), any())).thenReturn(true);
        when(requestValidator.validateApprover(any(), any(), any(), any())).thenReturn(false);
        when(dataUpdater.addExceptionStatus(any(), any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(createSuccessWriteResult("key1", 4L, doc.getTradeReport())));
        when(dfTradePersistManager.upsertAllRecords(anyList())).thenReturn(Collections.singletonList(createSuccessWriteResult("key1", 1L, prevDoc.getTradeReport())));

        List<ActionUpdateResult> results = tradeActionService.updateExceptionStatus(requests, ExceptionStatus.Edit_Rejected, "username");

        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
        assertEquals(Long.valueOf(1L), results.get(0).getVersion());
    }

    @Test
    public void testUpdateExceptionStatus_CancelTradeAckedError() {
        UpdateExceptionStatusRequest request = mock(UpdateExceptionStatusRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        List<UpdateExceptionStatusRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        doNothing().when(requestValidator).validatePermittedExceptionStatus(anyList(), anyList(), any());
        when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.validateAckedCancleTrade(any(), any())).thenReturn(true);

        List<ActionUpdateResult> results = tradeActionService.updateExceptionStatus(requests, ExceptionStatus.Cancel_Requested, "username");

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains(TradeActionService.CANCEL_TRADE_ACKED_ERROR));
    }

    @Test
    public void testUpdateExceptionStatus_MixedValidations() {
        UpdateExceptionStatusRequest req1 = mock(UpdateExceptionStatusRequest.class);
        UpdateExceptionStatusRequest req2 = mock(UpdateExceptionStatusRequest.class);
        when(req1.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(req2.getDocumentId()).thenReturn(new ActionDocumentId("key2", 1L));
        List<UpdateExceptionStatusRequest> requests = Arrays.asList(req1, req2);

        TradeReportDocument doc1 = createTradeReportDocument("key1", 1L);
        TradeReportDocument doc2 = createTradeReportDocument("key2", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Arrays.asList(doc1, doc2));
        doNothing().when(requestValidator).validatePermittedExceptionStatus(anyList(), anyList(), any());
        when(requestValidator.validateUser(eq("username"), eq(doc1.getTradeReport().getExceptionManagement()))).thenReturn(false);
        when(requestValidator.validateUser(eq("username"), eq(doc2.getTradeReport().getExceptionManagement()))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.validateAckedCancleTrade(any(), any())).thenReturn(false);
        when(requestValidator.validateExceptionStatus(any(), any())).thenReturn(true);
        when(requestValidator.validateApprover(any(), any(), any(), any())).thenReturn(false);
        when(dataUpdater.addExceptionStatus(any(), any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(createSuccessWriteResult("key2", 2L, doc2.getTradeReport())));

        List<ActionUpdateResult> results = tradeActionService.updateExceptionStatus(requests, ExceptionStatus.Edit_Requested, "username");

        assertEquals(2, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(1).isSuccess());
    }

    // Tests for performResetAction
    @Test
    public void testPerformResetAction_EmptyRequests() {
        List<UpdateExceptionStatusRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = tradeActionService.performResetAction(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testPerformResetAction_Success() {
        UpdateExceptionStatusRequest request = mock(UpdateExceptionStatusRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getFlow()).thenReturn("flow");
        List<UpdateExceptionStatusRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        when(requestValidator.validateResetActionApprovalStatus(any(), any())).thenReturn(true);
        when(dataUpdater.resetAction(any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(createSuccessWriteResult("key1", 2L, doc.getTradeReport())));

        List<ActionUpdateResult> results = tradeActionService.performResetAction(requests, "username");

        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testPerformResetAction_ValidationFailure() {
        UpdateExceptionStatusRequest request = mock(UpdateExceptionStatusRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getFlow()).thenReturn("flow");
        List<UpdateExceptionStatusRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        when(requestValidator.validateResetActionApprovalStatus(any(), any())).thenReturn(false);

        List<ActionUpdateResult> results = tradeActionService.performResetAction(requests, "username");

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR));
    }

    // Tests for assignExceptionToUser
    @Test
    public void testAssignExceptionToUser_EmptyRequests() {
        List<AssignTradeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = tradeActionService.assignExceptionToUser(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAssignExceptionToUser_Success() {
        AssignTradeRequest request = mock(AssignTradeRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        List<AssignTradeRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.assignException(any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(createSuccessWriteResult("key1", 2L, doc.getTradeReport())));

        List<ActionUpdateResult> results = tradeActionService.assignExceptionToUser(requests, "username");

        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    // Tests for addJiraId
    @Test
    public void testAddJiraId_EmptyRequests() {
        List<AddTradeJiraReferenceRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = tradeActionService.addJiraId(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAddJiraId_Success() {
        AddTradeJiraReferenceRequest request = mock(AddTradeJiraReferenceRequest.class);
        JiraReference jiraRef = mock(JiraReference.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getJiraReference()).thenReturn(jiraRef);
        when(jiraRef.getJiraId()).thenReturn("JIRA-2");
        List<AddTradeJiraReferenceRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        doNothing().when(requestValidator).validateMAS755Trades(anyList(), anyList());
        when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.isJiraIdPresent(any(), any())).thenReturn(false);
        when(dataUpdater.addJiraIdToException(any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(createSuccessWriteResult("key1", 2L, doc.getTradeReport())));

        List<ActionUpdateResult> results = tradeActionService.addJiraId(requests, "username");

        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testAddJiraId_JiraIdPresent() {
        AddTradeJiraReferenceRequest request = mock(AddTradeJiraReferenceRequest.class);
        JiraReference jiraRef = mock(JiraReference.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getJiraReference()).thenReturn(jiraRef);
        when(jiraRef.getJiraId()).thenReturn("JIRA-1");
        List<AddTradeJiraReferenceRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        doNothing().when(requestValidator).validateMAS755Trades(anyList(), anyList());
        when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.isJiraIdPresent(any(), eq("JIRA-1"))).thenReturn(true);

        List<ActionUpdateResult> results = tradeActionService.addJiraId(requests, "username");

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains(ActionRequestValidator.JIRA_ID_PRESENT));
    }

    // Tests for removeJiraId
    @Test
    public void testRemoveJiraId_EmptyRequests() {
        List<AddTradeJiraReferenceRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = tradeActionService.removeJiraId(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testRemoveJiraId_Success() {
        AddTradeJiraReferenceRequest request = mock(AddTradeJiraReferenceRequest.class);
        JiraReference jiraRef = mock(JiraReference.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getJiraReference()).thenReturn(jiraRef);
        when(jiraRef.getJiraId()).thenReturn("JIRA-1");
        List<AddTradeJiraReferenceRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        doNothing().when(requestValidator).validateMAS755Trades(anyList(), anyList());
        when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.isJiraIdPresent(any(), eq("JIRA-1"))).thenReturn(true);
        when(dataUpdater.removeJiraIdFromException(any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(createSuccessWriteResult("key1", 2L, doc.getTradeReport())));

        List<ActionUpdateResult> results = tradeActionService.removeJiraId(requests, "username");

        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testRemoveJiraId_JiraIdNotPresent() {
        AddTradeJiraReferenceRequest request = mock(AddTradeJiraReferenceRequest.class);
        JiraReference jiraRef = mock(JiraReference.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getJiraReference()).thenReturn(jiraRef);
        when(jiraRef.getJiraId()).thenReturn("JIRA-2");
        List<AddTradeJiraReferenceRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        doNothing().when(requestValidator).validateMAS755Trades(anyList(), anyList());
        when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.isJiraIdPresent(any(), eq("JIRA-2"))).thenReturn(false);

        List<ActionUpdateResult> results = tradeActionService.removeJiraId(requests, "username");

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains(ActionRequestValidator.JIRA_ID_NOT_PRESENT));
    }

    // Tests for addJiraType
    @Test
    public void testAddJiraType_EmptyRequests() {
        List<AddTradeJiraTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = tradeActionService.addJiraType(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAddJiraType_Success() {
        AddTradeJiraTypeRequest request = mock(AddTradeJiraTypeRequest.class);
        JiraType jiraType = mock(JiraType.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getJiraType()).thenReturn(jiraType);
        when(jiraType.getIssueType()).thenReturn("Feature");
        List<AddTradeJiraTypeRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        doNothing().when(requestValidator).validateMAS755Trades(anyList(), anyList());
        when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.addJiraTypeToException(any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(createSuccessWriteResult("key1", 2L, doc.getTradeReport())));

        List<ActionUpdateResult> results = tradeActionService.addJiraType(requests, "username");

        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    // Tests for removeJiraType
    @Test
    public void testRemoveJiraType_EmptyRequests() {
        List<AddTradeJiraTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = tradeActionService.removeJiraType(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testRemoveJiraType_Success() {
        AddTradeJiraTypeRequest request = mock(AddTradeJiraTypeRequest.class);
        JiraType jiraType = mock(JiraType.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getJiraType()).thenReturn(jiraType);
        when(jiraType.getIssueType()).thenReturn("Bug");
        List<AddTradeJiraTypeRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        doNothing().when(requestValidator).validateMAS755Trades(anyList(), anyList());
        when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.removeJiraTypeFromException(any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(createSuccessWriteResult("key1", 2L, doc.getTradeReport())));

        List<ActionUpdateResult> results = tradeActionService.removeJiraType(requests, "username");

        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testRemoveJiraType_JiraTypeNotPresent() {
        AddTradeJiraTypeRequest request = mock(AddTradeJiraTypeRequest.class);
        JiraType jiraType = mock(JiraType.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getJiraType()).thenReturn(jiraType);
        when(jiraType.getIssueType()).thenReturn("Feature");
        List<AddTradeJiraTypeRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        doNothing().when(requestValidator).validateMAS755Trades(anyList(), anyList());
        when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);

        List<ActionUpdateResult> results = tradeActionService.removeJiraType(requests, "username");

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains(ActionRequestValidator.JIRA_TYPE_NOT_PRESENT));
    }

    // Tests for updateUserActionType
    @Test
    public void testUpdateUserActionType_EmptyRequests() {
        List<UpdateUserActionTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = tradeActionService.updateUserActionType(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testUpdateUserActionType_Success() {
        UpdateUserActionTypeRequest request = mock(UpdateUserActionTypeRequest.class);
        Comment comment = mock(Comment.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getUserActionType()).thenReturn("TEST_ACTION");
        when(request.getComment()).thenReturn(comment);
        when(comment.getComment()).thenReturn("Test comment");
        when(request.getAction()).thenReturn("action");
        List<UpdateUserActionTypeRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        doNothing().when(requestValidator).validateMAS755Trades(anyList(), anyList());
        when(dataUpdater.addComments(any(), anyString(), anyString(), anyString())).thenReturn(mock(ExceptionManagement.class));
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(createSuccessWriteResult("key1", 2L, doc.getTradeReport())));

        List<ActionUpdateResult> results = tradeActionService.updateUserActionType(requests, "username");

        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    // Tests for private methods using reflection
    @Test
    public void testGetTradeReport() throws Exception {
        Method method = TradeActionService.class.getDeclaredMethod("getTradeReport", TradeReport.class, ExceptionManagement.class);
        method.setAccessible(true);

        TradeReport report = mock(TradeReport.class);
        ExceptionManagement em = mock(ExceptionManagement.class);
        NonReportableData nrd = mock(NonReportableData.class);
        when(report.getNonReportableData()).thenReturn(nrd);
        TradeReport.Builder builder = mock(TradeReport.Builder.class);
        when(TradeReport.newBuilder(report)).thenReturn(builder);
        when(builder.withExceptionManagement(em)).thenReturn(builder);
        NonReportableData.Builder nrdBuilder = mock(NonReportableData.Builder.class);
        when(NonReportableData.newBuilder(nrd)).thenReturn(nrdBuilder);
        when(nrdBuilder.withUpdatedByApplication(TNTRApplication.BLOTTER_SERVICE)).thenReturn(nrdBuilder);
        when(nrdBuilder.build()).thenReturn(nrd);
        when(builder.withNonReportableData(nrd)).thenReturn(builder);
        TradeReport resultReport = mock(TradeReport.class);
        when(builder.build()).thenReturn(resultReport);

        TradeReport result = (TradeReport) method.invoke(tradeActionService, report, em);

        assertNotNull(result);
        verify(builder).withExceptionManagement(em);
        verify(nrdBuilder).withUpdatedByApplication(TNTRApplication.BLOTTER_SERVICE);
    }

    @Test
    public void testGetReportsWithExpectedBaseVersion() throws Exception {
        Method method = TradeActionService.class.getDeclaredMethod("getReportsWithExpectedBaseVersion", TradeReportDocument.class, TradeReport.class);
        method.setAccessible(true);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        TradeReport report = mock(TradeReport.class);

        Pair<TradeReport, Long> result = (Pair<TradeReport, Long>) method.invoke(tradeActionService, doc, report);

        assertEquals(report, result.getLeft());
        assertEquals(Long.valueOf(1L), result.getRight());
    }

    @Test
    public void testGetTradeReportDocuments() throws Exception {
        Method method = TradeActionService.class.getDeclaredMethod("getTradeReportDocuments", List.class);
        method.setAccessible(true);

        List<DocumentId> docIds = Collections.singletonList(DocumentId.from("key1", 1L));
        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(docIds)).thenReturn(Collections.singletonList(doc));

        List<TradeReportDocument> result = (List<TradeReportDocument>) method.invoke(tradeActionService, docIds);

        assertEquals(1, result.size());
        assertEquals(doc, result.get(0));
    }

    @Test
    public void testSaveAllRecords() throws Exception {
        Method method = TradeActionService.class.getDeclaredMethod("saveAllRecords", List.class, List.class);
        method.setAccessible(true);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        List<TradeReportDocument> docs = Collections.singletonList(doc);
        TradeReport report = mock(TradeReport.class);
        List<Pair<TradeReport, Long>> tradeReports = Collections.singletonList(Pair.of(report, 1L));
        when(dfTradePersistManager.saveAllRecords(tradeReports)).thenReturn(Collections.singletonList(createSuccessWriteResult("key1", 2L, report)));

        List<ActionUpdateResult> results = (List<ActionUpdateResult>) method.invoke(tradeActionService, docs, tradeReports);

        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testUpsertAllRecords() throws Exception {
        Method method = TradeActionService.class.getDeclaredMethod("upsertAllRecords", List.class, List.class);
        method.setAccessible(true);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        List<TradeReportDocument> docs = Collections.singletonList(doc);
        TradeReport report = mock(TradeReport.class);
        List<TradeReport> tradeReports = Collections.singletonList(report);
        when(dfTradePersistManager.upsertAllRecords(tradeReports)).thenReturn(Collections.singletonList(createSuccessWriteResult("key1", 2L, report)));

        List<ActionUpdateResult> results = (List<ActionUpdateResult>) method.invoke(tradeActionService, docs, tradeReports);

        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testGetResult_SuccessAndFailure() throws Exception {
        Method method = TradeActionService.class.getDeclaredMethod("getResult", List.class, List.class);
        method.setAccessible(true);

        TradeReportDocument doc1 = createTradeReportDocument("key1", 1L);
        TradeReportDocument doc2 = createTradeReportDocument("key2", 1L);
        List<TradeReportDocument> docs = Arrays.asList(doc1, doc2);
        WriteResult<TradeReport> success = createSuccessWriteResult("key1", 2L, doc1.getTradeReport());
        WriteResult<TradeReport> failure = createFailureWriteResult("Save error");
        List<WriteResult<TradeReport>> writeResults = Arrays.asList(success, failure);

        List<ActionUpdateResult> results = (List<ActionUpdateResult>) method.invoke(tradeActionService, docs, writeResults);

        assertEquals(2, results.size());
        assertTrue(results.get(0).isSuccess());
        assertFalse(results.get(1).isSuccess());
        assertTrue(results.get(1).getError().contains("Save error"));
    }

    @Test
    public void testGetResult_NullWriteResults() throws Exception {
        Method method = TradeActionService.class.getDeclaredMethod("getResult", List.class, List.class);
        method.setAccessible(true);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        List<TradeReportDocument> docs = Collections.singletonList(doc);

        List<ActionUpdateResult> results = (List<ActionUpdateResult>) method.invoke(tradeActionService, docs, null);

        assertTrue(results.isEmpty());
    }

    @Test
    public void testPopulateTradeRequestMap() throws Exception {
        Method method = TradeActionService.class.getDeclaredMethod("populateTradeRequestMap", UpdateRequest.class, Map.class);
        method.setAccessible(true);

        UpdateRequest request = mock(UpdateRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        Map<DocumentId, UpdateRequest> map = new HashMap<>();

        method.invoke(tradeActionService, request, map);

        assertEquals(1, map.size());
        assertEquals(request, map.get(DocumentId.from("key1", 1L)));
    }

    @Test
    public void testGetTradePrimaryKey() throws Exception {
        Method method = TradeActionService.class.getDeclaredMethod("getTradePrimaryKey", DocumentId.class);
        method.setAccessible(true);

        DocumentId docId = DocumentId.from("key1", 1L);

        ActionDocumentId result = (ActionDocumentId) method.invoke(tradeActionService, docId);

        assertEquals("key1", result.getKey());
        assertEquals(Long.valueOf(1L), result.getVersion());
    }

    @Test
    public void testRollBackRejectedRecords() throws Exception {
        Method method = TradeActionService.class.getDeclaredMethod("rollBackRejectedRecords", Map.class);
        method.setAccessible(true);

        UpdateExceptionStatusRequest request = mock(UpdateExceptionStatusRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 3
