Could you write all the additional test cases for below java class to cover all the remaining scenarios or methods and make the test coverage or code coverage as 100% using junit 4 and old mockito version and java 8:

package com.rbs.tntr.business.taggingService.service.common;

import com.rbs.tntr.api.taggingService.service.common.FileSystemService;
import org.apache.commons.io.FileUtils;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;

@Component
public class FileSystemServiceImpl implements FileSystemService {
    @Override
    public File[] listFiles(File directory, FilenameFilter filter) {
        return directory.listFiles(filter);
    }

    @Override
    public File getFile(String path) {
        return  new File(path);
    }

    @Override
    public void copyFile(File from, File to) throws IOException {
       FileUtils.copyFile(from,to);
    }

    @Override
    public void moveFile(File from, File to) throws IOException {
        FileUtils.moveFile(from,to);
    }
}

Existing test class:

package com.rbs.tntr.business.taggingService.service.common;

import org.junit.Before;
import org.junit.Test;
import org.mockito.*;
import java.io.File;
import java.io.FilenameFilter;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

public class FileSystemServiceImplTest {

    @InjectMocks
    private FileSystemServiceImpl fileSystemService;

    private File mockFile;
    private File[] mockFiles;
    private FilenameFilter mockFilter;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        mockFile = mock(File.class);
        mockFiles = new File[] { mockFile };
        mockFilter = mock(FilenameFilter.class);
    }

    /**
     * Test listFiles when files are returned by directory.listFiles().
     */
    @Test
    public void testListFiles() {
        // Arrange
        File directory = mock(File.class);
        when(directory.listFiles(mockFilter)).thenReturn(mockFiles);

        // Act
        File[] result = fileSystemService.listFiles(directory, mockFilter);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.length);
        assertEquals(mockFile, result[0]);
    }

    /**
     * Test listFiles when directory returns null.
     */
    @Test
    public void testListFilesWithNull() {
        // Arrange
        File directory = mock(File.class);
        when(directory.listFiles(mockFilter)).thenReturn(null);

        // Act
        File[] result = fileSystemService.listFiles(directory, mockFilter);

        // Assert
        assertNull(result);
    }

    /**
     * Test listFiles when directory has no files.
     */
    @Test
    public void testListFilesWithEmptyDirectory() {
        // Arrange
        File directory = mock(File.class);
        when(directory.listFiles(mockFilter)).thenReturn(new File[0]);

        // Act
        File[] result = fileSystemService.listFiles(directory, mockFilter);

        // Assert
        assertNotNull(result);
        assertEquals(0, result.length);
    }

    /**
     * Test getFile method.
     */
    @Test
    public void testGetFile() {
        // Arrange
        String path = "mock/path";
        File expectedFile = new File(path);

        // Act
        File result = fileSystemService.getFile(path);

        // Assert
        assertEquals(expectedFile.getPath(), result.getPath());
    }

}
