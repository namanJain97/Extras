package com.rbs.tntr.business.blotter.web.controllers;

import com.rbs.tntr.business.blotter.security.BlotterSecurityService;
import com.rbs.tntr.business.blotter.security.ISSApiClient;
import com.rbs.tntr.business.blotter.security.TntrRole;
import com.rbs.tntr.domain.blotter.enums.TntrAction;
import org.assertj.core.util.Lists;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.lang.reflect.Method;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

public class ISSControllerTest {

    private ISSController controller;
    private BlotterSecurityService bss;
    private ISSApiClient issClient;

    @Before
    public void init() {
        bss = Mockito.mock(BlotterSecurityService.class);
        issClient = Mockito.mock(ISSApiClient.class);
        controller = new ISSController(issClient, bss);
    }

    // --- getAllIssUsers Method Tests ---
    @Test
    public void getAllUsers_ValidResponse() {
        List<String> users = Lists.newArrayList("user1", "user2");
        Mockito.when(issClient.getAllUsers()).thenReturn(users);

        List<String> result = controller.getAllIssUsers();
        Assert.assertEquals(users, result);
    }

    @Test
    public void getAllUsers_EmptyList() {
        List<String> users = Lists.newArrayList();
        Mockito.when(issClient.getAllUsers()).thenReturn(users);

        List<String> result = controller.getAllIssUsers();
        Assert.assertTrue(result.isEmpty());
    }

    @Test
    public void getAllUsers_NullResponse() {
        Mockito.when(issClient.getAllUsers()).thenReturn(null);

        List<String> result = controller.getAllIssUsers();
        Assert.assertNull(result);
    }

    // --- getUserRoles Method Tests ---
    @Test
    public void getUserRoles_TradeBlotter() {
        List<TntrAction> actions = Lists.newArrayList(TntrAction.AddComments, TntrAction.AddWorkflow, TntrAction.Resubmit);
        Mockito.when(bss.getPermittedActions()).thenReturn(actions);

        HashSet<String> permittedActions = controller.getUserRoles("trade");

        Assert.assertEquals(1, permittedActions.size());
        Assert.assertTrue(permittedActions.contains(TntrAction.AddComments.getValue()));
    }

    @Test
    public void getUserRoles_FuturesBlotter() {
        List<TntrAction> actions = Lists.newArrayList(TntrAction.AddComments, TntrAction.AddWorkflow, TntrAction.Resubmit);
        Mockito.when(bss.getPermittedActions()).thenReturn(actions);

        HashSet<String> permittedActions = controller.getUserRoles("futures");

        Assert.assertEquals(1, permittedActions.size());
        Assert.assertTrue(permittedActions.contains(TntrAction.AddComments.getValue()));
    }

    @Test
    public void getUserRoles_CollateralBlotter() {
        List<TntrAction> actions = Lists.newArrayList(TntrAction.AddComments, TntrAction.Replay, TntrAction.Resubmit);
        Mockito.when(bss.getPermittedActions()).thenReturn(actions);

        HashSet<String> permittedActions = controller.getUserRoles("collateral");

        Assert.assertEquals(1, permittedActions.size());
        Assert.assertTrue(permittedActions.contains(TntrAction.AddComments.getValue()));
    }

    @Test
    public void getUserRoles_CollateralReuseBlotter() {
        List<TntrAction> actions = Lists.newArrayList(TntrAction.AddComments, TntrAction.Replay, TntrAction.Resubmit);
        Mockito.when(bss.getPermittedActions()).thenReturn(actions);

        HashSet<String> permittedActions = controller.getUserRoles("collateralreuse");

        Assert.assertEquals(1, permittedActions.size());
        Assert.assertTrue(permittedActions.contains(TntrAction.AddComments.getValue()));
    }

    @Test
    public void getUserRoles_FuturesCollateralBlotter() {
        List<TntrAction> actions = Lists.newArrayList(TntrAction.AddComments, TntrAction.Replay, TntrAction.Resubmit);
        Mockito.when(bss.getPermittedActions()).thenReturn(actions);

        HashSet<String> permittedActions = controller.getUserRoles("futuresCollateral");

        Assert.assertEquals(1, permittedActions.size());
        Assert.assertTrue(permittedActions.contains(TntrAction.AddComments.getValue()));
    }

    @Test
    public void getUserRoles_FuturesValuationBlotter() {
        List<TntrAction> actions = Lists.newArrayList(TntrAction.AddComments, TntrAction.Replay, TntrAction.Resubmit);
        Mockito.when(bss.getPermittedActions()).thenReturn(actions);

        HashSet<String> permittedActions = controller.getUserRoles("futuresValuation");

        Assert.assertEquals(1, permittedActions.size());
        Assert.assertTrue(permittedActions.contains(TntrAction.AddComments.getValue()));
    }

    @Test
    public void getUserRoles_MarginBlotter() {
        List<TntrAction> actions = Lists.newArrayList(TntrAction.AddComments, TntrAction.Replay, TntrAction.Resubmit);
        Mockito.when(bss.getPermittedActions()).thenReturn(actions);

        HashSet<String> permittedActions = controller.getUserRoles("margin");

        Assert.assertEquals(1, permittedActions.size());
        Assert.assertTrue(permittedActions.contains(TntrAction.AddComments.getValue()));
    }

    @Test
    public void getUserRoles_TradeReconciliationBlotter() {
        List<TntrAction> actions = Lists.newArrayList(TntrAction.AddComments, TntrAction.Replay, TntrAction.Resubmit);
        Mockito.when(bss.getPermittedActions()).thenReturn(actions);

        HashSet<String> permittedActions = controller.getUserRoles("tradereconciliation");

        Assert.assertEquals(1, permittedActions.size());
        Assert.assertTrue(permittedActions.contains(TntrAction.AddComments.getValue()));
    }

    @Test
    public void getUserRoles_AggregationReconciliationBlotter() {
        List<TntrAction> actions = Lists.newArrayList(TntrAction.AddComments, TntrAction.Replay, TntrAction.Resubmit);
        Mockito.when(bss.getPermittedActions()).thenReturn(actions);

        HashSet<String> permittedActions = controller.getUserRoles("aggregationreconciliation");

        Assert.assertEquals(1, permittedActions.size());
        Assert.assertTrue(permittedActions.contains(TntrAction.AddComments.getValue()));
    }

    @Test
    public void getUserRoles_RatesFxReconciliationBlotter() {
        List<TntrAction> actions = Lists.newArrayList(TntrAction.AddComments, TntrAction.Replay, TntrAction.Resubmit);
        Mockito.when(bss.getPermittedActions()).thenReturn(actions);

        HashSet<String> permittedActions = controller.getUserRoles("ratesfxreconciliation");

        Assert.assertEquals(1, permittedActions.size());
        Assert.assertTrue(permittedActions.contains(TntrAction.AddComments.getValue()));
    }

    @Test
    public void getUserRoles_CreditsReconciliationBlotter() {
        List<TntrAction> actions = Lists.newArrayList(TntrAction.AddComments, TntrAction.Replay, TntrAction.Resubmit);
        Mockito.when(bss.getPermittedActions()).thenReturn(actions);

        HashSet<String> permittedActions = controller.getUserRoles("creditsreconciliation");

        Assert.assertEquals(1, permittedActions.size());
        Assert.assertTrue(permittedActions.contains(TntrAction.AddComments.getValue()));
    }

    @Test
    public void getUserRoles_CommodityEquityReconciliationBlotter() {
        List<TntrAction> actions = Lists.newArrayList(TntrAction.AddComments, TntrAction.Replay, TntrAction.Resubmit);
        Mockito.when(bss.getPermittedActions()).thenReturn(actions);

        HashSet<String> permittedActions = controller.getUserRoles("commodityequityreconciliation");

        Assert.assertEquals(1, permittedActions.size());
        Assert.assertTrue(permittedActions.contains(TntrAction.AddComments.getValue()));
    }

    @Test
    public void getUserRoles_ExceptionBlotter() {
        List<TntrAction> actions = Lists.newArrayList(TntrAction.AddComments, TntrAction.Assign, TntrAction.AddJira);
        Mockito.when(bss.getPermittedActions()).thenReturn(actions);

        HashSet<String> permittedActions = controller.getUserRoles("exception");

        Assert.assertEquals(1, permittedActions.size());
        Assert.assertTrue(permittedActions.contains(TntrAction.AddComments.getValue()));
    }

    @Test
    public void getUserRoles_EtdDashboardBlotter() {
        List<TntrAction> actions = Lists.newArrayList(TntrAction.AddComments, TntrAction.AddJira);
        Mockito.when(bss.getPermittedActions()).thenReturn(actions);

        HashSet<String> permittedActions = controller.getUserRoles("etddashboard");

        Assert.assertTrue(permittedActions.isEmpty());
    }

    @Test
    public void getUserRoles_ReconciliationBreakManager() {
        List<TntrAction> actions = Lists.newArrayList(TntrAction.AddComments, TntrAction.AddJiraId, TntrAction.RemoveJiraId);
        Mockito.when(bss.getPermittedActions()).thenReturn(actions);
        Mockito.when(bss.checkUserRole(TntrRole.REFDATAUSER.name())).thenReturn(false);

        HashSet<String> permittedActions = controller.getUserRoles("reconciliationBreakManager");

        Assert.assertEquals(3, permittedActions.size());
        Assert.assertTrue(permittedActions.contains(TntrAction.AddComments.getValue()));
        Assert.assertTrue(permittedActions.contains(TntrAction.AddJiraId.getValue()));
        Assert.assertTrue(permittedActions.contains(TntrAction.RemoveJiraId.getValue()));
    }

    @Test
    public void getUserRoles_ReconciliationBreakManager_RefDataUser() {
        List<TntrAction> actions = Lists.newArrayList(TntrAction.AddComments, TntrAction.AddJiraId);
        Mockito.when(bss.getPermittedActions()).thenReturn(actions);
        Mockito.when(bss.checkUserRole(TntrRole.REFDATAUSER.name())).thenReturn(true);

        HashSet<String> permittedActions = controller.getUserRoles("reconciliationBreakManager");

        Assert.assertTrue(permittedActions.isEmpty());
    }

    @Test
    public void getUserRoles_EditBlotter() {
        List<TntrAction> actions = Lists.newArrayList(TntrAction.EditApprove);
        Mockito.when(bss.getPermittedActions()).thenReturn(actions);

        HashSet<String> permittedActions = controller.getUserRoles("editBlotter");

        Assert.assertEquals(1, permittedActions.size());
        Assert.assertTrue(permittedActions.contains(TntrAction.EditApprove.getValue()));
    }

    @Test
    public void getUserRoles_EditBlotter_NoEditApprove() {
        List<TntrAction> actions = Lists.newArrayList(TntrAction.AddComments);
        Mockito.when(bss.getPermittedActions()).thenReturn(actions);

        HashSet<String> permittedActions = controller.getUserRoles("editBlotter");

        Assert.assertTrue(permittedActions.isEmpty());
    }

    @Test
    public void getUserRoles_AutoAssignBlotter() {
        List<TntrAction> actions = Lists.newArrayList(TntrAction.UpdateRule, TntrAction.ExecuteRule);
        Mockito.when(bss.getPermittedActions()).thenReturn(actions);

        HashSet<String> permittedActions = controller.getUserRoles("autoAssign");

        Assert.assertEquals(2, permittedActions.size());
        Assert.assertTrue(permittedActions.contains(TntrAction.UpdateRule.getValue()));
        Assert.assertTrue(permittedActions.contains(TntrAction.ExecuteRule.getValue()));
    }

    @Test
    public void getUserRoles_AutoTaggingBlotter() {
        List<TntrAction> actions = Lists.newArrayList(TntrAction.UpdateRule, TntrAction.ExecuteRule);
        Mockito.when(bss.getPermittedActions()).thenReturn(actions);

        HashSet<String> permittedActions = controller.getUserRoles("autoTagging");

        Assert.assertEquals(2, permittedActions.size());
        Assert.assertTrue(permittedActions.contains(TntrAction.UpdateRule.getValue()));
        Assert.assertTrue(permittedActions.contains(TntrAction.ExecuteRule.getValue()));
    }

    @Test
    public void getUserRoles_AutoAssignBlotter_NoRules() {
        List<TntrAction> actions = Lists.newArrayList(TntrAction.AddComments);
        Mockito.when(bss.getPermittedActions()).thenReturn(actions);

        HashSet<String> permittedActions = controller.getUserRoles("autoAssign");

        Assert.assertTrue(permittedActions.isEmpty());
    }

    @Test
    public void getUserRoles_UnknownBlotter() {
        List<TntrAction> actions = Lists.newArrayList(TntrAction.AddComments, TntrAction.AddJira);
        Mockito.when(bss.getPermittedActions()).thenReturn(actions);

        HashSet<String> permittedActions = controller.getUserRoles("unknown");

        Assert.assertTrue(permittedActions.isEmpty());
    }

    @Test(expected = IllegalArgumentException.class)
    public void getUserRoles_InvalidBlotterName() {
        List<TntrAction> actions = Lists.newArrayList(TntrAction.AddComments);
        Mockito.when(bss.getPermittedActions()).thenReturn(actions);

        controller.getUserRoles("nonExistingBlotter");
    }

    // --- Private Method Tests via Reflection ---
    @Test
    public void testFilterNotApplicableForBlotter_Trade() throws Exception {
        Method method = ISSController.class.getDeclaredMethod("filterNotApplicableForBlotter", List.class, String.class);
        method.setAccessible(true);

        List<String> actionNames = Lists.newArrayList(TntrAction.AddComments.getValue(), TntrAction.AddWorkflow.getValue(), TntrAction.Resubmit.getValue());
        HashSet<String> result = (HashSet<String>) method.invoke(controller, actionNames, "trade");

        Assert.assertEquals(1, result.size());
        Assert.assertTrue(result.contains(TntrAction.AddComments.getValue()));
    }

    @Test
    public void testFilterNotApplicableForBlotter_Futures() throws Exception {
        Method method = ISSController.class.getDeclaredMethod("filterNotApplicableForBlotter", List.class, String.class);
        method.setAccessible(true);

        List<String> actionNames = Lists.newArrayList(TntrAction.AddComments.getValue(), TntrAction.AddWorkflow.getValue());
        HashSet<String> result = (HashSet<String>) method.invoke(controller, actionNames, "futures");

        Assert.assertEquals(1, result.size());
        Assert.assertTrue(result.contains(TntrAction.AddComments.getValue()));
    }

    @Test
    public void testFilterNotApplicableForBlotter_Collateral() throws Exception {
        Method method = ISSController.class.getDeclaredMethod("filterNotApplicableForBlotter", List.class, String.class);
        method.setAccessible(true);

        List<String> actionNames = Lists.newArrayList(TntrAction.AddComments.getValue(), TntrAction.Replay.getValue());
        HashSet<String> result = (HashSet<String>) method.invoke(controller, actionNames, "collateral");

        Assert.assertEquals(1, result.size());
        Assert.assertTrue(result.contains(TntrAction.AddComments.getValue()));
    }

    @Test
    public void testFilterNotApplicableForBlotter_ReconciliationBreakManager() throws Exception {
        Method method = ISSController.class.getDeclaredMethod("filterNotApplicableForBlotter", List.class, String.class);
        method.setAccessible(true);

        List<String> actionNames = Lists.newArrayList(TntrAction.AddComments.getValue(), TntrAction.AddJiraId.getValue(), TntrAction.RemoveJiraId.getValue());
        Mockito.when(bss.checkUserRole(TntrRole.REFDATAUSER.name())).thenReturn(false);
        HashSet<String> result = (HashSet<String>) method.invoke(controller, actionNames, "reconciliationBreakManager");

        Assert.assertEquals(3, result.size());
        Assert.assertTrue(result.contains(TntrAction.AddComments.getValue()));
        Assert.assertTrue(result.contains(TntrAction.AddJiraId.getValue()));
        Assert.assertTrue(result.contains(TntrAction.RemoveJiraId.getValue()));
    }

    @Test
    public void testFilterNotApplicableForBlotter_Exception() throws Exception {
        Method method = ISSController.class.getDeclaredMethod("filterNotApplicableForBlotter", List.class, String.class);
        method.setAccessible(true);

        List<String> actionNames = Lists.newArrayList(TntrAction.AddComments.getValue(), TntrAction.Assign.getValue());
        HashSet<String> result = (HashSet<String>) method.invoke(controller, actionNames, "exception");

        Assert.assertEquals(1, result.size());
        Assert.assertTrue(result.contains(TntrAction.AddComments.getValue()));
    }

    @Test
    public void testGetReconBreakManagerActions() throws Exception {
        Method method = ISSController.class.getDeclaredMethod("getReconBreakManagerActions", HashSet.class);
        method.setAccessible(true);

        HashSet<String> outputActions = new HashSet<>(Lists.newArrayList(TntrAction.AddComments.getValue(), TntrAction.AddJiraId.getValue()));
        Mockito.when(bss.checkUserRole(TntrRole.REFDATAUSER.name())).thenReturn(false);

        method.invoke(controller, outputActions);

        Assert.assertEquals(2, outputActions.size());
        Assert.assertTrue(outputActions.contains(TntrAction.AddComments.getValue()));
        Assert.assertTrue(outputActions.contains(TntrAction.AddJiraId.getValue()));
    }

    @Test
    public void testGetReconBreakManagerActions_RefDataUser() throws Exception {
        Method method = ISSController.class.getDeclaredMethod("getReconBreakManagerActions", HashSet.class);
        method.setAccessible(true);

        HashSet<String> outputActions = new HashSet<>(Lists.newArrayList(TntrAction.AddComments.getValue()));
        Mockito.when(bss.checkUserRole(TntrRole.REFDATAUSER.name())).thenReturn(true);

        method.invoke(controller, outputActions);

        Assert.assertTrue(outputActions.isEmpty());
    }

    @Test
    public void testGetEditBlotterAction_WithEditApprove() throws Exception {
        Method method = ISSController.class.getDeclaredMethod("getEditBlotterAction", HashSet.class);
        method.setAccessible(true);

        HashSet<String> outputActions = new HashSet<>(Lists.newArrayList(TntrAction.EditApprove.getValue(), TntrAction.AddComments.getValue()));
        method.invoke(controller, outputActions);

        Assert.assertEquals(1, outputActions.size());
        Assert.assertTrue(outputActions.contains(TntrAction.EditApprove.getValue()));
    }

    @Test
    public void testGetEditBlotterAction_WithoutEditApprove() throws Exception {
        Method method = ISSController.class.getDeclaredMethod("getEditBlotterAction", HashSet.class);
        method.setAccessible(true);

        HashSet<String> outputActions = new HashSet<>(Lists.newArrayList(TntrAction.AddComments.getValue()));
        method.invoke(controller, outputActions);

        Assert.assertTrue(outputActions.isEmpty());
    }

    @Test
    public void testGetAutoAssignAction_WithRules() throws Exception {
        Method method = ISSController.class.getDeclaredMethod("getAutoAssignAction", HashSet.class);
        method.setAccessible(true);

        HashSet<String> outputActions = new HashSet<>(Lists.newArrayList(TntrAction.UpdateRule.getValue(), TntrAction.AddComments.getValue()));
        method.invoke(controller, outputActions);

        Assert.assertEquals(2, outputActions.size());
        Assert.assertTrue(outputActions.contains(TntrAction.UpdateRule.getValue()));
        Assert.assertTrue(outputActions.contains(TntrAction.ExecuteRule.getValue()));
    }

    @Test
    public void testGetAutoAssignAction_WithoutRules() throws Exception {
        Method method = ISSController.class.getDeclaredMethod("getAutoAssignAction", HashSet.class);
        method.setAccessible(true);

        HashSet<String> outputActions = new HashSet<>(Lists.newArrayList(TntrAction.AddComments.getValue()));
        method.invoke(controller, outputActions);

        Assert.assertTrue(outputActions.isEmpty());
    }

    @Test
    public void testRemoveTradeReportActions() throws Exception {
        Method method = ISSController.class.getDeclaredMethod("removeTradeReportActions", HashSet.class);
        method.setAccessible(true);

        HashSet<String> outputActions = new HashSet<>(Lists.newArrayList(TntrAction.AddComments.getValue(), TntrAction.RequestOpenException.getValue()));
        method.invoke(controller, outputActions);

        Assert.assertEquals(1, outputActions.size());
        Assert.assertTrue(outputActions.contains(TntrAction.AddComments.getValue()));
    }
}
