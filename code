package com.rbs.tntr.business.taggingService.service.common;

import java.io.InputStream;
import java.net.URL;
import java.util.List;
import java.util.TimeZone;
import java.util.function.Consumer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.ResponseExtractor;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.client.UnknownHttpStatusCodeException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.base.Preconditions;
import com.nwm.tntr.configuration.ItrConfiguration;
import com.nwm.tntr.itr.IQuery;
import com.nwm.tntr.utiil.RequestIdGenerator;
import com.rbs.tntr.business.taggingService.configuration.TaggingAuthenticationService;
import com.rbs.tntr.domain.taggingService.jiraTaggingDomain.common.Itr2Query;
import com.rbs.tntr.domain.taggingService.jiraTaggingDomain.exceptions.TaggingServiceRunTimeException;

@Component
public class ItrClientImpl implements ItrClient {
    private static final Logger logger= LoggerFactory.getLogger(ItrClientImpl.class);
    final RestTemplate restTemplate;
    final TaggingAuthenticationService authenticationService;
    final ItrConfiguration itrConfiguration;

    static final ObjectMapper objectMapper ;
    static {
        objectMapper= new ObjectMapper();
        objectMapper.setTimeZone(TimeZone.getDefault());
    }

    @Autowired
    public ItrClientImpl(RestTemplate restTemplate,
                         TaggingAuthenticationService authenticationService,
                         ItrConfiguration itrConfiguration) {
        this.restTemplate = restTemplate;
        this.authenticationService = authenticationService;
        this.itrConfiguration = itrConfiguration;
    }

    @Override
    public <T> List<T> fetch(URL url, Itr2Query query,Class<T> tClass) {
        String requestId = RequestIdGenerator.getRequestId();
        String jsonBody = getJsonBody(query);
        logger.info("fetch reqeuestId:{} url:{}  body:{}",requestId,url,jsonBody);
        HttpEntity<String> httpEntity = new HttpEntity<>(jsonBody, getHeaderWithSso(requestId));
        ResponseEntity<List<T>> response = executeRestCall(url, tClass, requestId, httpEntity);
        return  response.getBody();
    }

    @Override
    public <T> List<T> fetch(String url, Itr2Query query, Consumer<InputStream> streamConsumer) {
        String requestId = RequestIdGenerator.getRequestId();
        String jsonBody = getJsonBody(query);
        logger.info("fetch reqeuestId:{} url:{}  body:{}", requestId, url, jsonBody);
        HttpEntity<Itr2Query> httpEntity = new HttpEntity<>(query, getHeaderWithSso(requestId));

        final ResponseExtractor<List<T>> responseExtractor =
                (ClientHttpResponse clientHttpResponse) -> {
                    streamConsumer.accept(clientHttpResponse.getBody());
                    return null;
                };

        return executeRestCallWithoutBuffering(url,requestId,httpEntity,responseExtractor);
    }

    @Override
    public <T> List<T> fetch(String url, IQuery query, Consumer<InputStream> streamConsumer) {
        String requestId = RequestIdGenerator.getRequestId();
        String jsonBody = getJsonBody(query);
        logger.info("fetch reqeuestId:{} url:{}  body:{}", requestId, url, jsonBody);
        HttpEntity<IQuery> httpEntity = new HttpEntity<>(query, getHeaderWithSso(requestId));

        final ResponseExtractor<List<T>> responseExtractor =
                (ClientHttpResponse clientHttpResponse) -> {
                    streamConsumer.accept(clientHttpResponse.getBody());
                    return null;
                };

        return executeRestCallWithoutBuffering(url,requestId,httpEntity,responseExtractor);
    }

    private <T> List<T> executeRestCallWithoutBuffering( String url,
                                                         String requestId,
                                                         HttpEntity httpEntity,
                                                         ResponseExtractor<List<T>> responseExtractor) {
        try {

            List<T> result = restTemplate.execute(url,
                    HttpMethod.POST,
                    JsonRequestCallback.createFor(httpEntity),
                    responseExtractor);
            return result;
        } catch (HttpClientErrorException | HttpServerErrorException | UnknownHttpStatusCodeException httpException) {
            String response = httpException.getResponseBodyAsString();
            String message = httpException.getMessage();
            logger.error("fetch reqeuestId:{} error:{}  response:{}", requestId, message, response);
            throw httpException;
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
            throw ex;
        }
    }

    private <T> ResponseEntity<List<T>> executeRestCall(URL url, Class<T> tClass, String requestId, HttpEntity<String> httpEntity) {
        try {
            ResponseEntity<List<T>> response = restTemplate.exchange(
                    url.toString(),
                    HttpMethod.POST,
                    httpEntity,
                    ParameterizedTypeReferenceBuilder.getListTypeReference(tClass)
            );
            Preconditions.checkState(
                    response.getStatusCode().equals(HttpStatus.OK),
                    "Unable to fetch data from Itr");
            logger.info("fetch reqeuestId:{} recordCount:{}", requestId, response.getBody().size());
            return response;
        }
        catch (HttpClientErrorException|HttpServerErrorException|UnknownHttpStatusCodeException httpException){
            String response= httpException.getResponseBodyAsString();
            String message = httpException.getMessage();
            logger.error("fetch reqeuestId:{} error:{}  response:{}", requestId, message,response);
            throw  httpException;
        }
        catch (Exception ex){
          logger.error(ex.getMessage(),ex);
          throw  ex;
        }
    }

    private String getJsonBody(Object query)  {
        try {
            return objectMapper.writeValueAsString(query);
        } catch (JsonProcessingException e) {
			throw new TaggingServiceRunTimeException(e);
        }
    }

    private HttpHeaders getHeaderWithSso(String requestId) {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        String ssoToken =
                authenticationService.getApplicationSsoToken(
                        itrConfiguration.getItr2SsoPermission()
                );
        headers.set("sso-token",ssoToken);
        headers.set("RequestId",requestId);
        return headers;
    }
}
