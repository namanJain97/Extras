package com.rbs.tntr.business.blotter.utility;

import static org.junit.Assert.*;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.*;

import java.io.IOException;
import java.lang.reflect.Method;
import java.util.*;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.rbs.datafabric.api.PagedScanResult;
import com.rbs.datafabric.domain.client.builder.NextScanPageRequestBuilder;
import com.rbs.datafabric.domain.client.builder.ScanRequestBuilder;
import com.rbs.tntr.domain.blotter.exceptions.ValidationException;
import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Lists;
import com.nwm.tntr.commons.repository.df.DfConnectionManager;
import com.rbs.datafabric.agile.commons.lang.StartableException;
import com.rbs.datafabric.client.DataFabricClient;
import com.rbs.datafabric.domain.JsonDocument;
import com.rbs.datafabric.domain.Record;
import com.rbs.datafabric.domain.RecordId;
import com.rbs.tntr.business.blotter.configuration.DfExportConfig;
import com.rbs.tntr.business.blotter.configuration.DfFieldMapper;
import com.rbs.tntr.business.blotter.search.querybuilder.DfExportScan;
import com.rbs.tntr.business.blotter.search.querybuilder.DfScanParameters;
import com.rbs.tntr.business.blotter.services.datetime.DateTimeService;
import com.rbs.tntr.business.blotter.services.datetime.DateTimeServiceImpl;

/**
 * Description : Test class for DF Utility
 *
 * @author agrakit
 * Created By: Niket Agrawal
 * Created On 13-09-2021
 */
public class DataFabricExportUtilityTest {
    DfConnectionManager dfConnectionManager;
    DfExportConfig dfExportConfig;
    DataFabricExportUtility dfUtility;
    DfFieldMapper dfFieldMapper;
    DataFabricClient client;
    DateTimeService dateTimeService;
    DfExportScan scan;

    private static final String DB = "Tntr";
    private static final String TRADE = "TNTR-trade-uat";
    private static final String RECON = "TNTR-reconciliation-uat";

    @Before
    public void setup() throws StartableException {
        dfConnectionManager = Mockito.mock(DfConnectionManager.class);
        dfExportConfig = Mockito.mock(DfExportConfig.class);
        dfFieldMapper = Mockito.mock(DfFieldMapper.class);
        client = Mockito.mock(DataFabricClient.class);
        dateTimeService = new DateTimeServiceImpl();
        scan = new DfExportScan();

        when(dfConnectionManager.getDfClient()).thenReturn(client);
        when(dfFieldMapper.getCollectionDbMap()).thenReturn(ImmutableMap.of(TRADE, DB, RECON, DB));
        when(dfExportConfig.getScanReadTimeoutInSeconds()).thenReturn(600);
        when(dfFieldMapper.getCollectionNameMap())
                .thenReturn(ImmutableMap.of("Transaction", TRADE, "Reconciliation", RECON));
        when(dfFieldMapper.getReconBreakAgeMap()).thenReturn(ImmutableMap.of("MasPositionFx", "T-1"));
        when(dfFieldMapper.getOrderedColumnMap()).thenReturn(
                ImmutableMap.of("Reconciliation.MasPositionFx", Lists.newArrayList("Break Age")));
        when(dfFieldMapper.getCollectionToUiFieldMap())
                .thenReturn(ImmutableMap.of("Tntr.Transaction",
                        Collections.singletonMap("subjectIdentifier.sourceSystem", "Source System"),
                        "Tntr.Reconciliation.MasPositionFx",
                        Collections.singletonMap("breakManagement.breakAge", "Break Age"),
                        "Tntr.Reconciliation.PairedAndUnmatchedEmirEsmaRates",
                        getPandMFieldMap(),
                        "Tntr.Reconciliation.CftcPositionFx",
                        Collections.singletonMap("breakManagement.breakAge", "Break Age")));
        when(dfFieldMapper.getUiToCollectionFieldMap())
                .thenReturn(ImmutableMap.of("Tntr.Transaction",
                        Collections.singletonMap("Source System", "subjectIdentifier.sourceSystem"),
                        "Tntr.Reconciliation.MasPositionFx",
                        Collections.singletonMap("Break Age", "breakManagement.breakAge"),
                        "Tntr.Reconciliation.PairedAndUnmatchedEmirEsmaRates",
                        getUiFieldMap(),
                        "Tntr.Reconciliation.CftcPositionFx",
                        Collections.singletonMap("Break Age", "breakManagement.breakAge")));
        dfUtility = new DataFabricExportUtility(dfConnectionManager, dfExportConfig, dfFieldMapper, dateTimeService);
    }

    // Existing Tests (unchanged)
    @Test
    public void testParseJsonRecords() throws Exception {
        List<Map<String, String>> recordList = dfUtility.convertScannedRecords(getMockRecords(getJsonRecords()),
                "Transaction", scan);
        assertNotNull(recordList);
        assertTrue(recordList.size() > 0);
        assertEquals("GDS GBLO", recordList.get(0).get("subjectIdentifier.sourceSystem"));
        assertEquals("Transaction", recordList.get(0).get("Flow"));
    }

    @Test
    public void testReconBreakAge() throws Exception {
        scan.setWhere("(reconciliationBusinessDateTime = '2022-07-12T00:00:00.000Z' AND subjectIdentifier.reconciliationRuleIdentifier = 'MasPositionFx')");
        DfScanParameters param = createDfScanParameters("Reconciliation", "Break Age", scan.getWhere());
        param.setFieldConversion(true);
        dfUtility.getScanRequestBuilder(param);
        DateTime lastBreakOccuranceDate = dateTimeService.getPastDateTime(dateTimeService.getCurrentDateTime(), 2);
        List<Map<String, String>> recordList = dfUtility.convertScannedRecords(getMockRecords(getJsonReconRecords(lastBreakOccuranceDate.toString())),
                "Reconciliation", scan);
        String output = recordList.get(0).get("Break Age");
        assertNotNull(recordList);
        assertTrue(recordList.size() > 0);
        assertEquals(output, recordList.get(0).get("Break Age"));
    }

    @Test
    public void testReconBreakAgeNotPresent() throws Exception {
        scan.setWhere(
                "(reconciliationBusinessDateTime = '2022-07-12T00:00:00.000Z' AND subjectIdentifier.reconciliationRuleIdentifier = 'MasPositionFx')");
        DfScanParameters param = createDfScanParameters("Reconciliation", "Break Age", scan.getWhere());
        param.setFieldConversion(true);
        dfUtility.getScanRequestBuilder(param);
        DateTime lastBreakOccuranceDate = dateTimeService.getPastDateTime(dateTimeService.getCurrentDateTime(), 0);
        List<Map<String, String>> recordList = dfUtility.convertScannedRecords(getMockRecords(getJsonReconRecords(lastBreakOccuranceDate.toString())),
                "Reconciliation", scan);
        assertNotNull(recordList);
        assertTrue(recordList.size() > 0);
        assertFalse(recordList.get(0).containsKey("Break Age"));
    }

    @Test
    public void testCftcReconBreakAge() throws Exception {
        scan.setWhere(
                "(reconciliationBusinessDateTime = '2022-07-12T00:00:00.000Z' AND subjectIdentifier.reconciliationRuleIdentifier = 'CftcPositionFx')");
        DfScanParameters param = createDfScanParameters("Reconciliation", "Break Age", scan.getWhere());
        param.setFieldConversion(true);
        dfUtility.getScanRequestBuilder(param);
        List<Map<String, String>> recordList = dfUtility.convertScannedRecords(getMockRecords(getCftcJsonRecord()),
                "Reconciliation", scan);
        assertNotNull(recordList);
        assertTrue(recordList.size() > 0);
        assertEquals(String.valueOf(1), recordList.get(0).get("Break Age"));
    }

    @Test
    public void testPnMRecord() throws IOException {
        scan.setWhere("subjectIdentifier.reconciliationRuleIdentifier = 'PairedAndUnmatchedEmirEsmaRates' and reconciliationBusinessDateTime = '2024-05-15T00:00:00.000Z' and subjectIdentifier.sourceSystemMatchingKeyIdentifier = 'X3CZP3CK64YBHON1LE12|529900GGYMNGRQTDOO93|CK64YBHON1000133947543TRN'");
        DfScanParameters param = createDfScanParameters("Reconciliation", "", scan.getWhere());
        param.setFieldConversion(true);
        scan.setExportForBreak(true);
        dfUtility.getScanRequestBuilder(param);
        List<Map<String, String>> recordList = dfUtility.convertScannedRecords(getMockRecords(getPnMJsonRecord()),
                "Reconciliation", scan);
        assertNotNull(recordList);
        assertTrue(recordList.size() > 0);
    }

    @Test
    public void testParseJsonRecords_withSelect() throws Exception {
        DfScanParameters param = createDfScanParameters("Transaction", "Source System", "where");
        param.setFieldConversion(true);
        dfUtility.getScanRequestBuilder(param);
        List<Map<String, String>> recordList = dfUtility.convertScannedRecords(getMockRecords(getJsonRecords()),
                "Transaction", scan);
        assertNotNull(recordList);
        assertTrue(recordList.size() > 0);
        assertEquals("GDS GBLO", recordList.get(0).get("Source System"));
    }

    @Test
    public void testParseJsonRecords_withArray() throws Exception {
        List<Map<String, String>> recordList = dfUtility.convertScannedRecords(getMockRecords(getJsonRecords()),
                "Transaction", scan);
        assertNotNull(recordList);
        assertTrue(recordList.size() > 0);
        assertEquals("Test", recordList.get(0).get("exceptionManagement.userComments.0"));
    }

    @Test
    public void testReconRuleIdentifierExtraction() {
        DfScanParameters param = createDfScanParameters("Reconciliation", null,
                "subjectIdentifier.reconciliationRuleIdentifier = 'EmirPositionRates' AND miDetails.party1LEI = 'RR3QWICWWIPCS8A4S074') and reconciliationBusinessDateTime = '2022-10-05T00:00:00.000Z'");
        String reconName = dfUtility.populateReconRuleIdentifierName(param);
        assertEquals("EmirPositionRates", reconName);
    }

    @Test(expected = ValidationException.class)
    public void testGetScanRequestBuilder_CollectionMappingNotFound() throws Exception {
        DfScanParameters param = createDfScanParameters("InvalidCollection", "Field", "where");
        dfUtility.getScanRequestBuilder(param);
    }

    @Test(expected = ValidationException.class)
    public void testGetScanRequestBuilder_CollectionDatabaseMappingNotFound() throws Exception {
        DfScanParameters param = createDfScanParameters("Transaction", "Field", "where");
        when(dfFieldMapper.getCollectionDbMap()).thenReturn(Collections.emptyMap());
        dfUtility.getScanRequestBuilder(param);
    }

    @Test
    public void testGetBreakAge_WithValidDate() {
        DfExportScan scan = new DfExportScan();
        scan.setWhere("some conditions with ID");
        String breakAge = String.valueOf(dfUtility.getBreakAge("2022-01-01T00:00:00.000Z", scan));
        assertTrue(Integer.parseInt(breakAge) > 0);
    }

    @Test
    public void testConvertScannedRecords_NoRecords() throws IOException {
        List<Map<String, String>> recordList = dfUtility.convertScannedRecords(Collections.emptyList(), "Transaction", new DfExportScan());
        assertNotNull(recordList);
        assertTrue(recordList.isEmpty());
    }

    @Test
    public void testGetNativeScanRequestBuilder() {
        DfScanParameters param = createDfScanParameters("Transaction", "Field", "where");
        ScanRequestBuilder scanRequestBuilder = dfUtility.getNativeScanRequestBuilder(param);
        assertNotNull(scanRequestBuilder);
    }

    @Test
    public void testClearAllHeaders() {
        dfUtility.populateAllHeaders(Lists.newArrayList(createDfScanParameters("Transaction", "none", "none")));
        assertTrue(dfUtility.getAllHeaders().isEmpty());
    }

    @Test
    public void testPopulateAllHeaders() {
        List<DfScanParameters> params = Lists.newArrayList();
        DfScanParameters scan = createDfScanParameters("Reconciliation", "Break Age", "reconciliationBusinessDateTime = '2024-10-09T00:00:00.000Z' and subjectIdentifier.reconciliationRuleIdentifier = 'MasPositionFx'");
        scan.setFieldConversion(true);
        DfScanParameters scan_no_select = createDfScanParameters("Reconciliation", "", "reconciliationBusinessDateTime = '2024-10-09T00:00:00.000Z' and subjectIdentifier.reconciliationRuleIdentifier = 'MasPositionFx'");
        scan_no_select.setFieldConversion(true);
        params.add(scan);
        params.add(scan_no_select);
        dfUtility.populateAllHeaders(params);
        assertFalse(dfUtility.getAllHeaders().isEmpty());
    }

    @Test
    public void testGetBreakAge_WithFutureDate() {
        DfExportScan scan = new DfExportScan();
        scan.setWhere("some conditions with ID");
        int breakAge = dfUtility.getBreakAge("2025-01-01T00:00:00.000Z", scan);
        assertNotNull(breakAge);
    }

    @Test
    public void testGetBreakAge_WithNegatedBreakCount() {
        DfExportScan scan = new DfExportScan();
        scan.setWhere("some conditions with ID");
        int breakAge = dfUtility.getBreakAge("2023-01-01T00:00:00.000Z", scan);
        assertTrue(breakAge >= 0);
    }

    @Test
    public void testCalculateExceptionAge_WithValidTimestamp() throws Exception {
        String timestamp = "2022-01-01T00:00:00.000Z";
        String exceptionAge = invokeCalculateExceptionAgeMethod(timestamp);
        assertNotNull(exceptionAge);
    }

    @Test
    public void testCalculateExceptionAge_WithNullTimestamp() throws Exception {
        String exceptionAge = invokeCalculateExceptionAgeMethod(null);
        assertEquals("0y-0M-0d-0h-0m-0s", exceptionAge);
    }

    @Test
    public void testCalculateExceptionBucket_WithValidTimestamp() throws Exception {
        String bucket = invokeCalculateExceptionBucketMethod("2022-01-01T00:00:00.000Z");
        assertNotNull(bucket);
    }

    @Test
    public void testCalculateExceptionBucket_WithNullTimestamp() throws Exception {
        String bucket = invokeCalculateExceptionBucketMethod(null);
        assertEquals("", bucket);
    }

    @Test
    public void testPopulateManualFields_WithValidMap() throws Exception {
        Map<String, String> map = new HashMap<>();
        map.put("transactionStateValue", "Processing Error");
        map.put("TNTR_RECEIVED_TIMESTAMP", "2022-01-01T00:00:00.000Z");
        invokePopulateManualFieldsMethod(map);
        assertEquals(null, map.get("EXCEPTION_AGE"));
    }

    @Test
    public void testGetNextPage_ValidParameters() throws Exception {
        String scanId = "someScanId";
        int pageLimit = 10;
        PagedScanResult result = dfUtility.getNextPage(scanId, pageLimit);
        verify(client).continuePagedScan(any());
    }

    @Test
    public void testConvertDfKeys_WithValidKey() throws Exception {
        String convertedKey = invokeConvertDfKeysMethod("some.key.1");
        assertEquals("some.key", convertedKey);
    }

    // Additional Test Cases for 100% Coverage

    @Test
    public void testParseJsonTree_WithNestedArrays() throws Exception {
        String json = "{\"array\": [{\"nested\": {\"key\": \"value\"}}, {\"nested\": {\"key\": \"value2\"}}]}";
        Map<String, String> dataMap = new HashMap<>();
        JsonNode rootNode = new ObjectMapper().readTree(json);
        invokeParseJsonTreeMethod("", rootNode, dataMap);
        assertEquals("value", dataMap.get("array.0.nested.key"));
        assertEquals("value2", dataMap.get("array.1.nested.key"));
    }

    @Test
    public void testParseJsonTree_WithEmptyArray() throws Exception {
        String json = "{\"array\": []}";
        Map<String, String> dataMap = new HashMap<>();
        JsonNode rootNode = new ObjectMapper().readTree(json);
        invokeParseJsonTreeMethod("", rootNode, dataMap);
        assertTrue(dataMap.isEmpty());
    }

    @Test
    public void testConvertDfKeyMap_KeyNotFound() throws Exception {
        Map<String, String> map = new HashMap<>();
        map.put("unknown.key", "value");
        Map<String, String> convertedMap = invokeConvertDfKeyMapMethod(map);
        assertTrue(convertedMap.isEmpty());
    }

    @Test
    public void testConvertDfKeyMap_WithDuplicateKeys() throws Exception {
        Map<String, String> map = new HashMap<>();
        map.put("subjectIdentifier.sourceSystem.0", "val1");
        map.put("subjectIdentifier.sourceSystem.1", "val2");
        Map<String, String> convertedMap = invokeConvertDfKeyMapMethod(map);
        assertEquals("val1,val2", convertedMap.get("Source System"));
    }

    @Test
    public void testConvertDfKeyMapRecon_MultipleSources() throws Exception {
        Map<String, String> map = new HashMap<>();
        map.put("sourceRecords.0.field", "source1");
        map.put("sourceRecords.1.field", "source2");
        map.put("targetRecords.0.field", "target1");
        List<Map<String, String>> result = invokeConvertDfKeyMapReconMethod(map, scan);
        assertEquals(2, result.size());
        assertEquals("source1", result.get(0).get("field"));
        assertEquals("source2", result.get(1).get("field"));
    }

    @Test
    public void testConvertDfKeyMapRecon_NoSourcesOrTargets() throws Exception {
        Map<String, String> map = new HashMap<>();
        map.put("base.field", "baseValue");
        List<Map<String, String>> result = invokeConvertDfKeyMapReconMethod(map, scan);
        assertEquals(1, result.size());
        assertEquals("baseValue", result.get(0).get("base.field"));
    }

    @Test
    public void testPopulateManualFields_SubmittedState() throws Exception {
        Map<String, String> map = new HashMap<>();
        map.put("transactionStateValue", "Submitted");
        invokePopulateManualFieldsMethod(map);
        assertEquals("No Response", map.get("MI_STATUS"));
    }

    @Test
    public void testPopulateManualFields_EmptyStateAndDeadline() throws Exception {
        Map<String, String> map = new HashMap<>();
        map.put("transactionStateValue", "");
        map.put("REPORTING_DEADLINE", "");
        invokePopulateManualFieldsMethod(map);
        assertEquals("UNKNOWN", map.get("TIMELINESS"));
        assertEquals("UNKNOWN", map.get("MI_STATUS"));
    }

    @Test
    public void testRenderMiReportData_MIUnknown() throws Exception {
        Map<String, String> map = new HashMap<>();
        map.put("MI_IS_DELEGATED", "Client Trade");
        invokeRenderMiReportDataMethod("MI_UNKNOWN", map);
        assertEquals("Delegated", map.get("MI_IS_DELEGATED"));
    }

    @Test
    public void testRenderMiReportData_DailyTransactionCloseStatus() throws Exception {
        Map<String, String> map = new HashMap<>();
        map.put("MI_DAILY_EXCEPTION_STATUS", "Close");
        invokeRenderMiReportDataMethod("MI_DAILY_TRANSACTION", map);
        assertEquals("Close", map.get("MI_DAILY_EXCEPTION_STATUS"));
    }

    @Test
    public void testCalculateAge_PastDate() throws Exception {
        String age = invokeCalculateAgeMethod("2022-01-01T00:00:00.000Z");
        assertTrue(Long.parseLong(age) > 0);
    }

    @Test
    public void testGetDateDifferenceInStandardFormat_Years() throws Exception {
        DateTime start = new DateTime(2022, 1, 1, 0, 0);
        DateTime end = new DateTime(2023, 1, 1, 0, 0);
        String diff = invokeGetDateDifferenceInStandardFormatMethod(start, end);
        assertEquals("1y", diff);
    }

    @Test
    public void testGetDateDifferenceInStandardFormat_EndBeforeStart() throws Exception {
        DateTime start = new DateTime(2023, 1, 1, 0, 0);
        DateTime end = new DateTime(2022, 1, 1, 0, 0);
        String diff = invokeGetDateDifferenceInStandardFormatMethod(start, end);
        assertEquals("", diff);
    }

    @Test
    public void testGetBreakAgebucket_BoundaryValues() throws Exception {
        assertEquals("'0-7", invokeGetBreakAgebucketMethod(0));
        assertEquals("'7-30", invokeGetBreakAgebucketMethod(7));
        assertEquals("'60+", invokeGetBreakAgebucketMethod(61));
    }

    @Test
    public void testGetNextPage_NoMorePages() throws Exception {
        when(client.continuePagedScan(any(NextScanPageRequestBuilder.class))).thenReturn(null);
        PagedScanResult result = dfUtility.getNextPage("scanId", 10);
        assertNull(result);
    }

    @Test
    public void testConvertScannedRecords_NullDocument() throws Exception {
        Record record = new Record();
        record.setId(new RecordId());
        record.setDocument(null);
        List<Map<String, String>> result = dfUtility.convertScannedRecords(Collections.singletonList(record), "Transaction", scan);
        assertTrue(result.isEmpty());
    }

    @Test(expected = IOException.class)
    public void testConvertScannedRecords_InvalidJson() throws Exception {
        Record record = new Record();
        record.setId(new RecordId());
        record.setDocument(new JsonDocument().withContents("invalid json"));
        dfUtility.convertScannedRecords(Collections.singletonList(record), "Transaction", scan);
    }

    @Test
    public void testGetDataFabricClient() throws Exception {
        DataFabricClient client = dfUtility.getDataFabricClient();
        assertNotNull(client);
    }

    @Test
    public void testConvertDfKeys_EmptyKey() throws Exception {
        String result = invokeConvertDfKeysMethod("");
        assertEquals("", result);
    }

    @Test
    public void testConvertDfKeysRecon_WithDoubleDots() throws Exception {
        String result = invokeConvertDfKeysReconMethod("key..1..sub");
        assertEquals("key.sub", result);
    }

    @Test
    public void testGetArrayKeyRecon() throws Exception {
        String result = invokeGetArrayKeyReconMethod("sourceRecords.0.field");
        assertEquals("sourceRecords0", result);
    }

    @Test
    public void testGetReconNameFromScan() throws Exception {
        scan.setWhere("subjectIdentifier.reconciliationRuleIdentifier = 'TestRecon'");
        String reconName = invokeGetReconNameFromScanMethod(scan);
        assertEquals("TestRecon", reconName);
    }

    @Test
    public void testPrepareAllHeaders_NoFieldConversion() throws Exception {
        invokePrepareAllHeadersMethod(false, "Tntr.Transaction", "Transaction");
        assertFalse(dfUtility.getAllHeaders().isEmpty());
    }

    @Test
    public void testPrepareSelectHeaders_NoFieldConversion() throws Exception {
        invokePrepareSelectHeadersMethod(false, "Tntr.Transaction", "Transaction", "subjectIdentifier.sourceSystem");
        assertFalse(dfUtility.getAllHeaders().isEmpty());
    }

    @Test
    public void testConvertSelectParameters_SpecialSelects() throws Exception {
        DfScanParameters param = createDfScanParameters("Transaction", "TOTAL_COUNT", "where");
        dfUtility.getScanRequestBuilder(param);
        assertEquals("TOTAL_COUNT", param.getSelect());
    }

    @Test
    public void testCheckAndFilterBreakData_NoBreakExport() throws Exception {
        Map<String, String> subRecord = new HashMap<>();
        subRecord.put("field1", "value1");
        Map<String, String> baseDataMap = new HashMap<>();
        DfExportScan noBreakScan = new DfExportScan();
        noBreakScan.setExportForBreak(false);
        invokeCheckAndFilterBreakDataMethod(subRecord, baseDataMap, noBreakScan);
        assertEquals("value1", subRecord.get("field1"));
    }

    // Helper Methods (unchanged)
    private DfScanParameters createDfScanParameters(String collectionName, String select, String where) {
        return new DfScanParameters(select, where, "group by clause", "order by clause", collectionName, false,
                "blotterName");
    }

    private List<Record> getMockRecords(List<String> jsonRecords) {
        List<Record> records = Lists.newArrayList();
        for (int i = 0; i < jsonRecords.size(); i++) {
            Record record = new Record();
            RecordId recordId = new RecordId();
            recordId.setDatabaseName(DB);
            recordId.setCollectionName(TRADE);
            record.setId(recordId);
            record.setDocument((new JsonDocument()).withContents(jsonRecords.get(i)));
            records.add(record);
        }
        return records;
    }

    private List<String> getJsonRecords() {
        List<String> jsonRecords = Lists.newArrayList();
        jsonRecords.add(
                "{\"subjectIdentifier\":{\"transactionId\":\"134783067\",\"sourceSystem\":\"GDS GBLO\",\"version\":2,\"regulatoryRegimeIdentifier\":{\"name\":\"European Markets Infrastructure Regulation\",\"regulatoryAuthority\":\"Financial Conduct Authority (UK)\"},\"regimeImpactType\":\"Transaction Reporting\",\"reportTriggerType\":\"Transaction Lifecycle\",\"reportSubmissionType\":\"Snapshot\"},\"exceptionManagement\":{\"userComments\":[\"Test\",\"Need to replay\"],\"issueTypes\":[\"Mis Reporting\"],\"approvalStatus\":\"Replay Approved\",\"assignedTo\":\"sharnin\",\"approvedBy\":\"sharnin\",\"lastActionUser\":\"sharnin\",\"lastActionDate\":\"2021-09-10T13:09:40.053Z\",\"lastAction\":\"TntrRequestReplay\"},\"transactionReportingStatus\":{\"sourceSystemIdentifier\":\"TnTR\",\"transactionStateValue\":\"Acknowledged\",\"stateTransitionDateTime\":\"2021-09-10T12:12:07.902Z\",\"stateTransitionEffectiveDateTime\":\"2021-09-10T12:12:07.902Z\",\"reportSubmissionRepository\":\"DTCCEU\"},\"reportableData\":{\"action\":\"New\",\"clearingStatus\":\"false\",\"confirmationMethod\":\"NotConfirmed\",\"compressedTradeIndicator\":\"true\",\"contractType\":\"SW\",\"effectiveDate1\":\"2021-09-13T00:00:00.000Z\",\"executionVenueId\":\"XXXX\",\"executionVenueMicCode\":\"XXXX\",\"intraGroupIndicator\":\"false\",\"maturityDate\":\"2026-09-13T00:00:00.000Z\",\"leg2SettlementCurr\":\"USD\",\"level\":\"T\",\"lifecycleEvent\":\"Trade\",\"mandatoryClearingJustification\":\"false\",\"messageId\":\"134783067_0_POU_1631275924038_uat\",\"messageType\":\"Snapshot\",\"notionalAmount1\":100000000,\"notionalCurr1\":\"GBP\",\"notionalCurr2\":\"USD\",\"originalExecutionTimestamp\":\"2021-09-09T06:11:43.000Z\",\"payment1FreqPeriod\":\"M\",\"payment1FreqPeriodMultiplier\":3,\"terminationDate\":\"2021-09-09T00:00:00.000Z\",\"price1Price\":1.18049739,\"price1Units\":\"YIELD\",\"priceMultiplier\":1,\"assetClass\":\"InterestRate\",\"productClassification\":\"SRACCP\",\"productClassificationType\":\"http://www.fpml.org/coding-scheme/external/product-classification/iso10962\",\"productId\":\"InterestRate:CrossCurrency:Basis\",\"productIdType\":\"ISDA\",\"productIdentification\":\"EZP67QKWJQR7\",\"productIdentificationType\":\"http://www.fpml.org/spec/2002/instrument-id-ISIN\",\"quantity\":1,\"reportingTimestamp\":\"2021-09-10T12:12:04.000Z\",\"resetFreqPeriod1\":\"M\",\"resetFreqPeriodMultiplier1\":3,\"scheduledTerminationDate1\":\"2026-09-13T00:00:00.000Z\",\"settlementCurr1\":\"GBP\",\"settlementDate\":\"2021-10-10T00:00:00.000Z\",\"settlementType\":\"Cash\",\"submittedFor\":\"Party1\",\"submittingPartyId\":\"549300ZD5KE1EACJTY62\",\"submittingPartyIdType\":\"LEI\",\"tradeParty1NatureOfReportingCpty\":\"F\",\"tradeParty1BeneficiaryId\":\"RR3QWICWWIPCS8A4S074\",\"tradeParty1BeneficiaryIdType\":\"LEI\",\"tradeParty1CorporateSectorType\":\"C\",\"tradeParty1CptySide\":\"S\",\"tradeParty1CountryOfOtherCpty\":\"GB\",\"tradeParty1Id\":\"549300ZD5KE1EACJTY62\",\"tradeParty1IdType\":\"LEI\",\"reportableActionTypeParty1\":\"N\",\"tradeParty1RepDest\":\"FCA\",\"tradeParty1TradingCapacity1\":\"Principal\",\"tradeParty1TransactionId\":\"GDSGBLO134783067\",\"tradeParty2ClearingThreshold\":\"false\",\"tradeParty2CountryOfOtherCpty\":\"CA\",\"tradeParty2Id\":\"75LI66N60BF3QJ2FAR78\",\"tradeParty2Type\":\"LEI\",\"repActionTypeParty2\":\"N\",\"underlyingIdentificationType\":\"http://www.dtcc.com/coding-scheme/external/underlying-id/ISIN\",\"utiId\":\"IR123134783067TNTRuat\",\"utiIdPrefix\":\"1030272448\",\"originalActionTypeParty1\":\"N\",\"leg1FloatingRateIndex\":\"LIBO\",\"leg1FloatingRateTenorPeriod\":\"M\",\"leg1FloatingRateTenorPeriodMultiplier\":3,\"leg2EffectiveDate\":\"2021-09-13T00:00:00.000Z\",\"leg2FloatingRateIndex\":\"LIBO\",\"leg2FloatingRateTenorPeriod\":\"M\",\"leg2FloatingRateTenorPeriodMultiplier\":3,\"leg2ResetFrequencyPeriod\":\"M\",\"leg2ResetFrequencyPeriodMultiplier\":3,\"payment1Date\":\"2021-10-10T00:00:00.000Z\",\"payment2FrequencyPeriodMultiplier\":3,\"payment2FrequencyPeriod\":\"M\",\"collateralizedFlag\":\"ONEWAY\"},\"nonReportableData\":{\"party1Ciscode\":\"WBUG0G\",\"party2Ciscode\":\"F1711CA\",\"party1NucId\":92001,\"party2NucId\":2289043,\"opsBusinessArea\":\"Balance Guaranteed\",\"recordType\":\"House trade\",\"tntrReceivedTimestamp\":\"2021-09-10T12:12:02.805Z\",\"trResponseDateTime\":\"2022-02-04T15:41:29.000Z\",\"reportingDeadline\":\"2022-02-07T23:59:59.000Z\",\"tradeParty2Name\":\"PIMCO RE 1711 PIMCO CAN COREPLUS BD\",\"tradeParty1Name\":\"NWM PLC TRADING\",\"isDelegated\":false,\"tradeVersion\":0,\"eventExecutionTimestamp\":\"2021-09-09T06:11:43.256Z\"},\"appendix\":{}}");
        jsonRecords.add(
                "{\"subjectIdentifier\":{\"transactionId\":\"134783067\",\"sourceSystem\":\"GDS GBLO\",\"version\":2,\"regulatoryRegimeIdentifier\":{\"name\":\"European Markets Infrastructure Regulation\",\"regulatoryAuthority\":\"Financial Conduct Authority (UK)\"},\"regimeImpactType\":\"Transaction Reporting\",\"reportTriggerType\":\"Transaction Lifecycle\",\"reportSubmissionType\":\"Snapshot\"},\"exceptionManagement\":{\"userComments\":[\"Test\",\"Need to replay\"],\"issueTypes\":[\"Mis Reporting\"],\"approvalStatus\":\"Replay Approved\",\"assignedTo\":\"sharnin\",\"approvedBy\":\"sharnin\",\"lastActionUser\":\"sharnin\",\"lastActionDate\":\"2021-09-10T13:09:40.053Z\",\"lastAction\":\"TntrRequestReplay\"},\"transactionReportingStatus\":{\"sourceSystemIdentifier\":\"TnTR\",\"transactionStateValue\":\"Processing Error\",\"stateTransitionDateTime\":\"2021-09-10T12:12:07.902Z\",\"stateTransitionEffectiveDateTime\":\"2021-09-10T12:12:07.902Z\",\"reportSubmissionRepository\":\"DTCCEU\"},\"reportableData\":{\"action\":\"New\",\"clearingStatus\":\"false\",\"confirmationMethod\":\"NotConfirmed\",\"compressedTradeIndicator\":\"true\",\"contractType\":\"SW\",\"effectiveDate1\":\"2021-09-13T00:00:00.000Z\",\"executionVenueId\":\"XXXX\",\"executionVenueMicCode\":\"XXXX\",\"intraGroupIndicator\":\"false\",\"maturityDate\":\"2026-09-13T00:00:00.000Z\",\"leg2SettlementCurr\":\"USD\",\"level\":\"T\",\"lifecycleEvent\":\"Trade\",\"mandatoryClearingJustification\":\"false\",\"messageId\":\"134783067_0_POU_1631275924038_uat\",\"messageType\":\"Snapshot\",\"notionalAmount1\":100000000,\"notionalCurr1\":\"GBP\",\"notionalCurr2\":\"USD\",\"originalExecutionTimestamp\":\"2021-09-09T06:11:43.000Z\",\"payment1FreqPeriod\":\"M\",\"payment1FreqPeriodMultiplier\":3,\"terminationDate\":\"2021-09-09T00:00:00.000Z\",\"price1Price\":1.18049739,\"price1Units\":\"YIELD\",\"priceMultiplier\":1,\"assetClass\":\"InterestRate\",\"productClassification\":\"SRACCP\",\"productClassificationType\":\"http://www.fpml.org/coding-scheme/external/product-classification/iso10962\",\"productId\":\"InterestRate:CrossCurrency:Basis\",\"productIdType\":\"ISDA\",\"productIdentification\":\"EZP67QKWJQR7\",\"productIdentificationType\":\"http://www.fpml.org/spec/2002/instrument-id-ISIN\",\"quantity\":1,\"reportingTimestamp\":\"2021-09-10T12:12:04.000Z\",\"resetFreqPeriod1\":\"M\",\"resetFreqPeriodMultiplier1\":3,\"scheduledTerminationDate1\":\"2026-09-13T00:00:00.000Z\",\"settlementCurr1\":\"GBP\",\"settlementDate\":\"2021-10-10T00:00:00.000Z\",\"settlementType\":\"Cash\",\"submittedFor\":\"Party1\",\"submittingPartyId\":\"549300ZD5KE1EACJTY62\",\"submittingPartyIdType\":\"LEI\",\"tradeParty1NatureOfReportingCpty\":\"F\",\"tradeParty1BeneficiaryId\":\"RR3QWICWWIPCS8A4S074\",\"tradeParty1BeneficiaryIdType\":\"LEI\",\"tradeParty1CorporateSectorType\":\"C\",\"tradeParty1CptySide\":\"S\",\"tradeParty1CountryOfOtherCpty\":\"GB\",\"tradeParty1Id\":\"549300ZD5KE1EACJTY62\",\"tradeParty1IdType\":\"LEI\",\"reportableActionTypeParty1\":\"N\",\"tradeParty1RepDest\":\"FCA\",\"tradeParty1TradingCapacity1\":\"Principal\",\"tradeParty1TransactionId\":\"GDSGBLO134783067\",\"tradeParty2ClearingThreshold\":\"false\",\"tradeParty2CountryOfOtherCpty\":\"CA\",\"tradeParty2Id\":\"75LI66N60BF3QJ2FAR78\",\"tradeParty2Type\":\"LEI\",\"repActionTypeParty2\":\"N\",\"underlyingIdentificationType\":\"http://www.dtcc.com/coding-scheme/external/underlying-id/ISIN\",\"utiId\":\"IR123134783067TNTRuat\",\"utiIdPrefix\":\"1030272448\",\"originalActionTypeParty1\":\"N\",\"leg1FloatingRateIndex\":\"LIBO\",\"leg1FloatingRateTenorPeriod\":\"M\",\"leg1FloatingRateTenorPeriodMultiplier\":3,\"leg2EffectiveDate\":\"2021-09-13T00:00:00.000Z\",\"leg2FloatingRateIndex\":\"LIBO\",\"leg2FloatingRateTenorPeriod\":\"M\",\"leg2FloatingRateTenorPeriodMultiplier\":3,\"leg2ResetFrequencyPeriod\":\"M\",\"leg2ResetFrequencyPeriodMultiplier\":3,\"payment1Date\":\"2021-10-10T00:00:00.000Z\",\"payment2FrequencyPeriodMultiplier\":3,\"payment2FrequencyPeriod\":\"M\",\"collateralizedFlag\":\"ONEWAY\"},\"nonReportableData\":{\"party1Ciscode\":\"WBUG0G\",\"party2Ciscode\":\"F1711CA\",\"party1NucId\":92001,\"party2NucId\":2289043,\"opsBusinessArea\":\"Balance Guaranteed\",\"recordType\":\"House trade\",\"tntrReceivedTimestamp\":\"2021-09-10T12:12:02.805Z\",\"trResponseDateTime\":\"2022-02-04T15:41:29.000Z\",\"reportingDeadline\":\"2022-02-07T23:59:59.000Z\",\"tradeParty2Name\":\"PIMCO RE 1711 PIMCO CAN COREPLUS BD\",\"tradeParty1Name\":\"NWM PLC TRADING\",\"isDelegated\":false,\"tradeVersion\":0,\"eventExecutionTimestamp\":\"2021-09-09T06:11:43.256Z\"},\"appendix\":{}}");
        return jsonRecords;
    }

    private List<String> getJsonReconRecords(String lastBreakOccuranceDate) {
        List<String> jsonRecords = Lists.newArrayList();
        jsonRecords.add(
                "{\"subjectIdentifier\":{\"sourceSystemMatchingKeyIdentifier\":\"RR3QWICWWIPCS8A4S074|F226TOH6YD6XJB17KS62|nullMissing_uniqueTransactionId_137855967\",\"sourceSystemIdentifier\":\"GDSGBLO\",\"reconciliationType\":\"Completeness\",\"reconciliationRuleIdentifier\":\"EmirPositionRates\"},\"reconciliationBusinessDateTime\":\"2022-05-26T00:00:00.000Z\",\"occurrenceIdentifier\":{\"sourceSystemIdentifier\":\"TnTR\",\"sourceSystemEventOccurrenceIdentifier\":\"1fb48f3a-2b02-4e09-b3a0-4ea9368779b7\"},\"occurrenceDateTime\":\"2022-05-30T13:39:17.223Z\",\"sourceMatchingKey\":{\"party1Id\":\"RR3QWICWWIPCS8A4S074\",\"party2Id\":\"F226TOH6YD6XJB17KS62\",\"utiValue\":\"Missing_uniqueTransactionId_137855967\",\"utiPrefix\":\"null\"},\"targetMatchingKey\":{},\"reconciliationState\":{\"sourceMatchingInstanceCount\":1,\"targetMatchingInstanceCount\":0,\"reconciliationStatus\":\"TargetUnpaired\"},\"probableMatching\":{\"breakId\":\"GDSGBLO137855967\",\"criteria\":\"2:internalUniqueId->internalUniqueId\",\"status\":\"ProbableMatch\"},\"targetRecords\":[],\"sourceRecords\":[{\"fileName\":\"Emir_Rates_Position_2022-05-26.csv\",\"tradeAssignedTo\":\"null\",\"internalUniqueId\":\"GDSGBLO137855967\",\"usiValue\":\"null\",\"assetClass\":\"InterestRate\",\"clientReportingDestination\":\"null\",\"reportingJurisdiction\":\"FinancialConductAuthority(UK)\",\"rowNumber\":\"104135\",\"productType\":\"ird.__product.interestRateSwap\",\"utiPrefixutiValue\":\"nullMissing_uniqueTransactionId_137855967\",\"expirationDate\":\"2052-05-26T11:00:00.000Z\",\"tradeExecutionVenueType\":\"XXXX\",\"party1Id\":\"RR3QWICWWIPCS8A4S074\",\"terminationDateLeg1\":\"2052-05-26T11:00:00.000Z\",\"tradeTerminated\":\"false\",\"party2Id\":\"F226TOH6YD6XJB17KS62\",\"productIdValue\":\"InterestRate:IRSwap:OIS\",\"sourceSystemId\":\"GDSGBLO\",\"terminationDateLeg2\":\"2052-05-26T11:00:00.000Z\",\"usiPrefix\":\"null\",\"complexTradeComponentId\":\"null\",\"tp1Transformation\":\"137855967\",\"utiPrefix\":\"null\",\"effectiveDateLeg2\":\"2022-05-26T11:00:00.000Z\",\"reportableExecutionDateTime\":\"2022-05-26T08:01:33.000Z\",\"notionalAmountLeg1\":\"1.0E7\",\"tradeDate\":\"2022-05-26T11:00:00.000Z\",\"effectiveDateLeg1\":\"2022-05-26T11:00:00.000Z\",\"messageSentBy\":\"RR3QWICWWIPCS8A4S074\",\"collateralization\":\"PARTIALLY\",\"blockTradeIndicator\":\"null\",\"reportingRegime\":\"EuropeanMarketsInfrastructureRegulation\",\"utiValue\":\"Missing_uniqueTransactionId_137855967\",\"tradeInitiated\":\"true\",\"intraGroup\":\"null\",\"tradeIssueId\":\"null\",\"reportingFlow\":\"Position\",\"portfolioCode\":\"OTC1501018889NWM\"}],\"breakManagement\":{\"lastBreakOccurrenceDate\":\"" + lastBreakOccuranceDate + "\",\"lastBreakStatus\":\"TargetUnpaired\",\"issueTrackingReference\":[]},\"miDetails\":{\"regulatoryRegimeIdentifier\":{\"name\":\"EuropeanMarketsInfrastructureRegulation\",\"regulatoryAuthority\":\"FinancialConductAuthority(UK)\"},\"assetClass\":\"InterestRate\",\"reportingFlow\":\"Position\",\"party1LEI\":\"RR3QWICWWIPCS8A4S074\"},\"metadata\":{\"corpusVersion\":\"v1.0.5\"}}");
        return jsonRecords;
    }

    private List<String> getCftcJsonRecord() {
        return Lists.newArrayList(
                "{\"subjectIdentifier\":{\"sourceSystemMatchingKeyIdentifier\":\"RR3QWICWWIPCS8A4S074|E57ODZWZ7FF32TWEFA76|abcd\",\"sourceSystemIdentifier\":\"SystemX\",\"reconciliationType\":\"Completeness\",\"reconciliationRuleIdentifier\":\"CftcPositionFx\"},\"reconciliationBusinessDateTime\":\"2022-09-12T00:00:00.000Z\",\"occurrenceIdentifier\":{\"sourceSystemIdentifier\":\"TnTR\",\"sourceSystemEventOccurrenceIdentifier\":\"b0992c1a-f4b3-4969-af8f-3556efafd626\"},\"occurrenceDateTime\":\"2022-09-16T06:34:44.825Z\",\"reconciliationState\":{\"sourceMatchingInstanceCount\":0,\"targetMatchingInstanceCount\":2,\"reconciliationStatus\":\"SourceUnpaired\"},\"breakManagement\":{\"lastBreakOccurrenceDate\":\"2022-09-12T00:00:00.000Z\",\"lastBreakStatus\":\"SourceUnpaired\",\"issueTrackingReference\":[],\"breakAge\":1},\"metadata\":{\"corpusVersion\":\"v1.0.5\"}}");
    }

    private List<String> getPnMJsonRecord() {
        return Lists.newArrayList(
                "{\"subjectIdentifier\":{\"sourceSystemMatchingKeyIdentifier\":\"X3CZP3CK64YBHON1LE12|529900GGYMNGRQTDOO93|CK64YBHON1000133947543TRN\",\"sourceSystemIdentifier\":\"GDSGBLO\",\"reconciliationType\":\"Completeness\",\"reconciliationRuleIdentifier\":\"PairedAndUnmatchedEmirEsmaRates\"},\"reconciliationBusinessDateTime\":\"2024-05-15T00:00:00.000Z\",\"occurrenceIdentifier\":{\"sourceSystemIdentifier\":\"TnTR\",\"sourceSystemEventOccurrenceIdentifier\":\"1814e45c-7f54-4376-a929-e61a24fdc4f8\"},\"occurrenceDateTime\":\"2024-05-16T07:28:16.580Z\",\"sourceMatchingKey\":{\"counterParty1\":\"X3CZP3CK64YBHON1LE12\",\"uti\":\"CK64YBHON1000133947543TRN\",\"counterParty2\":\"529900GGYMNGRQTDOO93\"},\"targetMatchingKey\":{\"counterParty1\":\"X3CZP3CK64YBHON1LE12\",\"uti\":\"CK64YBHON1000133947543TRN\",\"counterParty2\":\"529900GGYMNGRQTDOO93\"},\"reconciliationState\":{\"sourceMatchingInstanceCount\":1,\"targetMatchingInstanceCount\":1,\"reconciliationStatus\":\"PairedandUnmatched\"},\"probableMatching\":{},\"targetRecords\":[{\"fileName\":\"sFTP_EUEMIR_EOD_Recon_Status_Report_02983506_2024-05-15.01_59_03_001001_6TRB.csv\",\"contractType\":\"\",\"floatingRateReferencePeriodOfLeg1TimePeriod\":\"DAIL\",\"assetClass\":\"\",\"confirmationTimestamp\":\"2022-03-31T11:00:00Z\",\"fixedRatePaymentFrequencyPeriodMultiplierLeg2\":\"6\",\"optionType\":\"\",\"counterParty1\":\"X3CZP3CK64YBHON1LE12\",\"fixedRateOfLeg1OrCoupon\":\"\",\"indexFactor\":\"\",\"centralCounterparty\":\"\",\"price\":\"\",\"endDateOfTheNotionalQuantityOfLeg2\":\"\",\"endDateOfTheNotionalQuantityOfLeg1\":\"\",\"rowNumber\":\"537\",\"intragroup\":\"\",\"regulatoryRegimeIdentifier\":\"EuropeanSecuritiesandMarketsAuthority(EuropeanUnion)\",\"counterParty2\":\"529900GGYMNGRQTDOO93\",\"earlyTerminationDate\":\"\",\"effectiveDateOfTheNotionalAmountOfLeg1\":\"\",\"masterAgreementVersion\":\"1996\",\"level\":\"\",\"floatingRateResetFrequencyPeriodOfLeg1\":\"DAIL\",\"floatingRateReferencePeriodOfLeg2TimePeriod\":\"\",\"floatingRateResetFrequencyPeriodOfLeg2\":\"\",\"fixedRateOrCouponPaymentFrequencyPeriodMultiplierLeg1\":\"\",\"referenceEntity\":\"\",\"totalNotionalQuantityOfLeg1\":\"\",\"endDateOfTheNotionalAmountOfLeg2\":\"\",\"totalNotionalQuantityOfLeg2\":\"\",\"uti\":\"CK64YBHON1000133947543TRN\",\"effectiveDateOfTheNotionalAmountOfLeg2\":\"31-03-2024\",\"endDateOfTheNotionalAmountOfLeg1\":\"\",\"upi\":\"\",\"masterAgreementType\":\"\",\"notionalQuantityInEffectOnAssociatedEffectiveDateOfLeg1\":\"\",\"PTRRServiceProvider\":\"\",\"priceCurrency\":\"\",\"notionalQuantityInEffectOnAssociatedEffectiveDateOfLeg2\":\"\",\"clearingTimestamp\":\"\",\"maturityDateOfTheUnderlying\":\"\",\"floatingRatePaymentFrequencyPeriodMultiplierOfLeg2\":\"\",\"floatingRatePaymentFrequencyPeriodMultiplierOfLeg1\":\"6\",\"directionOfLeg2\":\"\",\"cleared\":\"\",\"directionOfLeg1\":\"\",\"venueOfExecution\":\"XOFF\",\"finalContractualSettlementDate\":\"21-01-2041\",\"floatingRateDayCountConventionOfLeg2\":\"\",\"floatingRateDayCountConventionOfLeg1\":\"A005\",\"optionStyle\":\"\",\"fixedRateDayCountConventionLeg2\":\"A006\",\"underlyingIdentification\":\"\",\"notionalAmountInEffectOnAssociatedEffectiveDateOfLeg1\":\"\",\"confirmed\":\"YCNF\",\"notionalAmountInEffectOnAssociatedEffectiveDateOfLeg2\":\"31180586.5\",\"productClassification\":\"SRHDSC\",\"floatingRateResetFrequencyMultiplierOfLeg2\":\"\",\"floatingRateResetFrequencyMultiplierOfLeg1\":\"1\",\"floatingRateReferencePeriodOfLeg2Multiplier\":\"\",\"reportTrackingNumber\":\"\",\"reportSubmittingEntity\":\"X3CZP3CK64YBHON1LE12\",\"fixedRatePaymentFrequencyPeriodLeg2\":\"MNTH\",\"direction\":\"\",\"expirationDate\":\"\",\"floatingRatePaymentFrequencyPeriodOfLeg1\":\"MNTH\",\"sourceSystemId\":\"GDS_GBLO\",\"deliveryType\":\"CASH\",\"clearingObligation\":\"FLSE\",\"floatingRatePaymentFrequencyPeriodOfLeg2\":\"\",\"tradeOrAllege\":\"Allege\",\"notionalCurrency1\":\"\",\"notionalCurrency2\":\"GBP\",\"ptrr\":\"\",\"tranche\":\"\",\"typeOfPTRRTechnique\":\"\",\"fixedRateOfLeg2\":\"0.0207\",\"indicatorOfTheFloatingRateOfLeg1\":\"SONA\",\"notionalAmountOfLeg1\":\"\",\"fixedRateOrCouponPaymentFrequencyPeriodLeg1\":\"\",\"floatingRateReferencePeriodOfLeg1Multiplier\":\"1\",\"indicatorOfTheFloatingRateOfLeg2\":\"\",\"notionalAmountOfLeg2\":\"50000000\",\"fixedRateOrCouponDayCountConventionLeg1\":\"\",\"identifierOfTheFloatingRateOfLeg1\":\"GB00B56Z6W79\",\"identifierOfTheFloatingRateOfLeg2\":\"\",\"underlyingIdentificationType\":\"\",\"effectiveDateOfTheNotionalQuantityOfLeg2\":\"\",\"effectiveDateOfTheNotionalQuantityOfLeg1\":\"\",\"isin\":\"EZMR0K3T3L96\",\"effectiveDate\":\"05-03-2008\",\"seniority\":\"\",\"executionTimestamp\":\"2022-03-31T11:00:00Z\"}],\"sourceRecords\":[{\"fileName\":\"sFTP_EUEMIR_EOD_Recon_Status_Report_02983506_2024-05-15.01_59_03_001001_6TRB.csv\",\"contractType\":\"\",\"floatingRateReferencePeriodOfLeg1TimePeriod\":\"\",\"assetClass\":\"\",\"confirmationTimestamp\":\"2021-06-17T12:11:22Z\",\"fixedRatePaymentFrequencyPeriodMultiplierLeg2\":\"\",\"optionType\":\"\",\"counterParty1\":\"X3CZP3CK64YBHON1LE12\",\"fixedRateOfLeg1OrCoupon\":\"0.61\",\"indexFactor\":\"\",\"centralCounterparty\":\"\",\"price\":\"\",\"endDateOfTheNotionalQuantityOfLeg2\":\"\",\"endDateOfTheNotionalQuantityOfLeg1\":\"\",\"rowNumber\":\"536\",\"intragroup\":\"\",\"regulatoryRegimeIdentifier\":\"EuropeanSecuritiesandMarketsAuthority(EuropeanUnion)\",\"counterParty2\":\"529900GGYMNGRQTDOO93\",\"isAccuracyRequired\":\"true\",\"earlyTerminationDate\":\"\",\"effectiveDateOfTheNotionalAmountOfLeg1\":\"\",\"masterAgreementVersion\":\"1992\",\"level\":\"\",\"floatingRateResetFrequencyPeriodOfLeg1\":\"\",\"floatingRateReferencePeriodOfLeg2TimePeriod\":\"EXPI\",\"floatingRateResetFrequencyPeriodOfLeg2\":\"EXPI\",\"fixedRateOrCouponPaymentFrequencyPeriodMultiplierLeg1\":\"1\",\"referenceEntity\":\"\",\"totalNotionalQuantityOfLeg1\":\"\",\"endDateOfTheNotionalAmountOfLeg2\":\"\",\"totalNotionalQuantityOfLeg2\":\"\",\"uti\":\"CK64YBHON1000133947543TRN\",\"effectiveDateOfTheNotionalAmountOfLeg2\":\"\",\"endDateOfTheNotionalAmountOfLeg1\":\"\",\"upi\":\"QZ4795CQBRJZ\",\"masterAgreementType\":\"\",\"notionalQuantityInEffectOnAssociatedEffectiveDateOfLeg1\":\"\",\"PTRRServiceProvider\":\"\",\"priceCurrency\":\"\",\"notionalQuantityInEffectOnAssociatedEffectiveDateOfLeg2\":\"\",\"clearingTimestamp\":\"\",\"maturityDateOfTheUnderlying\":\"\",\"floatingRatePaymentFrequencyPeriodMultiplierOfLeg2\":\"1\",\"floatingRatePaymentFrequencyPeriodMultiplierOfLeg1\":\"\",\"directionOfLeg2\":\"\",\"cleared\":\"\",\"directionOfLeg1\":\"\",\"venueOfExecution\":\"NWNV\",\"finalContractualSettlementDate\":\"20-01-2041\",\"floatingRateDayCountConventionOfLeg2\":\"A020\",\"floatingRateDayCountConventionOfLeg1\":\"\",\"optionStyle\":\"\",\"fixedRateDayCountConventionLeg2\":\"\",\"underlyingIdentification\":\"\",\"notionalAmountInEffectOnAssociatedEffectiveDateOfLeg1\":\"\",\"confirmed\":\"ECNF\",\"notionalAmountInEffectOnAssociatedEffectiveDateOfLeg2\":\"\",\"productClassification\":\"SRGCSP\",\"floatingRateResetFrequencyMultiplierOfLeg2\":\"1\",\"floatingRateResetFrequencyMultiplierOfLeg1\":\"\",\"floatingRateReferencePeriodOfLeg2Multiplier\":\"1\",\"reportTrackingNumber\":\"\",\"reportSubmittingEntity\":\"X3CZP3CK64YBHON1LE12\",\"fixedRatePaymentFrequencyPeriodLeg2\":\"\",\"direction\":\"\",\"expirationDate\":\"\",\"floatingRatePaymentFrequencyPeriodOfLeg1\":\"\",\"sourceSystemId\":\"GDS_GBLO\",\"deliveryType\":\"PHYS\",\"clearingObligation\":\"UKWN\",\"floatingRatePaymentFrequencyPeriodOfLeg2\":\"EXPI\",\"tradeOrAllege\":\"Trade\",\"notionalCurrency1\":\"GBP\",\"notionalCurrency2\":\"GBP\",\"ptrr\":\"\",\"tranche\":\"\",\"typeOfPTRRTechnique\":\"\",\"fixedRateOfLeg2\":\"\",\"indicatorOfTheFloatingRateOfLeg1\":\"\",\"notionalAmountOfLeg1\":\"592360.31\",\"fixedRateOrCouponPaymentFrequencyPeriodLeg1\":\"EXPI\",\"floatingRateReferencePeriodOfLeg1Multiplier\":\"\",\"indicatorOfTheFloatingRateOfLeg2\":\"\",\"notionalAmountOfLeg2\":\"592360.31\",\"fixedRateOrCouponDayCountConventionLeg1\":\"A005\",\"identifierOfTheFloatingRateOfLeg1\":\"\",\"identifierOfTheFloatingRateOfLeg2\":\"\",\"underlyingIdentificationType\":\"\",\"effectiveDateOfTheNotionalQuantityOfLeg2\":\"\",\"effectiveDateOfTheNotionalQuantityOfLeg1\":\"\",\"isin\":\"\",\"effectiveDate\":\"01-10-2040\",\"seniority\":\"\",\"executionTimestamp\":\"2021-06-17T11:58:48Z\"}],\"breakManagement\":{\"actionPerformed\":\"TntrAddJiraId\",\"lastBreakOccurrenceDate\":\"2024-05-15T00:00:00.000Z\",\"lastBreakStatus\":\"PairedandUnmatched\",\"issueTrackingReference\":[\"TTR-567\"],\"assignedTo\":\"krisrin\",\"lastActionDate\":\"2024-07-04T05:37:11.774Z\",\"lastActionUser\":\"krisrin\",\"breakAge\":0},\"miDetails\":{\"regulatoryRegimeIdentifier\":{}},\"accuracyBreaks\":[{\"field\":\"isin\",\"reason\":\"STRING_EQUALITY\",\"description\":\"Targetfieldnotmatchedisin\"},{\"field\":\"upi\",\"reason\":\"STRING_EQUALITY\",\"description\":\"Targetfieldnotmatchedupi\"},{\"field\":\"productClassification\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedproductClassification\"},{\"field\":\"confirmationTimestamp\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedconfirmationTimestamp\"},{\"field\":\"confirmed\",\"reason\":\"STRING_EQUALITY\",\"description\":\"Targetfieldnotmatchedconfirmed\"},{\"field\":\"clearingObligation\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedclearingObligation\"},{\"field\":\"masterAgreementVersion\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedmasterAgreementVersion\"},{\"field\":\"venueOfExecution\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedvenueOfExecution\"},{\"field\":\"executionTimestamp\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedexecutionTimestamp\"},{\"field\":\"effectiveDate\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedeffectiveDate\"},{\"field\":\"finalContractualSettlementDate\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedfinalContractualSettlementDate\"},{\"field\":\"deliveryType\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatcheddeliveryType\"},{\"field\":\"notionalAmountOfLeg1\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchednotionalAmountOfLeg1\"},{\"field\":\"notionalCurrency1\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchednotionalCurrency1\"},{\"field\":\"notionalAmountOfLeg2\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchednotionalAmountOfLeg2\"},{\"field\":\"effectiveDateOfTheNotionalAmountOfLeg2\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedeffectiveDateOfTheNotionalAmountOfLeg2\"},{\"field\":\"notionalAmountInEffectOnAssociatedEffectiveDateOfLeg2\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchednotionalAmountInEffectOnAssociatedEffectiveDateOfLeg2\"},{\"field\":\"fixedRateOfLeg1OrCoupon\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedfixedRateOfLeg1OrCoupon\"},{\"field\":\"fixedRateOrCouponDayCountConventionLeg1\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedfixedRateOrCouponDayCountConventionLeg1\"},{\"field\":\"fixedRateOrCouponPaymentFrequencyPeriodLeg1\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedfixedRateOrCouponPaymentFrequencyPeriodLeg1\"},{\"field\":\"fixedRateOrCouponPaymentFrequencyPeriodMultiplierLeg1\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedfixedRateOrCouponPaymentFrequencyPeriodMultiplierLeg1\"},{\"field\":\"identifierOfTheFloatingRateOfLeg1\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedidentifierOfTheFloatingRateOfLeg1\"},{\"field\":\"indicatorOfTheFloatingRateOfLeg1\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedindicatorOfTheFloatingRateOfLeg1\"},{\"field\":\"floatingRateDayCountConventionOfLeg1\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedfloatingRateDayCountConventionOfLeg1\"},{\"field\":\"floatingRatePaymentFrequencyPeriodOfLeg1\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedfloatingRatePaymentFrequencyPeriodOfLeg1\"},{\"field\":\"floatingRatePaymentFrequencyPeriodMultiplierOfLeg1\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedfloatingRatePaymentFrequencyPeriodMultiplierOfLeg1\"},{\"field\":\"floatingRateReferencePeriodOfLeg1TimePeriod\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedfloatingRateReferencePeriodOfLeg1TimePeriod\"},{\"field\":\"floatingRateReferencePeriodOfLeg1Multiplier\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedfloatingRateReferencePeriodOfLeg1Multiplier\"},{\"field\":\"floatingRateResetFrequencyPeriodOfLeg1\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedfloatingRateResetFrequencyPeriodOfLeg1\"},{\"field\":\"floatingRateResetFrequencyMultiplierOfLeg1\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedfloatingRateResetFrequencyMultiplierOfLeg1\"},{\"field\":\"fixedRateOfLeg2\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedfixedRateOfLeg2\"},{\"field\":\"fixedRateDayCountConventionLeg2\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedfixedRateDayCountConventionLeg2\"},{\"field\":\"fixedRatePaymentFrequencyPeriodLeg2\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedfixedRatePaymentFrequencyPeriodLeg2\"},{\"field\":\"fixedRatePaymentFrequencyPeriodMultiplierLeg2\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedfixedRatePaymentFrequencyPeriodMultiplierLeg2\"},{\"field\":\"floatingRateDayCountConventionOfLeg2\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedfloatingRateDayCountConventionOfLeg2\"},{\"field\":\"floatingRatePaymentFrequencyPeriodOfLeg2\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedfloatingRatePaymentFrequencyPeriodOfLeg2\"},{\"field\":\"floatingRatePaymentFrequencyPeriodMultiplierOfLeg2\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedfloatingRatePaymentFrequencyPeriodMultiplierOfLeg2\"},{\"field\":\"floatingRateReferencePeriodOfLeg2TimePeriod\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedfloatingRateReferencePeriodOfLeg2TimePeriod\"},{\"field\":\"floatingRateReferencePeriodOfLeg2Multiplier\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedfloatingRateReferencePeriodOfLeg2Multiplier\"},{\"field\":\"floatingRateResetFrequencyPeriodOfLeg2\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedfloatingRateResetFrequencyPeriodOfLeg2\"},{\"field\":\"floatingRateResetFrequencyMultiplierOfLeg2\",\"reason\":\"STRING_EQUALITY\",\"description\":\"TargetfieldnotmatchedfloatingRateResetFrequencyMultiplierOfLeg2\"}],\"metadata\":{\"corpusVersion\":\"v1.0.5\"}}");
    }

    private Map<String, String> getUiFieldMap() {
        Map<String, String> testMap = new HashMap<>();
        testMap.put("Accuracy Break Fields", "accuracyBreaks.field");
        testMap.put("Tranche", "tranche");
        return testMap;
    }

    private Map<String, String> getPandMFieldMap() {
        Map<String, String> testMap = new HashMap<>();
        testMap.put("accuracyBreaks.field", "Accuracy Break Fields");
        testMap.put("tranche", "Tranche");
        return testMap;
    }

    // Reflection-based Invocation Methods
    private String invokeCalculateExceptionAgeMethod(String timestamp) throws Exception {
        Method method = DataFabricExportUtility.class.getDeclaredMethod("calculateExceptionAge", String.class);
        method.setAccessible(true);
        return (String) method.invoke(dfUtility, timestamp);
    }

    private String invokeCalculateExceptionBucketMethod(String timestamp) throws Exception {
        Method method = DataFabricExportUtility.class.getDeclaredMethod("calculateExceptionBucket", String.class);
        method.setAccessible(true);
        return (String) method.invoke(dfUtility, timestamp);
    }

    private void invokePopulateManualFieldsMethod(Map<String, String> map) throws Exception {
        Method method = DataFabricExportUtility.class.getDeclaredMethod("populateManualFields", Map.class);
        method.setAccessible(true);
        method.invoke(dfUtility, map);
    }

    private String invokeConvertDfKeysMethod(String key) throws Exception {
        Method method = DataFabricExportUtility.class.getDeclaredMethod("convertDfKeys", String.class);
        method.setAccessible(true);
        return (String) method.invoke(dfUtility, key);
    }

    private void invokeParseJsonTreeMethod(String currentNodePath, JsonNode currentNode, Map<String, String> dataMap) throws Exception {
        Method method = DataFabricExportUtility.class.getDeclaredMethod("parseJsonTree", String.class, JsonNode.class, Map.class);
        method.setAccessible(true);
        method.invoke(dfUtility, currentNodePath, currentNode, dataMap);
    }

    private Map<String, String> invokeConvertDfKeyMapMethod(Map<String, String> map) throws Exception {
        Method method = DataFabricExportUtility.class.getDeclaredMethod("convertDfKeyMap", Map.class);
        method.setAccessible(true);
        return (Map<String, String>) method.invoke(dfUtility, map);
    }

    private List<Map<String, String>> invokeConvertDfKeyMapReconMethod(Map<String, String> map, DfExportScan scan) throws Exception {
        Method method = DataFabricExportUtility.class.getDeclaredMethod("convertDfKeyMapRecon", Map.class, DfExportScan.class);
        method.setAccessible(true);
        return (List<Map<String, String>>) method.invoke(dfUtility, map, scan);
    }

    private void invokeRenderMiReportDataMethod(String collectionName, Map<String, String> map) throws Exception {
        Method method = DataFabricExportUtility.class.getDeclaredMethod("renderMiReportData", String.class, Map.class);
        method.setAccessible(true);
        method.invoke(dfUtility, collectionName, map);
    }

    private String invokeCalculateAgeMethod(String ageDate) throws Exception {
        Method method = DataFabricExportUtility.class.getDeclaredMethod("calculateAge", String.class);
        method.setAccessible(true);
        return (String) method.invoke(dfUtility, ageDate);
    }

    private String invokeGetDateDifferenceInStandardFormatMethod(DateTime startDate, DateTime endDate) throws Exception {
        Method method = DataFabricExportUtility.class.getDeclaredMethod("getDateDifferenceInStandardFormat", DateTime.class, DateTime.class);
        method.setAccessible(true);
        return (String) method.invoke(dfUtility, startDate, endDate);
    }

    private String invokeGetBreakAgebucketMethod(int breakAge) throws Exception {
        Method method = DataFabricExportUtility.class.getDeclaredMethod("getBreakAgebucket", int.class);
        method.setAccessible(true);
        return (String) method.invoke(dfUtility, breakAge);
    }

    private String invokeConvertDfKeysReconMethod(String key) throws Exception {
        Method method = DataFabricExportUtility.class.getDeclaredMethod("convertDfKeysRecon", String.class);
        method.setAccessible(true);
        return (String) method.invoke(dfUtility, key);
    }

    private String invokeGetArrayKeyReconMethod(String key) throws Exception {
        Method method = DataFabricExportUtility.class.getDeclaredMethod("getArrayKeyRecon", String.class);
        method.setAccessible(true);
        return (String) method.invoke(dfUtility, key);
    }

    private String invokeGetReconNameFromScanMethod(DfExportScan scan) throws Exception {
        Method method = DataFabricExportUtility.class.getDeclaredMethod("getReconNameFromScan", DfExportScan.class);
        method.setAccessible(true);
        return (String) method.invoke(dfUtility, scan);
    }

    private void invokePrepareAllHeadersMethod(boolean isFieldConversion, String key, String collectionName) throws Exception {
        Method method = DataFabricExportUtility.class.getDeclaredMethod("prepareAllHeaders", boolean.class, String.class, String.class);
        method.setAccessible(true);
        method.invoke(dfUtility, isFieldConversion, key, collectionName);
    }

    private void invokePrepareSelectHeadersMethod(boolean isFieldConversion, String key, String collectionName, String select) throws Exception {
        Method method = DataFabricExportUtility.class.getDeclaredMethod("prepareSelectHeaders", boolean.class, String.class, String.class, String.class);
        method.setAccessible(true);
        method.invoke(dfUtility, isFieldConversion, key, collectionName, select);
    }

    private void invokeCheckAndFilterBreakDataMethod(Map<String, String> subRecord, Map<String, String> baseDataMap, DfExportScan scan) throws Exception {
        Method method = DataFabricExportUtility.class.getDeclaredMethod("checkAndFilterBreakData", Map.class, Map.class, DfExportScan.class);
        method.setAccessible(true);
        method.invoke(dfUtility, subRecord, baseDataMap, scan);
    }
}
