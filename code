import json
import pytest

def check_field(expected_json, result_json, field):
    fields = field.split('.')
    for f in fields:
        result_json = result_json.get(f)
        expected_json = expected_json.get(f)
        assert result_json is not None, f"Field '{field}' not found in result JSON"
        assert result_json == expected_json, f"Field '{field}' has different values"

@pytest.fixture
def expected_json():
    # Replace with the actual path to your expected JSON file
    with open('json1.json', 'r') as file:
        return json.load(file)

@pytest.fixture
def result_json():
    # Replace with the actual path to your result JSON file
    with open('json2.json', 'r') as file:
        return json.load(file)

def test_is_delegated(expected_json, result_json):
    check_field(expected_json, result_json, 'nonReportableData.isDelegated')

def test_transaction_state_value(expected_json, result_json):
    check_field(expected_json, result_json, 'transactionReportingStatus.transactionStateValue')

def test_corpus_version(expected_json, result_json):
    check_field(expected_json, result_json, 'metadata.corpusVersion')

def test_commentary(expected_json, result_json):
    check_field(expected_json, result_json, 'transactionReportingStatus.commentary')
