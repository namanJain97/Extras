package com.rbs.tntr.business.blotter.services.actions;

import com.nwm.tntr.commons.domain.persistence.entity.DocumentId;
import com.nwm.tntr.commons.domain.persistence.entity.ExceptionManagement;
import com.nwm.tntr.commons.domain.persistence.entity.NonReportableData;
import com.nwm.tntr.commons.domain.persistence.entity.valuation.ValuationReport;
import com.nwm.tntr.commons.domain.persistence.entity.valuation.ValuationReportDocument;
import com.nwm.tntr.commons.repository.regreporting.WriteResult;
import com.rbs.tntr.business.blotter.df.manager.DfValuationPersistManager;
import com.rbs.tntr.business.blotter.df.updater.ValuationDataUpdater;
import com.rbs.tntr.business.blotter.services.validators.ActionRequestValidator;
import com.rbs.tntr.business.blotter.web.request.regreportingTrade.*;
import com.rbs.tntr.domain.blotter.enums.ExceptionStatus;
import com.rbs.tntr.domain.blotter.exceptions.BlotterRunTimeException;
import com.rbs.tntr.domain.blotter.tntrBlotterView.ActionDocumentId;
import org.apache.commons.lang3.tuple.Pair;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.lang.reflect.Method;
import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class ValuationActionServiceTest {

    @InjectMocks
    private ValuationActionService valuationActionService;

    @Mock
    private DfValuationPersistManager dfTradePersistManager;

    @Mock
    private ValuationDataUpdater dataUpdater;

    @Mock
    private ActionRequestValidator requestValidator;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    // Helper method to create a ValuationReportDocument mock
    private ValuationReportDocument createValuationReportDocument(String key, Long version) {
        ValuationReportDocument doc = mock(ValuationReportDocument.class);
        DocumentId docId = DocumentId.from(key, version);
        when(doc.getDocumentId()).thenReturn(docId);
        ValuationReport report = mock(ValuationReport.class);
        ExceptionManagement em = mock(ExceptionManagement.class);
        NonReportableData nrd = mock(NonReportableData.class);
        when(doc.getValuationReport()).thenReturn(report);
        when(report.getExceptionManagement()).thenReturn(em);
        when(report.getNonReportableData()).thenReturn(nrd);
        return doc;
    }

    private WriteResult<ValuationReport> createSuccessWriteResult(String key, Long version, ValuationReport report) {
        WriteResult<ValuationReport> wr = mock(WriteResult.class);
        when(wr.isSuccess()).thenReturn(true);
        when(wr.getDocumentId()).thenReturn(DocumentId.from(key, version));
        when(wr.getRecord()).thenReturn(report);
        return wr;
    }

    private WriteResult<ValuationReport> createFailureWriteResult(String error) {
        WriteResult<ValuationReport> wr = mock(WriteResult.class);
        when(wr.isSuccess()).thenReturn(false);
        WriteResult.ErrorDetail ed = new WriteResult.ErrorDetail(error, null);
        when(wr.getErrorDetail()).thenReturn(ed);
        return wr;
    }

    @Test
    public void testAddComment_NullRequestList() {
        List<ActionUpdateResult> results = valuationActionService.addComment(null, "username");
        assertTrue("Results should be empty for null requests", results.isEmpty());
    }

    @Test
    public void testAddComment_DocumentNotFound() {
        AddTradeCommentRequest request = mock(AddTradeCommentRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        List<AddTradeCommentRequest> requests = Collections.singletonList(request);

        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.emptyList());

        List<ActionUpdateResult> results = valuationActionService.addComment(requests, "username");

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains("Valuation record not found"));
    }

    @Test
    public void testUpdateExceptionStatus_ConcurrentModification() {
        UpdateExceptionStatusRequest request = mock(UpdateExceptionStatusRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        List<UpdateExceptionStatusRequest> requests = Collections.singletonList(request);

        ValuationReportDocument doc = createValuationReportDocument("key1", 2L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        when(requestValidator.validatePermittedExceptionStatusForVal(anyList(), anyList(), any())).thenReturn(true);
        when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.validateExceptionStatus(any(), any())).thenReturn(true);
        when(requestValidator.validateApprover(any(), any(), any(), any())).thenReturn(false);

        List<ActionUpdateResult> results = valuationActionService.updateExceptionStatus(requests, ExceptionStatus.Edit_Requested, "username");

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains("Version mismatch"));
    }

    @Test
    public void testRemoveJiraId_NullJiraReference() {
        AddTradeJiraReferenceRequest request = mock(AddTradeJiraReferenceRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getJiraReference()).thenReturn(null);
        List<AddTradeJiraReferenceRequest> requests = Collections.singletonList(request);

        ValuationReportDocument doc = createValuationReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);

        List<ActionUpdateResult> results = valuationActionService.removeJiraId(requests, "username");

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains("JIRA reference is null"));
    }

    @Test
    public void testAssignExceptionToUser_InvalidUser() {
        AssignTradeRequest request = mock(AssignTradeRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        List<AssignTradeRequest> requests = Collections.singletonList(request);

        ValuationReportDocument doc = createValuationReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.assignException(any(), any(), anyString())).thenThrow(new IllegalArgumentException("Invalid user"));

        List<ActionUpdateResult> results = valuationActionService.assignExceptionToUser(requests, "invalidUser");

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains("Invalid user"));
    }

    @Test
    public void testPerformResetAction_MultipleFlows() {
        UpdateExceptionStatusRequest request1 = mock(UpdateExceptionStatusRequest.class);
        UpdateExceptionStatusRequest request2 = mock(UpdateExceptionStatusRequest.class);
        when(request1.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request1.getFlow()).thenReturn("flow1");
        when(request2.getDocumentId()).thenReturn(new ActionDocumentId("key2", 1L));
        when(request2.getFlow()).thenReturn("flow2");
        List<UpdateExceptionStatusRequest> requests = Arrays.asList(request1, request2);

        ValuationReportDocument doc1 = createValuationReportDocument("key1", 1L);
        ValuationReportDocument doc2 = createValuationReportDocument("key2", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Arrays.asList(doc1, doc2));
        when(requestValidator.validateResetActionApprovalStatus(any(), any())).thenReturn(true);
        when(dataUpdater.resetAction(any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Arrays.asList(
                createSuccessWriteResult("key1", 2L, doc1.getValuationReport()),
                createSuccessWriteResult("key2", 2L, doc2.getValuationReport())
        ));

        List<ActionUpdateResult> results = valuationActionService.performResetAction(requests, "username");

        assertEquals(2, results.size());
        assertTrue(results.get(0).isSuccess());
        assertTrue(results.get(1).isSuccess());
        verify(dataUpdater, times(2)).resetAction(any(), any(), eq("username"));
    }

    @Test
    public void testUpdateUserActionType_NullComment() {
        UpdateUserActionTypeRequest request = mock(UpdateUserActionTypeRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getUserActionType()).thenReturn("TEST_ACTION");
        when(request.getComment()).thenReturn(null);
        when(request.getAction()).thenReturn("action");
        List<UpdateUserActionTypeRequest> requests = Collections.singletonList(request);

        ValuationReportDocument doc = createValuationReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));

        List<ActionUpdateResult> results = valuationActionService.updateUserActionType(requests, "username");

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains("Comment is null"));
    }

    @Test
    public void testAddJiraType_ExistingJiraType() {
        AddTradeJiraTypeRequest request = mock(AddTradeJiraTypeRequest.class);
        JiraType jiraType = mock(JiraType.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getJiraType()).thenReturn(jiraType);
        when(jiraType.getIssueType()).thenReturn("Bug");
        List<AddTradeJiraTypeRequest> requests = Collections.singletonList(request);

        ValuationReportDocument doc = createValuationReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.addJiraTypeToException(any(), any(), anyString())).thenThrow(new IllegalStateException("JIRA type already exists"));

        List<ActionUpdateResult> results = valuationActionService.addJiraType(requests, "username");

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains("JIRA type already exists"));
    }

    @Test
    public void testUpdateEditedFields_NullExceptionStatus() {
        EditRequest request = mock(EditRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        List<EditRequest> requests = Collections.singletonList(request);

        ValuationReportDocument doc = createValuationReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);

        List<ActionUpdateResult> results = valuationActionService.updateEditedFields(requests, "username", null);

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains("Exception status is null"));
    }

    @Test
    public void testGetTradeReportDocuments_EmptyDocumentIds() throws Exception {
        Method method = ValuationActionService.class.getDeclaredMethod("getTradeReportDocuments", List.class);
        method.setAccessible(true);

        List<DocumentId> docIds = Collections.emptyList();
        when(dfTradePersistManager.getAllRecordsById(docIds)).thenReturn(Collections.emptyList());

        List<ValuationReportDocument> result = (List<ValuationReportDocument>) method.invoke(valuationActionService, docIds);

        assertTrue("Result should be empty for empty document IDs", result.isEmpty());
    }

    @Test
    public void testGetTradeWithComments_Success() throws Exception {
        Method method = ValuationActionService.class.getDeclaredMethod("getTradeWithComments", List.class, Map.class, List.class, String.class);
        method.setAccessible(true);

        ValuationReportDocument doc = createValuationReportDocument("key1", 1L);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        AddTradeCommentRequest request = mock(AddTradeCommentRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        requests.put(doc.getDocumentId(), request);
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        when(requestValidator.validateUser("username", doc.getValuationReport().getExceptionManagement())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.addCommentsToException(any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));

        List<Pair<ValuationReport, Long>> result = (List<Pair<ValuationReport, Long>>) method.invoke(valuationActionService, Collections.singletonList(doc), requests, failedTrades, "username");

        assertEquals(1, result.size());
        assertTrue(failedTrades.isEmpty());
    }

    @Test
    public void testGetTradeWithRemovedComments_Success() throws Exception {
        Method method = ValuationActionService.class.getDeclaredMethod("getTradeWithRemovedComments", List.class, Map.class, List.class, String.class);
        method.setAccessible(true);

        ValuationReportDocument doc = createValuationReportDocument("key1", 1L);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        AddTradeCommentRequest request = mock(AddTradeCommentRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        requests.put(doc.getDocumentId(), request);
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        when(requestValidator.validateUser("username", doc.getValuationReport().getExceptionManagement())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.removeCommentsToException(any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));

        List<Pair<ValuationReport, Long>> result = (List<Pair<ValuationReport, Long>>) method.invoke(valuationActionService, Collections.singletonList(doc), requests, failedTrades, "username");

        assertEquals(1, result.size());
        assertTrue(failedTrades.isEmpty());
    }

    @Test
    public void testGetTradeWithCommentType_Success() throws Exception {
        Method method = ValuationActionService.class.getDeclaredMethod("getTradeWithCommentType", List.class, Map.class, List.class, String.class);
        method.setAccessible(true);

        ValuationReportDocument doc = createValuationReportDocument("key1", 1L);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        AddTradeCommentTypeRequest request = mock(AddTradeCommentTypeRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        requests.put(doc.getDocumentId(), request);
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        when(requestValidator.validateUser("username", doc.getValuationReport().getExceptionManagement())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.addCommentTypeToException(any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));

        List<Pair<ValuationReport, Long>> result = (List<Pair<ValuationReport, Long>>) method.invoke(valuationActionService, Collections.singletonList(doc), requests, failedTrades, "username");

        assertEquals(1, result.size());
        assertTrue(failedTrades.isEmpty());
    }

    @Test
    public void testGetTradeWithRemovedCommentType_Success() throws Exception {
        Method method = ValuationActionService.class.getDeclaredMethod("getTradeWithRemovedCommentType", List.class, Map.class, List.class, String.class);
        method.setAccessible(true);

        ValuationReportDocument doc = createValuationReportDocument("key1", 1L);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        AddTradeCommentTypeRequest request = mock(AddTradeCommentTypeRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        requests.put(doc.getDocumentId(), request);
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        when(requestValidator.validateUser("username", doc.getValuationReport().getExceptionManagement())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.removeCommentTypeToException(any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));

        List<Pair<ValuationReport, Long>> result = (List<Pair<ValuationReport, Long>>) method.invoke(valuationActionService, Collections.singletonList(doc), requests, failedTrades, "username");

        assertEquals(1, result.size());
        assertTrue(failedTrades.isEmpty());
    }

    @Test
    public void testGetTradeWithAssignment_Success() throws Exception {
        Method method = ValuationActionService.class.getDeclaredMethod("getTradeWithAssignment", List.class, Map.class, List.class, String.class);
        method.setAccessible(true);

        ValuationReportDocument doc = createValuationReportDocument("key1", 1L);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        AssignTradeRequest request = mock(AssignTradeRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        requests.put(doc.getDocumentId(), request);
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.assignException(any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));

        List<Pair<ValuationReport, Long>> result = (List<Pair<ValuationReport, Long>>) method.invoke(valuationActionService, Collections.singletonList(doc), requests, failedTrades, "username");

        assertEquals(1, result.size());
        assertTrue(failedTrades.isEmpty());
    }

    @Test
    public void testGetTradeWithJiraReference_Success() throws Exception {
        Method method = ValuationActionService.class.getDeclaredMethod("getTradeWithJiraReference", List.class, Map.class, List.class, String.class);
        method.setAccessible(true);

        ValuationReportDocument doc = createValuationReportDocument("key1", 1L);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        AddTradeJiraReferenceRequest request = mock(AddTradeJiraReferenceRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getJiraReference()).thenReturn(mock(JiraReference.class));
        when(request.getJiraReference().getJiraId()).thenReturn("JIRA-1");
        requests.put(doc.getDocumentId(), request);
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        when(requestValidator.validateUser("username", doc.getValuationReport().getExceptionManagement())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.isJiraIdPresent(any(), eq("JIRA-1"))).thenReturn(false);
        when(dataUpdater.addJiraIdToException(any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));

        List<Pair<ValuationReport, Long>> result = (List<Pair<ValuationReport, Long>>) method.invoke(valuationActionService, Collections.singletonList(doc), requests, failedTrades, "username");

        assertEquals(1, result.size());
        assertTrue(failedTrades.isEmpty());
    }

    @Test
    public void testRemoveJiraReference_Success() throws Exception {
        Method method = ValuationActionService.class.getDeclaredMethod("removeJiraReference", List.class, Map.class, List.class, String.class);
        method.setAccessible(true);

        ValuationReportDocument doc = createValuationReportDocument("key1", 1L);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        AddTradeJiraReferenceRequest request = mock(AddTradeJiraReferenceRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getJiraReference()).thenReturn(mock(JiraReference.class));
        when(request.getJiraReference().getJiraId()).thenReturn("JIRA-1");
        requests.put(doc.getDocumentId(), request);
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        when(requestValidator.validateUser("username", doc.getValuationReport().getExceptionManagement())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.isJiraIdPresent(any(), eq("JIRA-1"))).thenReturn(true);
        when(dataUpdater.removeJiraIdFromException(any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));

        List<Pair<ValuationReport, Long>> result = (List<Pair<ValuationReport, Long>>) method.invoke(valuationActionService, Collections.singletonList(doc), requests, failedTrades, "username");

        assertEquals(1, result.size());
        assertTrue(failedTrades.isEmpty());
    }

    @Test
    public void testGetTradeWithJiraType_Success() throws Exception {
        Method method = ValuationActionService.class.getDeclaredMethod("getTradeWithJiraType", List.class, Map.class, List.class, String.class);
        method.setAccessible(true);

        ValuationReportDocument doc = createValuationReportDocument("key1", 1L);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        AddTradeJiraTypeRequest request = mock(AddTradeJiraTypeRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        requests.put(doc.getDocumentId(), request);
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        when(requestValidator.validateUser("username", doc.getValuationReport().getExceptionManagement())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.addJiraTypeToException(any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));

        List<Pair<ValuationReport, Long>> result = (List<Pair<ValuationReport, Long>>) method.invoke(valuationActionService, Collections.singletonList(doc), requests, failedTrades, "username");

        assertEquals(1, result.size());
        assertTrue(failedTrades.isEmpty());
    }

    @Test
    public void testRemoveJiraType_Success() throws Exception {
        Method method = ValuationActionService.class.getDeclaredMethod("removeJiraType", List.class, Map.class, List.class, String.class);
        method.setAccessible(true);

        ValuationReportDocument doc = createValuationReportDocument("key1", 1L);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        AddTradeJiraTypeRequest request = mock(AddTradeJiraTypeRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getJiraType()).thenReturn(mock(JiraType.class));
        when(request.getJiraType().getIssueType()).thenReturn("Bug");
        requests.put(doc.getDocumentId(), request);
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        when(requestValidator.validateUser("username", doc.getValuationReport().getExceptionManagement())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(doc.getValuationReport().getExceptionManagement().getIssueType().value()).thenReturn("Bug");
        when(dataUpdater.removeJiraTypeFromException(any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));

        List<Pair<ValuationReport, Long>> result = (List<Pair<ValuationReport, Long>>) method.invoke(valuationActionService, Collections.singletonList(doc), requests, failedTrades, "username");

        assertEquals(1, result.size());
        assertTrue(failedTrades.isEmpty());
    }

    @Test
    public void testGetTradeWithExceptionStatus_Success() throws Exception {
        Method method = ValuationActionService.class.getDeclaredMethod("getTradeWithExceptionStatus", List.class, ExceptionStatus.class, Map.class, List.class, String.class);
        method.setAccessible(true);

        ValuationReportDocument doc = createValuationReportDocument("key1", 1L);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        UpdateExceptionStatusRequest request = mock(UpdateExceptionStatusRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        requests.put(doc.getDocumentId(), request);
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        when(requestValidator.validateUser("username", doc.getValuationReport().getExceptionManagement())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.validateExceptionStatus(any(), any())).thenReturn(true);
        when(requestValidator.validateApprover(any(), any(), any(), any())).thenReturn(false);
        when(dataUpdater.addExceptionStatus(any(), any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));

        List<Pair<ValuationReport, Long>> result = (List<Pair<ValuationReport, Long>>) method.invoke(valuationActionService, Collections.singletonList(doc), ExceptionStatus.Edit_Requested, requests, failedTrades, "username");

        assertEquals(1, result.size());
        assertTrue(failedTrades.isEmpty());
    }

    @Test
    public void testRollBackRejectedRecords_Success() throws Exception {
        Method method = ValuationActionService.class.getDeclaredMethod("rollBackRejectedRecords", Map.class);
        method.setAccessible(true);

        Map<DocumentId, UpdateRequest> tradeRequestMap = new HashMap<>();
        DocumentId docId = DocumentId.from("key1", 3L);
        tradeRequestMap.put(docId, mock(UpdateRequest.class));
        ValuationReportDocument prevDoc = createValuationReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(prevDoc));
        when(dfTradePersistManager.upsertAllRecords(anyList())).thenReturn(Collections.singletonList(createSuccessWriteResult("key1", 1L, prevDoc.getValuationReport())));

        List<ActionUpdateResult> results = (List<ActionUpdateResult>) method.invoke(valuationActionService, tradeRequestMap);

        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testGetResult_SuccessAndFailure() throws Exception {
        Method method = ValuationActionService.class.getDeclaredMethod("getResult", List.class, List.class);
        method.setAccessible(true);

        ValuationReportDocument doc1 = createValuationReportDocument("key1", 1L);
        ValuationReportDocument doc2 = createValuationReportDocument("key2", 1L);
        List<ValuationReportDocument> docs = Arrays.asList(doc1, doc2);
        WriteResult<ValuationReport> success = createSuccessWriteResult("key1", 2L, doc1.getValuationReport());
        WriteResult<ValuationReport> failure = createFailureWriteResult("Save error");
        List<WriteResult<ValuationReport>> writeResults = Arrays.asList(success, failure);

        List<ActionUpdateResult> results = (List<ActionUpdateResult>) method.invoke(valuationActionService, docs, writeResults);

        assertEquals(2, results.size());
        assertTrue(results.get(0).isSuccess());
        assertFalse(results.get(1).isSuccess());
        assertTrue(results.get(1).getError().contains("Save error"));
    }

    @Test
    public void testGetResult_NullWriteResults() throws Exception {
        Method method = ValuationActionService.class.getDeclaredMethod("getResult", List.class, List.class);
        method.setAccessible(true);

        ValuationReportDocument doc = createValuationReportDocument("key1", 1L);
        List<ValuationReportDocument> docs = Collections.singletonList(doc);

        List<ActionUpdateResult> results = (List<ActionUpdateResult>) method.invoke(valuationActionService, docs, null);

        assertTrue(results.isEmpty());
    }

    @Test
    public void testPopulateTradeRequestMap() throws Exception {
        Method method = ValuationActionService.class.getDeclaredMethod("populateTradeRequestMap", UpdateRequest.class, Map.class);
        method.setAccessible(true);

        UpdateRequest request = mock(UpdateRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        Map<DocumentId, UpdateRequest> map = new HashMap<>();

        method.invoke(valuationActionService, request, map);

        assertEquals(1, map.size());
        assertEquals(request, map.get(DocumentId.from("key1", 1L)));
    }

    @Test
    public void testGetTradePrimaryKey() throws Exception {
        Method method = ValuationActionService.class.getDeclaredMethod("getTradePrimaryKey", DocumentId.class);
        method.setAccessible(true);

        DocumentId docId = DocumentId.from("key1", 1L);

        ActionDocumentId result = (ActionDocumentId) method.invoke(valuationActionService, docId);

        assertEquals("key1", result.getKey());
        assertEquals(Long.valueOf(1L), result.getVersion());
    }

    @Test
    public void testGetValuationReport() throws Exception {
        Method method = ValuationActionService.class.getDeclaredMethod("getValuationReport", ValuationReport.class, ExceptionManagement.class);
        method.setAccessible(true);

        ValuationReport tradeReport = mock(ValuationReport.class);
        ExceptionManagement em = mock(ExceptionManagement.class);
        NonReportableData nrd = mock(NonReportableData.class);
        when(tradeReport.getNonReportableData()).thenReturn(nrd);

        ValuationReport result = (ValuationReport) method.invoke(valuationActionService, tradeReport, em);

        assertNotNull(result);
    }

    @Test
    public void testGetReportsWithExpectedBaseVersion() throws Exception {
        Method method = ValuationActionService.class.getDeclaredMethod("getReportsWithExpectedBaseVersion", ValuationReportDocument.class, ValuationReport.class);
        method.setAccessible(true);

        ValuationReportDocument doc = createValuationReportDocument("key1", 1L);
        ValuationReport report = mock(ValuationReport.class);

        Pair<ValuationReport, Long> result = (Pair<ValuationReport, Long>) method.invoke(valuationActionService, doc, report);

        assertEquals(report, result.getLeft());
        assertEquals(Long.valueOf(1L), result.getRight());
    }

    @Test
    public void testEditFields_Success() throws Exception {
        Method method = ValuationActionService.class.getDeclaredMethod("editFields", List.class, Map.class, List.class, String.class, ExceptionStatus.class);
        method.setAccessible(true);

        ValuationReportDocument doc = createValuationReportDocument("key1", 1L);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        EditRequest request = mock(EditRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        requests.put(doc.getDocumentId(), request);
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.updateTradeReportData(any(), any(), anyString(), any())).thenReturn(mock(ValuationReport.class));

        List<Pair<ValuationReport, Long>> result = (List<Pair<ValuationReport, Long>>) method.invoke(valuationActionService, Collections.singletonList(doc), requests, failedTrades, "username", ExceptionStatus.Edit_Requested);

        assertEquals(1, result.size());
        assertTrue(failedTrades.isEmpty());
    }

    @Test
    public void testResetActionOnValuation_Success() throws Exception {
        Method method = ValuationActionService.class.getDeclaredMethod("resetActionOnValuation", List.class, Map.class, List.class, String.class);
        method.setAccessible(true);

        ValuationReportDocument doc = createValuationReportDocument("key1", 1L);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        UpdateExceptionStatusRequest request = mock(UpdateExceptionStatusRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getFlow()).thenReturn("flow1");
        requests.put(doc.getDocumentId(), request);
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        when(requestValidator.validateResetActionApprovalStatus(any(), any())).thenReturn(true);
        when(dataUpdater.resetAction(any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));

        List<Pair<ValuationReport, Long>> result = (List<Pair<ValuationReport, Long>>) method.invoke(valuationActionService, Collections.singletonList(doc), requests, failedTrades, "username");

        assertEquals(1, result.size());
        assertTrue(failedTrades.isEmpty());
    }

    @Test
    public void testGetUserActionTypeTrades_Success() throws Exception {
        Method method = ValuationActionService.class.getDeclaredMethod("getUserActionTypeTrades", List.class, Map.class, List.class, String.class);
        method.setAccessible(true);

        ValuationReportDocument doc = createValuationReportDocument("key1", 1L);
        Map<DocumentId, UpdateRequest> requests = new HashMap<>();
        UpdateUserActionTypeRequest request = mock(UpdateUserActionTypeRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getUserActionType()).thenReturn("APPROVE");
        when(request.getComment()).thenReturn(mock(Comment.class));
        when(request.getComment().getComment()).thenReturn("Test comment");
        when(request.getAction()).thenReturn("action");
        requests.put(doc.getDocumentId(), request);
        List<ActionUpdateResult> failedTrades = new ArrayList<>();
        when(dataUpdater.addComments(any(), anyString(), anyString(), any())).thenReturn(mock(ExceptionManagement.class));

        List<Pair<ValuationReport, Long>> result = (List<Pair<ValuationReport, Long>>) method.invoke(valuationActionService, Collections.singletonList(doc), requests, failedTrades, "username");

        assertEquals(1, result.size());
        assertTrue(failedTrades.isEmpty());
    }

    @Test
    public void testGetTradeReportWithUserActionType() throws Exception {
        Method method = ValuationActionService.class.getDeclaredMethod("getTradeReportWithUserActionType", ValuationReport.class, ExceptionManagement.class, UserActionType.class);
        method.setAccessible(true);

        ValuationReport tradeReport = mock(ValuationReport.class);
        ExceptionManagement em = mock(ExceptionManagement.class);
        NonReportableData nrd = mock(NonReportableData.class);
        when(tradeReport.getNonReportableData()).thenReturn(nrd);
        UserActionType userActionType = UserActionType.fromValue("APPROVE");

        ValuationReport result = (ValuationReport) method.invoke(valuationActionService, tradeReport, em, userActionType);

        assertNotNull(result);
    }

    @Test
    public void testAddJiraId_Success() {
        AddTradeJiraReferenceRequest request = mock(AddTradeJiraReferenceRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getJiraReference()).thenReturn(mock(JiraReference.class));
        when(request.getJiraReference().getJiraId()).thenReturn("JIRA-1");
        List<AddTradeJiraReferenceRequest> requests = Collections.singletonList(request);

        ValuationReportDocument doc = createValuationReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.isJiraIdPresent(any(), anyString())).thenReturn(false);
        when(dataUpdater.addJiraIdToException(any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));
        when(dfTradePersistManager.saveAllRecords [insert other necessary classes]

        List<ActionUpdateResult> results = valuationActionService.addJiraId(requests, "username");

        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testRemoveComment_NullRequests() {
        List<ActionUpdateResult> results = valuationActionService.removeComment(null, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAddCommentType_NullRequests() {
        List<ActionUpdateResult> results = valuationActionService.addCommentType(null, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testRemoveJiraType_NullRequests() {
        List<ActionUpdateResult> results = valuationActionService.removeJiraType(null, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAddJiraType_NullRequests() {
        List<ActionUpdateResult> results = valuationActionService.addJiraType(null, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testUpdateEditedFields_NullRequests() {
        List<ActionUpdateResult> results = valuationActionService.updateEditedFields(null, "username", ExceptionStatus.Edit_Requested);
        assertTrue(results.isEmpty());
    }

    @Test
    public void testPerformResetAction_NullRequests() {
        List<ActionUpdateResult> results = valuationActionService.performResetAction(null, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAssignExceptionToUser_NullRequests() {
        List<ActionUpdateResult> results = valuationActionService.assignExceptionToUser(null, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testUpdateExceptionStatus_NullRequests() {
        List<ActionUpdateResult> results = valuationActionService.updateExceptionStatus(null, ExceptionStatus.Edit_Requested, "username");
        assertTrue(results.isEmpty());
    }
}
