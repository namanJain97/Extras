@Test
    public void testAddComment_NullRequestList() {
        // Test handling of null request list
        List<ActionUpdateResult> results = tradeActionService.addComment(null, "username");
        assertTrue("Results should be empty for null requests", results.isEmpty());
    }

    @Test
    public void testAddComment_DocumentNotFound() {
        // Test when requested document does not exist
        AddTradeCommentRequest request = mock(AddTradeCommentRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        List<AddTradeCommentRequest> requests = Collections.singletonList(request);

        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.emptyList());

        List<ActionUpdateResult> results = tradeActionService.addComment(requests, "username");

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains("Trade record not found"));
    }

    @Test
    public void testUpdateExceptionStatus_ConcurrentModification() {
        // Test handling of concurrent modification (version mismatch)
        UpdateExceptionStatusRequest request = mock(UpdateExceptionStatusRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        List<UpdateExceptionStatusRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 2L); // Different version
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        doNothing().when(requestValidator).validatePermittedExceptionStatus(anyList(), anyList(), any());
        when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.validateAckedCancleTrade(any(), any())).thenReturn(false);
        when(requestValidator.validateExceptionStatus(any(), any())).thenReturn(true);
        when(requestValidator.validateApprover(any(), any(), any(), any())).thenReturn(false);

        List<ActionUpdateResult> results = tradeActionService.updateExceptionStatus(requests, ExceptionStatus.Edit_Requested, "username");

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains("Version mismatch"));
    }

    @Test
    public void testRemoveJiraId_NullJiraReference() {
        // Test handling of null JIRA reference in request
        AddTradeJiraReferenceRequest request = mock(AddTradeJiraReferenceRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getJiraReference()).thenReturn(null);
        List<AddTradeJiraReferenceRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        doNothing().when(requestValidator).validateMAS755Trades(anyList(), anyList());
        when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);

        List<ActionUpdateResult> results = tradeActionService.removeJiraId(requests, "username");

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains("JIRA reference is null"));
    }

    @Test
    public void testAssignExceptionToUser_InvalidUser() {
        // Test assigning exception to an invalid user
        AssignTradeRequest request = mock(AssignTradeRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        List<AssignTradeRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.assignException(any(), any(), anyString())).thenThrow(new IllegalArgumentException("Invalid user"));

        List<ActionUpdateResult> results = tradeActionService.assignExceptionToUser(requests, "invalidUser");

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains("Invalid user"));
    }

    @Test
    public void testPerformResetAction_MultipleFlows() {
        // Test reset action with multiple flows
        UpdateExceptionStatusRequest request1 = mock(UpdateExceptionStatusRequest.class);
        UpdateExceptionStatusRequest request2 = mock(UpdateExceptionStatusRequest.class);
        when(request1.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request1.getFlow()).thenReturn("flow1");
        when(request2.getDocumentId()).thenReturn(new ActionDocumentId("key2", 1L));
        when(request2.getFlow()).thenReturn("flow2");
        List<UpdateExceptionStatusRequest> requests = Arrays.asList(request1, request2);

        TradeReportDocument doc1 = createTradeReportDocument("key1", 1L);
        TradeReportDocument doc2 = createTradeReportDocument("key2", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Arrays.asList(doc1, doc2));
        when(requestValidator.validateResetActionApprovalStatus(any(), any())).thenReturn(true);
        when(dataUpdater.resetAction(any(), any(), anyString())).thenReturn(mock(ExceptionManagement.class));
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Arrays.asList(
            createSuccessWriteResult("key1", 2L, doc1.getTradeReport()),
            createSuccessWriteResult("key2", 2L, doc2.getTradeReport())
        ));

        List<ActionUpdateResult> results = tradeActionService.performResetAction(requests, "username");

        assertEquals(2, results.size());
        assertTrue(results.get(0).isSuccess());
        assertTrue(results.get(1).isSuccess());
        verify(dataUpdater, times(2)).resetAction(any(), any(), eq("username"));
    }

    @Test
    public void testUpdateUserActionType_NullComment() {
        // Test handling of null comment in UpdateUserActionTypeRequest
        UpdateUserActionTypeRequest request = mock(UpdateUserActionTypeRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getUserActionType()).thenReturn("TEST_ACTION");
        when(request.getComment()).thenReturn(null);
        when(request.getAction()).thenReturn("action");
        List<UpdateUserActionTypeRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        doNothing().when(requestValidator).validateMAS755Trades(anyList(), anyList());

        List<ActionUpdateResult> results = tradeActionService.updateUserActionType(requests, "username");

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains("Comment is null"));
    }

    @Test
    public void testAddJiraType_ExistingJiraType() {
        // Test adding an already existing JIRA type
        AddTradeJiraTypeRequest request = mock(AddTradeJiraTypeRequest.class);
        JiraType jiraType = mock(JiraType.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        when(request.getJiraType()).thenReturn(jiraType);
        when(jiraType.getIssueType()).thenReturn("Bug");
        List<AddTradeJiraTypeRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        doNothing().when(requestValidator).validateMAS755Trades(anyList(), anyList());
        when(requestValidator.validateUser(anyString(), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.addJiraTypeToException(any(), any(), anyString())).thenThrow(new IllegalStateException("JIRA type already exists"));

        List<ActionUpdateResult> results = tradeActionService.addJiraType(requests, "username");

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains("JIRA type already exists"));
    }

    @Test
    public void testUpdateEditedFields_NullExceptionStatus() {
        // Test updating edited fields with null exception status
        EditRequest request = mock(EditRequest.class);
        when(request.getDocumentId()).thenReturn(new ActionDocumentId("key1", 1L));
        List<EditRequest> requests = Collections.singletonList(request);

        TradeReportDocument doc = createTradeReportDocument("key1", 1L);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);

        List<ActionUpdateResult> results = tradeActionService.updateEditedFields(requests, "username", null);

        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains("Exception status is null"));
    }

    @Test
    public void testGetTradeReportDocuments_EmptyDocumentIds() throws Exception {
        // Test private method getTradeReportDocuments with empty document IDs
        Method method = TradeActionService.class.getDeclaredMethod("getTradeReportDocuments", List.class);
        method.setAccessible(true);

        List<DocumentId> docIds = Collections.emptyList();
        when(dfTradePersistManager.getAllRecordsById(docIds)).thenReturn(Collections.emptyList());

        List<TradeReportDocument> result = (List<TradeReportDocument>) method.invoke(tradeActionService, docIds);

        assertTrue("Result should be empty for empty document IDs", result.isEmpty());
    }
