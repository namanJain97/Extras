package com.rbs.tntr.business.blotter.services.actions;

import com.google.common.collect.Lists;
import com.nwm.tntr.commons.domain.persistence.entity.DocumentId;
import com.nwm.tntr.commons.domain.persistence.entity.ExceptionManagement;
import com.nwm.tntr.commons.domain.persistence.entity.NonReportableData;
import com.nwm.tntr.commons.domain.persistence.entity.trade.TradeReport;
import com.nwm.tntr.commons.domain.persistence.entity.trade.TradeReportDocument;
import com.nwm.tntr.commons.repository.regreporting.WriteResult;
import com.rbs.tntr.business.blotter.df.manager.DfTradePersistManager;
import com.rbs.tntr.business.blotter.df.updater.TradeDataUpdater;
import com.rbs.tntr.business.blotter.services.validators.ActionRequestValidator;
import com.rbs.tntr.business.blotter.web.request.regreportingTrade.*;
import com.rbs.tntr.domain.blotter.enums.ExceptionStatus;
import com.rbs.tntr.domain.blotter.exceptions.BlotterRunTimeException;
import com.rbs.tntr.domain.blotter.tntrBlotterView.ActionDocumentId;
import org.apache.commons.lang3.tuple.Pair;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class TradeActionServiceTest {

    @Mock
    private DfTradePersistManager dfTradePersistManager;

    @Mock
    private TradeDataUpdater dataUpdater;

    @Mock
    private ActionRequestValidator requestValidator;

    @InjectMocks
    private TradeActionService tradeActionService;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    // Existing test methods (unchanged)
    @Test
    public void testAddComment_EmptyRequests() {
        List<AddTradeCommentRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = tradeActionService.addComment(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testRemoveComment_EmptyRequests() {
        List<AddTradeCommentRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = tradeActionService.removeComment(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAddCommentType_EmptyRequests() {
        List<AddTradeCommentTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = tradeActionService.addCommentType(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testRemoveJiraType_EmptyRequests() {
        List<AddTradeJiraTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = tradeActionService.removeJiraType(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testPerformResetAction_EmptyRequests() {
        List<UpdateExceptionStatusRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = tradeActionService.performResetAction(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAddComment_WithException() {
        AddTradeCommentRequest request = mock(AddTradeCommentRequest.class);
        ActionDocumentId actionDocumentId = new ActionDocumentId("key1", 1L);
        when(request.getDocumentId()).thenReturn(actionDocumentId);
        List<AddTradeCommentRequest> requests = Lists.newArrayList(request);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenThrow(new RuntimeException("Test exception"));
        List<ActionUpdateResult> results = tradeActionService.addComment(requests, "username");
        assertEquals(1, results.size());
        assertTrue(results.get(0).getError().contains("Error updating trade record"));
    }

    @Test
    public void testRemoveCommentType_EmptyRequests() {
        List<AddTradeCommentTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = tradeActionService.removeCommentType(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testRemoveCommentType_WithException() {
        AddTradeCommentTypeRequest request = mock(AddTradeCommentTypeRequest.class);
        ActionDocumentId actionDocumentId = new ActionDocumentId("key1", 1L);
        when(request.getDocumentId()).thenReturn(actionDocumentId);
        List<AddTradeCommentTypeRequest> requests = Lists.newArrayList(request);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenThrow(new RuntimeException("Test exception"));
        List<ActionUpdateResult> results = tradeActionService.removeCommentType(requests, "username");
        assertEquals(1, results.size());
        assertTrue(results.get(0).getError().contains("Error updating trade record"));
    }

    @Test
    public void testAssignExceptionToUser_EmptyRequests() {
        List<AssignTradeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = tradeActionService.assignExceptionToUser(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAddJiraId_EmptyRequests() {
        List<AddTradeJiraReferenceRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = tradeActionService.addJiraId(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testRemoveJiraId_EmptyRequests() {
        List<AddTradeJiraReferenceRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = tradeActionService.removeJiraId(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testAddJiraType_EmptyRequests() {
        List<AddTradeJiraTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = tradeActionService.addJiraType(requests, "username");
        assertTrue(results.isEmpty());
    }

    @Test
    public void testUpdateUserActionType_EmptyRequests() {
        List<UpdateUserActionTypeRequest> requests = new ArrayList<>();
        List<ActionUpdateResult> results = tradeActionService.updateUserActionType(requests, "username");
        assertTrue(results.isEmpty());
    }

    // New test methods for full coverage

    // Tests for addComment
    @Test
    public void testAddComment_Success() {
        // Setup requests
        AddTradeCommentRequest request1 = mock(AddTradeCommentRequest.class);
        AddTradeCommentRequest request2 = mock(AddTradeCommentRequest.class);
        ActionDocumentId docId1 = new ActionDocumentId("key1", 1L);
        ActionDocumentId docId2 = new ActionDocumentId("key2", 2L);
        when(request1.getDocumentId()).thenReturn(docId1);
        when(request2.getDocumentId()).thenReturn(docId2);
        List<AddTradeCommentRequest> requests = Lists.newArrayList(request1, request2);

        // Setup mocks
        DocumentId docIdObj1 = DocumentId.from("key1", 1L);
        DocumentId docIdObj2 = DocumentId.from("key2", 2L);
        TradeReportDocument tradeDoc1 = new TradeReportDocument();
        tradeDoc1.setDocumentId(docIdObj1);
        TradeReport tradeReport1 = new TradeReport();
        ExceptionManagement em1 = new ExceptionManagement();
        tradeReport1.setExceptionManagement(em1);
        tradeDoc1.setTradeReport(tradeReport1);
        TradeReportDocument tradeDoc2 = new TradeReportDocument();
        tradeDoc2.setDocumentId(docIdObj2);
        TradeReport tradeReport2 = new TradeReport();
        ExceptionManagement em2 = new ExceptionManagement();
        tradeReport2.setExceptionManagement(em2);
        tradeDoc2.setTradeReport(tradeReport2);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Lists.newArrayList(tradeDoc1, tradeDoc2));
        when(requestValidator.validateUser(eq("username"), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.addCommentsToException(eq(request1), eq(em1), eq("username"))).thenReturn(em1);
        when(dataUpdater.addCommentsToException(eq(request2), eq(em2), eq("username"))).thenReturn(em2);
        WriteResult<TradeReport> wr1 = new WriteResult<>(true, new DocumentId("key1", 3L), null);
        WriteResult<TradeReport> wr2 = new WriteResult<>(true, new DocumentId("key2", 4L), null);
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Lists.newArrayList(wr1, wr2));

        // Call method
        List<ActionUpdateResult> results = tradeActionService.addComment(requests, "username");

        // Verify
        assertEquals(2, results.size());
        assertTrue(results.get(0).isSuccess());
        assertTrue(results.get(1).isSuccess());
        verify(dfTradePersistManager).saveAllRecords(argThat(list -> list.size() == 2));
    }

    @Test
    public void testAddComment_UserValidationFails() {
        // Setup requests
        AddTradeCommentRequest request1 = mock(AddTradeCommentRequest.class);
        AddTradeCommentRequest request2 = mock(AddTradeCommentRequest.class);
        ActionDocumentId docId1 = new ActionDocumentId("key1", 1L);
        ActionDocumentId docId2 = new ActionDocumentId("key2", 2L);
        when(request1.getDocumentId()).thenReturn(docId1);
        when(request2.getDocumentId()).thenReturn(docId2);
        List<AddTradeCommentRequest> requests = Lists.newArrayList(request1, request2);

        // Setup mocks
        DocumentId docIdObj1 = DocumentId.from("key1", 1L);
        DocumentId docIdObj2 = DocumentId.from("key2", 2L);
        TradeReportDocument tradeDoc1 = new TradeReportDocument();
        tradeDoc1.setDocumentId(docIdObj1);
        TradeReport tradeReport1 = new TradeReport();
        ExceptionManagement em1 = new ExceptionManagement();
        tradeReport1.setExceptionManagement(em1);
        tradeDoc1.setTradeReport(tradeReport1);
        TradeReportDocument tradeDoc2 = new TradeReportDocument();
        tradeDoc2.setDocumentId(docIdObj2);
        TradeReport tradeReport2 = new TradeReport();
        ExceptionManagement em2 = new ExceptionManagement();
        tradeReport2.setExceptionManagement(em2);
        tradeDoc2.setTradeReport(tradeReport2);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Lists.newArrayList(tradeDoc1, tradeDoc2));
        when(requestValidator.validateUser(eq("username"), eq(em1))).thenReturn(false);
        when(requestValidator.validateUser(eq("username"), eq(em2))).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.addCommentsToException(eq(request2), eq(em2), eq("username"))).thenReturn(em2);
        WriteResult<TradeReport> wr2 = new WriteResult<>(true, new DocumentId("key2", 4L), null);
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Lists.newArrayList(wr2));

        // Call method
        List<ActionUpdateResult> results = tradeActionService.addComment(requests, "username");

        // Verify
        assertEquals(2, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains(ActionRequestValidator.USER_VALIDATION_ERROR));
        assertTrue(results.get(1).isSuccess());
        verify(dfTradePersistManager).saveAllRecords(argThat(list -> list.size() == 1));
    }

    // Tests for updateEditedFields
    @Test
    public void testUpdateEditedFields_Success() {
        // Setup
        EditRequest request = mock(EditRequest.class);
        ActionDocumentId docId = new ActionDocumentId("key1", 1L);
        when(request.getDocumentId()).thenReturn(docId);
        List<EditRequest> requests = Lists.newArrayList(request);

        // Mock dependencies
        DocumentId docIdObj = DocumentId.from("key1", 1L);
        TradeReportDocument tradeDoc = new TradeReportDocument();
        tradeDoc.setDocumentId(docIdObj);
        TradeReport tradeReport = new TradeReport();
        ExceptionManagement em = new ExceptionManagement();
        tradeReport.setExceptionManagement(em);
        tradeDoc.setTradeReport(tradeReport);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Lists.newArrayList(tradeDoc));
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(dataUpdater.updateTradeReportData(eq(request), eq(tradeReport), eq("username"), any(ExceptionStatus.class)))
                .thenReturn(tradeReport);
        WriteResult<TradeReport> writeResult = new WriteResult<>(true, docIdObj, null);
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Lists.newArrayList(writeResult));

        // Call method
        List<ActionUpdateResult> results = tradeActionService.updateEditedFields(requests, "username", ExceptionStatus.someStatus);

        // Verify
        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testUpdateEditedFields_ApprovalStatusValidationFails() {
        // Setup
        EditRequest request = mock(EditRequest.class);
        ActionDocumentId docId = new ActionDocumentId("key1", 1L);
        when(request.getDocumentId()).thenReturn(docId);
        List<EditRequest> requests = Lists.newArrayList(request);

        // Mock dependencies
        DocumentId docIdObj = DocumentId.from("key1", 1L);
        TradeReportDocument tradeDoc = new TradeReportDocument();
        tradeDoc.setDocumentId(docIdObj);
        TradeReport tradeReport = new TradeReport();
        ExceptionManagement em = new ExceptionManagement();
        tradeReport.setExceptionManagement(em);
        tradeDoc.setTradeReport(tradeReport);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Lists.newArrayList(tradeDoc));
        when(requestValidator.validateApprovalStatus(any())).thenReturn(true);

        // Call method
        List<ActionUpdateResult> results = tradeActionService.updateEditedFields(requests, "username", ExceptionStatus.someStatus);

        // Verify
        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains(ActionRequestValidator.APPROVAL_STATUS_VALIDATION_ERROR));
    }

    // Tests for updateExceptionStatus
    @Test
    public void testUpdateExceptionStatus_Success() {
        // Setup
        UpdateExceptionStatusRequest request = mock(UpdateExceptionStatusRequest.class);
        ActionDocumentId docId = new ActionDocumentId("key1", 1L);
        when(request.getDocumentId()).thenReturn(docId);
        List<UpdateExceptionStatusRequest> requests = Lists.newArrayList(request);

        // Mock dependencies
        DocumentId docIdObj = DocumentId.from("key1", 1L);
        TradeReportDocument tradeDoc = new TradeReportDocument();
        tradeDoc.setDocumentId(docIdObj);
        TradeReport tradeReport = new TradeReport();
        ExceptionManagement em = new ExceptionManagement();
        tradeReport.setExceptionManagement(em);
        tradeDoc.setTradeReport(tradeReport);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Lists.newArrayList(tradeDoc));
        doNothing().when(requestValidator).validatePermittedExceptionStatus(anyList(), anyList(), any());
        when(requestValidator.validateUser(eq("username"), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.validateAckedCancleTrade(any(), any())).thenReturn(false);
        when(requestValidator.validateExceptionStatus(any(), any())).thenReturn(true);
        when(requestValidator.validateApprover(any(), any(), any(), any())).thenReturn(false);
        when(dataUpdater.addExceptionStatus(any(), any(), any(), eq("username"))).thenReturn(em);
        WriteResult<TradeReport> writeResult = new WriteResult<>(true, docIdObj, null);
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Lists.newArrayList(writeResult));

        // Call method
        List<ActionUpdateResult> results = tradeActionService.updateExceptionStatus(requests, ExceptionStatus.someStatus, "username");

        // Verify
        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testUpdateExceptionStatus_WithRollBack() {
        // Setup
        UpdateExceptionStatusRequest request = mock(UpdateExceptionStatusRequest.class);
        ActionDocumentId docId = new ActionDocumentId("key1", 3L);
        when(request.getDocumentId()).thenReturn(docId);
        List<UpdateExceptionStatusRequest> requests = Lists.newArrayList(request);

        // Mock dependencies for initial save
        DocumentId docIdObj = DocumentId.from("key1", 3L);
        TradeReportDocument tradeDoc = new TradeReportDocument();
        tradeDoc.setDocumentId(docIdObj);
        TradeReport tradeReport = new TradeReport();
        ExceptionManagement em = new ExceptionManagement();
        tradeReport.setExceptionManagement(em);
        tradeDoc.setTradeReport(tradeReport);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Lists.newArrayList(tradeDoc));
        doNothing().when(requestValidator).validatePermittedExceptionStatus(anyList(), anyList(), any());
        when(requestValidator.validateUser(eq("username"), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.validateAckedCancleTrade(any(), any())).thenReturn(false);
        when(requestValidator.validateExceptionStatus(any(), any())).thenReturn(true);
        when(requestValidator.validateApprover(any(), any(), any(), any())).thenReturn(false);
        when(dataUpdater.addExceptionStatus(any(), any(), any(), eq("username"))).thenReturn(em);
        WriteResult<TradeReport> writeResult = new WriteResult<>(true, docIdObj, null);
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Lists.newArrayList(writeResult));

        // Mock dependencies for rollback
        DocumentId prevDocId = DocumentId.from("key1", 1L);
        TradeReportDocument prevTradeDoc = new TradeReportDocument();
        prevTradeDoc.setDocumentId(prevDocId);
        TradeReport prevTradeReport = new TradeReport();
        prevTradeDoc.setTradeReport(prevTradeReport);
        when(dfTradePersistManager.getAllRecordsById(argThat(list -> list.contains(prevDocId)))).thenReturn(Lists.newArrayList(prevTradeDoc));
        when(dfTradePersistManager.upsertAllRecords(anyList())).thenReturn(Lists.newArrayList(writeResult));

        // Call method
        List<ActionUpdateResult> results = tradeActionService.updateExceptionStatus(requests, ExceptionStatus.Edit_Rejected, "username");

        // Verify
        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
        verify(dfTradePersistManager).upsertAllRecords(anyList());
    }

    // Tests for addJiraId
    @Test
    public void testAddJiraId_Success() {
        // Setup
        AddTradeJiraReferenceRequest request = mock(AddTradeJiraReferenceRequest.class);
        ActionDocumentId docId = new ActionDocumentId("key1", 1L);
        when(request.getDocumentId()).thenReturn(docId);
        List<AddTradeJiraReferenceRequest> requests = Lists.newArrayList(request);

        // Mock dependencies
        DocumentId docIdObj = DocumentId.from("key1", 1L);
        TradeReportDocument tradeDoc = new TradeReportDocument();
        tradeDoc.setDocumentId(docIdObj);
        TradeReport tradeReport = new TradeReport();
        ExceptionManagement em = new ExceptionManagement();
        tradeReport.setExceptionManagement(em);
        tradeDoc.setTradeReport(tradeReport);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Lists.newArrayList(tradeDoc));
        when(requestValidator.validateUser(eq("username"), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.isJiraIdPresent(any(), any())).thenReturn(false);
        when(dataUpdater.addJiraIdToException(any(), any(), eq("username"))).thenReturn(em);
        WriteResult<TradeReport> writeResult = new WriteResult<>(true, docIdObj, null);
        when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Lists.newArrayList(writeResult));

        // Call method
        List<ActionUpdateResult> results = tradeActionService.addJiraId(requests, "username");

        // Verify
        assertEquals(1, results.size());
        assertTrue(results.get(0).isSuccess());
    }

    @Test
    public void testAddJiraId_JiraIdPresent() {
        // Setup
        AddTradeJiraReferenceRequest request = mock(AddTradeJiraReferenceRequest.class);
        ActionDocumentId docId = new ActionDocumentId("key1", 1L);
        when(request.getDocumentId()).thenReturn(docId);
        List<AddTradeJiraReferenceRequest> requests = Lists.newArrayList(request);

        // Mock dependencies
        DocumentId docIdObj = DocumentId.from("key1", 1L);
        TradeReportDocument tradeDoc = new TradeReportDocument();
        tradeDoc.setDocumentId(docIdObj);
        TradeReport tradeReport = new TradeReport();
        ExceptionManagement em = new ExceptionManagement();
        tradeReport.setExceptionManagement(em);
        tradeDoc.setTradeReport(tradeReport);
        when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Lists.newArrayList(tradeDoc));
        when(requestValidator.validateUser(eq("username"), any())).thenReturn(true);
        when(requestValidator.validateApprovalStatus(any())).thenReturn(false);
        when(requestValidator.isJiraIdPresent(any(), any())).thenReturn(true);

        // Call method
        List<ActionUpdateResult> results = tradeActionService.addJiraId(requests, "username");

        // Verify
        assertEquals(1, results.size());
        assertFalse(results.get(0).isSuccess());
        assertTrue(results.get(0).getError().contains(ActionRequestValidator.JIRA_ID_PRESENT));
    }

    // Add similar tests for other methods (removeComment, addCommentType, etc.)
}
