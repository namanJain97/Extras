@Test
public void testRemoveCommentType_Success() throws Exception {
    AddTradeCommentTypeRequest request = new AddTradeCommentTypeRequest();
    request.setDocumentId(new ActionDocumentId("key", 1L));
    List<AddTradeCommentTypeRequest> requests = Collections.singletonList(request);

    TradeReportDocument doc = createMockTradeDoc();
    when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
    when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(
        WriteResult.forSuccess(DocumentId.from("key", 2L), doc.getTradeReport())
    ));

    List<ActionUpdateResult> results = tradeActionService.removeCommentType(requests, "username");
    assertEquals(1, results.size());
    assertTrue(results.get(0).isSuccess());
}

@Test
public void testPerformResetAction_Success() {
    UpdateExceptionStatusRequest request = new UpdateExceptionStatusRequest();
    request.setDocumentId(new ActionDocumentId("key", 1L));
    List<UpdateExceptionStatusRequest> requests = Collections.singletonList(request);

    TradeReportDocument doc = createMockTradeDoc();
    when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
    when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(
        WriteResult.forSuccess(DocumentId.from("key", 2L), doc.getTradeReport())
    ));

    List<ActionUpdateResult> results = tradeActionService.performResetAction(requests, "username");
    assertEquals(1, results.size());
    assertTrue(results.get(0).isSuccess());
}

@Test
public void testUpdateUserActionType_Success() {
    UpdateUserActionTypeRequest request = new UpdateUserActionTypeRequest();
    request.setDocumentId(new ActionDocumentId("key", 1L));
    request.setUserActionType("TEST_ACTION");
    List<UpdateUserActionTypeRequest> requests = Collections.singletonList(request);

    TradeReportDocument doc = createMockTradeDoc();
    when(dfTradePersistManager.getAllRecordsById(anyList())).thenReturn(Collections.singletonList(doc));
    when(dfTradePersistManager.saveAllRecords(anyList())).thenReturn(Collections.singletonList(
        WriteResult.forSuccess(DocumentId.from("key", 2L), doc.getTradeReport())
    ));

    List<ActionUpdateResult> results = tradeActionService.updateUserActionType(requests, "username");
    assertEquals(1, results.size());
    assertTrue(results.get(0).isSuccess());
}

@Test
public void testGetTradeWithRemovedComments_ValidationFailure() throws Exception {
    // Setup reflection to test protected method
    Method method = TradeActionService.class.getDeclaredMethod(
        "getTradeWithRemovedComments", 
        List.class, Map.class, List.class, String.class
    );
    method.setAccessible(true);
    
    TradeReportDocument doc = createMockTradeDoc();
    Map<DocumentId, UpdateRequest> requests = new HashMap<>();
    requests.put(doc.getDocumentId(), new AddTradeCommentRequest());
    
    List<ActionUpdateResult> failedTrades = new ArrayList<>();
    List<Pair<TradeReport, Long>> result = (List<Pair<TradeReport, Long>>) method.invoke(
        tradeActionService, 
        Collections.singletonList(doc), 
        requests, 
        failedTrades, 
        "invalidUser"
    );
    
    assertEquals(0, result.size());
    assertEquals(1, failedTrades.size());
}

@Test
public void testEditFields_BlotterException() throws Exception {
    // Setup reflection to test protected method
    Method method = TradeActionService.class.getDeclaredMethod(
        "editFields", 
        List.class, Map.class, List.class, String.class, ExceptionStatus.class
    );
    method.setAccessible(true);
    
    TradeReportDocument doc = createMockTradeDoc();
    Map<DocumentId, UpdateRequest> requests = new HashMap<>();
    EditRequest editRequest = new EditRequest();
    requests.put(doc.getDocumentId(), editRequest);
    
    List<ActionUpdateResult> failedTrades = new ArrayList<>();
    
    // Force BlotterRunTimeException in dataUpdater
    TradeDataUpdater mockUpdater = mock(TradeDataUpdater.class);
    when(mockUpdater.updateTradeReportData(any(), any(), any(), any()))
        .thenThrow(new BlotterRunTimeException("Edit failed"));
    
    // Inject mock updater
    Field updaterField = TradeActionService.class.getDeclaredField("dataUpdater");
    updaterField.setAccessible(true);
    updaterField.set(tradeActionService, mockUpdater);
    
    List<Pair<TradeReport, Long>> result = (List<Pair<TradeReport, Long>>) method.invoke(
        tradeActionService,
        Collections.singletonList(doc),
        requests,
        failedTrades,
        "username",
        ExceptionStatus.Edit_Requested
    );
    
    assertEquals(0, result.size());
    assertEquals(1, failedTrades.size());
}

@Test
public void testUpdateExceptionStatus_RollbackSuccess() {
    UpdateExceptionStatusRequest request = new UpdateExceptionStatusRequest();
    request.setDocumentId(new ActionDocumentId("key", 3L)); // Requires version rollback
    List<UpdateExceptionStatusRequest> requests = Collections.singletonList(request);

    TradeReportDocument currentDoc = createMockTradeDoc();
    when(currentDoc.getDocumentId()).thenReturn(DocumentId.from("key", 3L));
    
    TradeReportDocument prevDoc = mock(TradeReportDocument.class);
    when(prevDoc.getDocumentId()).thenReturn(DocumentId.from("key", 1L));
    when(prevDoc.getTradeReport()).thenReturn(mock(TradeReport.class));
    
    when(dfTradePersistManager.getAllRecordsById(anyList()))
        .thenReturn(Collections.singletonList(currentDoc))  // First call (current)
        .thenReturn(Collections.singletonList(prevDoc));    // Rollback call (previous version)
    
    when(dfTradePersistManager.upsertAllRecords(anyList())).thenReturn(Collections.singletonList(
        WriteResult.forSuccess(DocumentId.from("key", 1L), prevDoc.getTradeReport())
    ));
    
    List<ActionUpdateResult> results = tradeActionService.updateExceptionStatus(
        requests, ExceptionStatus.Edit_Rejected, "username"
    );
    
    assertEquals(1, results.size());
    assertTrue(results.get(0).isSuccess());
}

@Test
public void testGetResult_WithMixedSuccessAndFailure() throws Exception {
    Method method = TradeActionService.class.getDeclaredMethod(
        "getResult", List.class, List.class
    );
    method.setAccessible(true);
    
    TradeReportDocument doc1 = mock(TradeReportDocument.class);
    when(doc1.getDocumentId()).thenReturn(DocumentId.from("key1", 1L));
    TradeReportDocument doc2 = mock(TradeReportDocument.class);
    when(doc2.getDocumentId()).thenReturn(DocumentId.from("key2", 1L));
    
    WriteResult<TradeReport> success = WriteResult.forSuccess(DocumentId.from("key1", 2L), mock(TradeReport.class));
    WriteResult<TradeReport> failure = WriteResult.forFailure(
        DocumentId.from("key2", 1L), 
        new RuntimeException("Save error")
    );
    
    List<ActionUpdateResult> results = (List<ActionUpdateResult>) method.invoke(
        tradeActionService,
        Arrays.asList(doc1, doc2),
        Arrays.asList(success, failure)
    );
    
    assertEquals(2, results.size());
    assertTrue(results.get(0).isSuccess());
    assertTrue(results.get(1).getError().contains("Save error"));
}

@Test
public void testUpsertAllRecords_Success() throws Exception {
    Method method = TradeActionService.class.getDeclaredMethod(
        "upsertAllRecords", List.class, List.class
    );
    method.setAccessible(true);
    
    TradeReportDocument doc = mock(TradeReportDocument.class);
    TradeReport report = mock(TradeReport.class);
    when(doc.getTradeReport()).thenReturn(report);
    
    when(dfTradePersistManager.upsertAllRecords(anyList())).thenReturn(Collections.singletonList(
        WriteResult.forSuccess(DocumentId.from("key", 2L), report)
    ));
    
    List<ActionUpdateResult> results = (List<ActionUpdateResult>) method.invoke(
        tradeActionService,
        Collections.singletonList(doc),
        Collections.singletonList(report)
    );
    
    assertEquals(1, results.size());
    assertTrue(results.get(0).isSuccess());
}

// Helper method to create a mock TradeReportDocument
private TradeReportDocument createMockTradeDoc() {
    TradeReportDocument doc = mock(TradeReportDocument.class);
    DocumentId docId = DocumentId.from("key", 1L);
    when(doc.getDocumentId()).thenReturn(docId);
    
    TradeReport report = mock(TradeReport.class);
    when(doc.getTradeReport()).thenReturn(report);
    
    ExceptionManagement em = mock(ExceptionManagement.class);
    when(report.getExceptionManagement()).thenReturn(em);
    
    NonReportableData nonReportableData = mock(NonReportableData.class);
    when(report.getNonReportableData()).thenReturn(nonReportableData);
    
    return doc;
}
